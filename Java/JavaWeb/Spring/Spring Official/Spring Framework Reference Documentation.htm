
<!-- saved from url=(0086)http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
      
   <title>Spring Framework Reference Documentation</title><link rel="stylesheet" href="./Spring Framework Reference Documentation_files/manual-singlepage.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="en" class="book" title="Spring Framework Reference Documentation"><div class="titlepage"><div><div><h1 class="title"><a name="d4e1"></a>Spring Framework Reference Documentation</h1></div><div><div class="authorgroup"><h2>Authors</h2>
<span class="author"><span class="firstname">Rod</span> <span class="surname">Johnson</span></span>

, <span class="author"><span class="firstname">Juergen</span> <span class="surname">Hoeller</span></span>

, <span class="author"><span class="firstname">Keith</span> <span class="surname">Donald</span></span>

, <span class="author"><span class="firstname">Colin</span> <span class="surname">Sampaleanu</span></span>

, <span class="author"><span class="firstname">Rob</span> <span class="surname">Harrop</span></span>

, <span class="author"><span class="firstname">Thomas</span> <span class="surname">Risberg</span></span>

, <span class="author"><span class="firstname">Alef</span> <span class="surname">Arendsen</span></span>

, <span class="author"><span class="firstname">Darren</span> <span class="surname">Davison</span></span>

, <span class="author"><span class="firstname">Dmitriy</span> <span class="surname">Kopylenko</span></span>

, <span class="author"><span class="firstname">Mark</span> <span class="surname">Pollack</span></span>

, <span class="author"><span class="firstname">Thierry</span> <span class="surname">Templier</span></span>

, <span class="author"><span class="firstname">Erwin</span> <span class="surname">Vervaet</span></span>

, <span class="author"><span class="firstname">Portia</span> <span class="surname">Tung</span></span>

, <span class="author"><span class="firstname">Ben</span> <span class="surname">Hale</span></span>

, <span class="author"><span class="firstname">Adrian</span> <span class="surname">Colyer</span></span>

, <span class="author"><span class="firstname">John</span> <span class="surname">Lewis</span></span>

, <span class="author"><span class="firstname">Costin</span> <span class="surname">Leau</span></span>

, <span class="author"><span class="firstname">Mark</span> <span class="surname">Fisher</span></span>

, <span class="author"><span class="firstname">Sam</span> <span class="surname">Brannen</span></span>

, <span class="author"><span class="firstname">Ramnivas</span> <span class="surname">Laddad</span></span>

, <span class="author"><span class="firstname">Arjen</span> <span class="surname">Poutsma</span></span>

, <span class="author"><span class="firstname">Chris</span> <span class="surname">Beams</span></span>

, <span class="author"><span class="firstname">Tareq</span> <span class="surname">Abedrabbo</span></span>

, <span class="author"><span class="firstname">Andy</span> <span class="surname">Clement</span></span>

, <span class="author"><span class="firstname">Dave</span> <span class="surname">Syer</span></span>

, <span class="author"><span class="firstname">Oliver</span> <span class="surname">Gierke</span></span>

, <span class="author"><span class="firstname">Rossen</span> <span class="surname">Stoyanchev</span></span>

, <span class="author"><span class="firstname">Phillip</span> <span class="surname">Webb</span></span>

, <span class="author"><span class="firstname">Rob</span> <span class="surname">Winch</span></span>
</div></div><div><p class="releaseinfo">4.0.0.RELEASE</p></div><div><p class="copyright">Copyright © 2004-2013 </p></div><div><div class="legalnotice" title="Legal Notice"><a name="d4e130"></a>
	<p>Copies of this document may be made for your own use and for distribution to
	others, provided that you do not charge any fee for such copies and further provided
	that each copy contains this Copyright Notice, whether distributed in print or
	electronically.</p>
</div></div><div></div></div><hr></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-introduction">I. Overview of Spring Framework</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-getting-started-with-spring">1. Getting Started With Spring</a></span></dt><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview">2. Introduction to Spring Framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-dependency-injection">2.1. Dependency Injection and Inversion of Control</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-modules">2.2. Modules</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-core-container">2.2.1. Core Container</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-data-access">2.2.2. Data Access/Integration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-web">2.2.3. Web</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-aop-instrumentation">2.2.4. AOP and Instrumentation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-testing">2.2.5. Test</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-usagescenarios">2.3. Usage scenarios</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dependency-management">2.3.1. Dependency Management and Naming Conventions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-spring-dependencies">Spring Dependencies and Depending on Spring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-maven-dependency-management">Maven Dependency Management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-maven-bom">Maven "Bill Of Materials" Dependency</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-gradle-dependency-management">Gradle Dependency Management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-ivy-dependency-management">Ivy Dependency Management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-distribution-zip">Distribution Zip Files</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-logging">2.3.2. Logging</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-not-using-commons-logging">Not Using Commons Logging</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-logging-slf4j">Using SLF4J</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-logging-log4j">Using Log4J</a></span></dt></dl></dd></dl></dd></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new">II. What’s New in Spring Framework 4.x</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.0">3. New Features and Enhancements in Spring Framework 4.0</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_improved_getting_started_experience">3.1. Improved Getting Started Experience</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_removed_deprecated_packages_and_methods">3.2. Removed Deprecated Packages and Methods</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_java_8_as_well_as_6_and_7">3.3. Java 8 (as well as 6 and 7)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_java_ee_6_and_7">3.4. Java EE 6 and 7</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_groovy_bean_definition_dsl">3.5. Groovy Bean Definition DSL</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_core_container_improvements">3.6. Core Container Improvements</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_general_web_improvements">3.7. General Web Improvements</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_websocket_sockjs_and_stomp_messaging">3.8. WebSocket, SockJS, and STOMP Messaging</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_testing_improvements">3.9. Testing Improvements</a></span></dt></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-core">III. Core Technologies</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans">4. The IoC container</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-introduction">4.1. Introduction to the Spring IoC container and beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-basics">4.2. Container overview</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-metadata">4.2.1. Configuration metadata</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-instantiation">4.2.2. Instantiating a container</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-xml-import">Composing XML-based configuration metadata</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-client">4.2.3. Using the container</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-definition">4.3. Bean overview</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname">4.3.1. Naming beans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname-alias">Aliasing a bean outside the bean definition</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class">4.3.2. Instantiating beans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-ctor">Instantiation with a constructor</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-static-factory-method">Instantiation with a static factory method</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-instance-factory-method">Instantiation using an instance factory method</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-dependencies">4.4. Dependencies</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-collaborators">4.4.1. Dependency injection</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-constructor-injection">Constructor-based dependency injection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-setter-injection">Setter-based dependency injection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-dependency-resolution">Dependency resolution process</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-some-examples">Examples of dependency injection</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-properties-detailed">4.4.2. Dependencies and configuration in detail</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-value-element">Straight values (primitives, Strings, and so on)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-ref-element">References to other beans (collaborators)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-inner-beans">Inner beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-collection-elements">Collections</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-null-element">Null and empty string values</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-p-namespace">XML shortcut with the p-namespace</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-c-namespace">XML shortcut with the c-namespace</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-compound-property-names">Compound property names</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-dependson">4.4.3. Using depends-on</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lazy-init">4.4.4. Lazy-initialized beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire">4.4.5. Autowiring collaborators</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-exceptions">Limitations and disadvantages of autowiring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire-candidate">Excluding a bean from autowiring</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-method-injection">4.4.6. Method injection</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lookup-method-injection">Lookup method injection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-arbitrary-method-replacement">Arbitrary method replacement</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes">4.5. Bean scopes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton">4.5.1. The singleton scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-prototype">4.5.2. The prototype scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-sing-prot-interaction">4.5.3. Singleton beans with prototype-bean dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other">4.5.4. Request, session, and global session scopes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-web-configuration">Initial web configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-request">Request scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-session">Session scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-global-session">Global session scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-injection">Scoped beans as dependencies</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom">4.5.5. Custom scopes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom-creating">Creating a custom scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom-using">Using a custom scope</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-nature">4.6. Customizing the nature of a bean</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle">4.6.1. Lifecycle callbacks</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean">Initialization callbacks</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean">Destruction callbacks</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-default-init-destroy-methods">Default initialization and destroy methods</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-combined-effects">Combining lifecycle mechanisms</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-processor">Startup and shutdown callbacks</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-shutdown">Shutting down the Spring IoC container gracefully in non-web applications</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware">4.6.2. ApplicationContextAware and BeanNameAware</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aware-list">4.6.3. Other Aware interfaces</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-child-bean-definitions">4.7. Bean definition inheritance</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension">4.8. Container Extension Points</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp">4.8.1. Customizing beans using a BeanPostProcessor</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp-examples-hw">Example: Hello World, BeanPostProcessor-style</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp-examples-rabpp">Example: The RequiredAnnotationBeanPostProcessor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-factory-postprocessors">4.8.2. Customizing configuration metadata with a BeanFactoryPostProcessor</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-placeholderconfigurer">Example: the Class name substitution PropertyPlaceholderConfigurer</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-overrideconfigurer">Example: the PropertyOverrideConfigurer</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-factorybean">4.8.3. Customizing instantiation logic with a FactoryBean</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config">4.9. Annotation-based container configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-required-annotation">4.9.1. @Required</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation">4.9.2. @Autowired</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation-qualifiers">4.9.3. Fine-tuning annotation-based autowiring with qualifiers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-generics-as-qualifiers">4.9.4. Using generics as autowiring qualifiers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-custom-autowire-configurer">4.9.5. CustomAutowireConfigurer</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-resource-annotation">4.9.6. @Resource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations">4.9.7. @PostConstruct and @PreDestroy</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-classpath-scanning">4.10. Classpath scanning and managed components</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-stereotype-annotations">4.10.1. @Component and further stereotype annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-annotations">4.10.2. Meta-annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-autodetection">4.10.3. Automatically detecting classes and registering bean definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-filters">4.10.4. Using filters to customize scanning</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factorybeans-annotations">4.10.5. Defining bean metadata within components</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-name-generator">4.10.6. Naming autodetected components</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-scope-resolver">4.10.7. Providing a scope for autodetected components</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-qualifiers">4.10.8. Providing qualifier metadata with annotations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-standard-annotations">4.11. Using JSR 330 Standard Annotations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-inject-named">4.11.1. Dependency Injection with @Inject and @Named</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-named">4.11.2. @Named: a standard equivalent to the @Component annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-standard-annotations-limitations">4.11.3. Limitations of the standard approach</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java">4.12. Java-based container configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-basic-concepts">4.12.1. Basic concepts: @Bean and @Configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instantiating-container">4.12.2. Instantiating the Spring container using AnnotationConfigApplicationContext</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instantiating-container-contstructor">Simple construction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instantiating-container-register">Building the container programmatically using register(Class&lt;?&gt;…)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instantiating-container-scan">Enabling component scanning with scan(String…)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instantiating-container-web">Support for web applications with AnnotationConfigWebApplicationContext</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-bean-annotation">4.12.3. Using the @Bean annotation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-declaring-a-bean">Declaring a bean</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-lifecycle-callbacks">Receiving lifecycle callbacks</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-specifying-bean-scope">Specifying bean scope</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-customizing-bean-naming">Customizing bean naming</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-bean-aliasing">Bean aliasing</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-bean-description">Bean description</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-configuration-annotation">4.12.4. Using the @Configuration annotation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-injecting-dependencies">Injecting inter-bean dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-method-injection">Lookup method injection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-further-information-java-config">Further information about how Java-based configuration works internally</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-composing-configuration-classes">4.12.5. Composing Java-based configurations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-using-import">Using the @Import annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-conditional">Conditionally including @Configuration classes or @Beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-combining">Combining Java and XML configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-profiles">4.13. Bean definition profiles and environment abstraction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-property-source-abstraction">4.14. PropertySource Abstraction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-load-time-weaver">4.15. Registering a LoadTimeWeaver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction">4.16. Additional Capabilities of the ApplicationContext</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-functionality-messagesource">4.16.1. Internationalization using MessageSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-functionality-events">4.16.2. Standard and Custom Events</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-functionality-resources">4.16.3. Convenient access to low-level resources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-create">4.16.4. Convenient ApplicationContext instantiation for web applications</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-deploy-rar">4.16.5. Deploying a Spring ApplicationContext as a J2EE RAR file</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanfactory">4.17. The BeanFactory</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction-ctx-vs-beanfactory">4.17.1. BeanFactory or ApplicationContext?</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-servicelocator">4.17.2. Glue code and the evil singleton</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources">5. Resources</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-introduction">5.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-resource">5.2. The Resource interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations">5.3. Built-in Resource implementations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-urlresource">5.3.1. UrlResource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-classpathresource">5.3.2. ClassPathResource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-filesystemresource">5.3.3. FileSystemResource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-servletcontextresource">5.3.4. ServletContextResource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-inputstreamresource">5.3.5. InputStreamResource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations-bytearrayresource">5.3.6. ByteArrayResource</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-resourceloader">5.4. The ResourceLoader</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-resourceloaderaware">5.5. The ResourceLoaderAware interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-as-dependencies">5.6. Resources as dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx">5.7. Application contexts and Resource paths</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-construction">5.7.1. Constructing application contexts</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-classpathxml">Constructing ClassPathXmlApplicationContext instances - shortcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-wildcards-in-resource-paths">5.7.2. Wildcards in application context constructor resource paths</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-ant-patterns-in-paths">Ant-style Patterns</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-classpath-wildcards">The Classpath*: portability classpath*: prefix</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-wildcards-in-path-other-stuff">Other notes relating to wildcards</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-filesystemresource-caveats">5.7.3. FileSystemResource caveats</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation">6. Validation, Data Binding, and Type Conversion</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-introduction">6.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validator">6.2. Validation using Spring’s Validator interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-conversion">6.3. Resolving codes to error messages</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beans">6.4. Bean manipulation and the BeanWrapper</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-conventions">6.4.1. Setting and getting basic and nested properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-conversion">6.4.2. Built-in PropertyEditor implementations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-conversion-customeditor-registration">Registering additional custom PropertyEditors</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert">6.5. Spring Type Conversion</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-Converter-API">6.5.1. Converter SPI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-ConverterFactory-SPI">6.5.2. ConverterFactory</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-GenericConverter-SPI">6.5.3. GenericConverter</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-ConditionalGenericConverter-SPI">ConditionalGenericConverter</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-ConversionService-API">6.5.4. ConversionService API</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-Spring-config">6.5.5. Configuring a ConversionService</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-programmatic-usage">6.5.6. Using a ConversionService programmatically</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format">6.6. Spring Field Formatting</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-Formatter-SPI">6.6.1. Formatter SPI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-CustomFormatAnnotations">6.6.2. Annotation-driven Formatting</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-annotations-api">Format Annotation API</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-FormatterRegistry-SPI">6.6.3. FormatterRegistry SPI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-FormatterRegistrar-SPI">6.6.4. FormatterRegistrar SPI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-configuring-formatting-mvc">6.6.5. Configuring Formatting in Spring MVC</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#format-configuring-formatting-globaldatetimeformat">6.7. Configuring a global date &amp; time format</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation">6.8. Spring Validation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation-overview">6.8.1. Overview of the JSR-303 Bean Validation API</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring">6.8.2. Configuring a Bean Validation Provider</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring-inject">Injecting a Validator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring-constraints">Configuring Custom Constraints</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring-other">Additional Configuration Options</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-binder">6.8.3. Configuring a DataBinder</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc">6.8.4. Spring MVC 3 Validation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc-triggering">Triggering @Controller Input Validation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc-configuring">Configuring a Validator for use by Spring MVC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc-jsr303">Configuring a JSR-303/JSR-349 Validator for use by Spring MVC</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions">7. Spring Expression Language (SpEL)</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-intro">7.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-features">7.2. Feature Overview</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-evaluation">7.3. Expression Evaluation using Spring’s Expression Interface</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-evaluation-context">7.3.1. The EvaluationContext interface</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-type-conversion">Type Conversion</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-beandef">7.4. Expression support for defining bean definitions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-beandef-xml-based">7.4.1. XML based configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-beandef-annotation-based">7.4.2. Annotation-based configuration</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-language-ref">7.5. Language Reference</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-ref-literal">7.5.1. Literal expressions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-properties-arrays">7.5.2. Properties, Arrays, Lists, Maps, Indexers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-inline-lists">7.5.3. Inline lists</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-array-construction">7.5.4. Array construction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-methods">7.5.5. Methods</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operators">7.5.6. Operators</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operators-relational">Relational operators</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operators-logical">Logical operators</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operators-mathematical">Mathematical operators</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-assignment">7.5.7. Assignment</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-types">7.5.8. Types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-constructors">7.5.9. Constructors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-ref-variables">7.5.10. Variables</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-this-root">The #this and #root variables</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-ref-functions">7.5.11. Functions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-bean-references">7.5.12. Bean references</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operator-ternary">7.5.13. Ternary Operator (If-Then-Else)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operator-elvis">7.5.14. The Elvis Operator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-operator-safe-navigation">7.5.15. Safe Navigation operator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-collection-selection">7.5.16. Collection Selection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-collection-projection">7.5.17. Collection Projection</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-templating">7.5.18. Expression templating</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions-example-classes">7.6. Classes used in the examples</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop">8. Aspect Oriented Programming with Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction">8.1. Introduction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction-defn">8.1.1. AOP concepts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction-spring-defn">8.1.2. Spring AOP capabilities and goals</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction-proxies">8.1.3. AOP Proxies</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj">8.2. @AspectJ support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aspectj-support">8.2.1. Enabling @AspectJ Support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-enable-aspectj-java">Enabling @AspectJ Support with Java configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-enable-aspectj-xml">Enabling @AspectJ Support with XML configuration</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-at-aspectj">8.2.2. Declaring an aspect</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts">8.2.3. Declaring a pointcut</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts-designators">Supported Pointcut Designators</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts-combining">Combining pointcut expressions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-common-pointcuts">Sharing common pointcut definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts-examples">Examples</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#writing-good-pointcuts">Writing good pointcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-advice">8.2.4. Declaring advice</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-before">Before advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-after-returning">After returning advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-after-throwing">After throwing advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-after-finally">After (finally) advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-around-advice">Around advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-advice-params">Advice parameters</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-advice-ordering">Advice ordering</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introductions">8.2.5. Introductions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-instantiation-models">8.2.6. Aspect instantiation models</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-example">8.2.7. Example</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema">8.3. Schema-based AOP support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-declaring-an-aspect">8.3.1. Declaring an aspect</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-pointcuts">8.3.2. Declaring a pointcut</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice">8.3.3. Declaring advice</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice-before">Before advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice-after-returning">After returning advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice-after-throwing">After throwing advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice-after-finally">After (finally) advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice-around">Around advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-params">Advice parameters</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ordering">Advice ordering</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-introductions">8.3.4. Introductions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-instatiation-models">8.3.5. Aspect instantiation models</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advisors">8.3.6. Advisors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-example">8.3.7. Example</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-choosing">8.4. Choosing which AOP declaration style to use</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-spring-or-aspectj">8.4.1. Spring AOP or full AspectJ?</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-or-xml">8.4.2. @AspectJ or XML for Spring AOP?</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-mixing-styles">8.5. Mixing aspect types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-proxying">8.6. Proxying mechanisms</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-understanding-aop-proxies">8.6.1. Understanding AOP proxies</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aspectj-programmatic">8.7. Programmatic creation of @AspectJ Proxies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-using-aspectj">8.8. Using AspectJ with Spring applications</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-atconfigurable">8.8.1. Using AspectJ to dependency inject domain objects with Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-configurable-testing">Unit testing @Configurable objects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-configurable-container">Working with multiple application contexts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ajlib-other">8.8.2. Other Spring aspects for AspectJ</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-configure">8.8.3. Configuring AspectJ aspects using Spring IoC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw">8.8.4. Load-time weaving with AspectJ in the Spring Framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-first-example">A first example</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-the-aspects">Aspects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-aop_dot_xml">' META-INF/aop.xml'</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-libraries">Required libraries (JARS)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-spring">Spring configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-environments">Environment-specific configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-resources">8.9. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api">9. Spring AOP APIs</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-introduction">9.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts">9.2. Pointcut API in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-concepts">9.2.1. Concepts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcut-ops">9.2.2. Operations on pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-aspectj">9.2.3. AspectJ expression pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-impls">9.2.4. Convenience pointcut implementations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-static">Static pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-dynamic">Dynamic pointcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-superclasses">9.2.5. Pointcut superclasses</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-custom">9.2.6. Custom pointcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice">9.3. Advice API in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-lifecycle">9.3.1. Advice lifecycles</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-types">9.3.2. Advice types in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-around">Interception around advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-before">Before advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-throws">Throws advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-after-returning">After Returning advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-introduction">Introduction advice</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advisor">9.4. Advisor API in Spring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb">9.5. Using the ProxyFactoryBean to create AOP proxies</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-1">9.5.1. Basics</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-2">9.5.2. JavaBean properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-proxy-types">9.5.3. JDK- and CGLIB-based proxies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-proxying-intf">9.5.4. Proxying interfaces</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-proxying-class">9.5.5. Proxying classes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-global-advisors">9.5.6. Using <span class="emphasis"><em>global</em></span> advisors</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-concise-proxy">9.6. Concise proxy definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-prog">9.7. Creating AOP proxies programmatically with the ProxyFactory</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advised">9.8. Manipulating advised objects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-autoproxy">9.9. Using the "auto-proxy" facility</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-autoproxy-choices">9.9.1. Autoproxy bean definitions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-autoproxy">BeanNameAutoProxyCreator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-autoproxy-default">DefaultAdvisorAutoProxyCreator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-autoproxy-abstract">AbstractAdvisorAutoProxyCreator</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-autoproxy-metadata">9.9.2. Using metadata-driven auto-proxying</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-targetsource">9.10. Using TargetSources</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-swap">9.10.1. Hot swappable target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-pool">9.10.2. Pooling target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-prototype">9.10.3. Prototype target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-threadlocal">9.10.4. ThreadLocal target sources</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-extensibility">9.11. Defining new Advice types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api-resources">9.12. Further resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing">10. Testing</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-introduction">10.1. Introduction to Spring Testing</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#unit-testing">10.2. Unit Testing</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mock-objects">10.2.1. Mock Objects</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-env">Environment</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-jndi">JNDI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-servlet">Servlet API</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-portlet">Portlet API</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#unit-testing-support-classes">10.2.2. Unit Testing support Classes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#unit-testing-utilities">General utilities</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#unit-testing-spring-mvc">Spring MVC</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing">10.3. Integration Testing</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-overview">10.3.1. Overview</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-goals">10.3.2. Goals of Integration Testing</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-ctx-management">Context management and caching</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-fixture-di">Dependency Injection of test fixtures</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-tx">Transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-support-classes">Support classes for integration testing</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-support-jdbc">10.3.3. JDBC Testing Support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations">10.3.4. Annotations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-spring">Spring Testing Annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-standard">Standard Annotation Support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-junit">Spring JUnit Testing Annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-meta">Meta-Annotation Support for Testing</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-framework">10.3.5. Spring TestContext Framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-key-abstractions">Key abstractions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management">Context management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-fixture-di">Dependency injection of test fixtures</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-web-scoped-beans">Testing request and session scoped beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx">Transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-support-classes">TestContext Framework support classes</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-framework">10.3.6. Spring MVC Test Framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-server">Server-Side Tests</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-client">Client-Side REST Tests</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-examples-petclinic">10.3.7. PetClinic Example</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing-resources">10.4. Further Resources</a></span></dt></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-data-tier">IV. Data Access</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction">11. Transaction Management</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-intro">11.1. Introduction to Spring Framework transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-motivation">11.2. Advantages of the Spring Framework’s transaction support model</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-global">11.2.1. Global transactions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-local">11.2.2. Local transactions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-programming-model">11.2.3. Spring Framework’s consistent programming model</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-strategies">11.3. Understanding the Spring Framework transaction abstraction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-resource-synchronization">11.4. Synchronizing resources with transactions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-resource-synchronization-high">11.4.1. High-level synchronization approach</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-resource-synchronization-low">11.4.2. Low-level synchronization approach</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-resource-synchronization-tadsp">11.4.3. TransactionAwareDataSourceProxy</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative">11.5. Declarative transaction management</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-decl-explained">11.5.1. Understanding the Spring Framework’s declarative transaction implementation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-first-example">11.5.2. Example of declarative transaction implementation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-rolling-back">11.5.3. Rolling back a declarative transaction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-diff-tx">11.5.4. Configuring different transactional semantics for different beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-txadvice-settings">11.5.5. &lt;tx:advice/&gt; settings</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-annotations">11.5.6. Using @Transactional</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-attransactional-settings">@Transactional settings</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-multiple-tx-mgrs-with-attransactional">Multiple Transaction Managers with @Transactional</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-custom-attributes">Custom shortcut annotations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation">11.5.7. Transaction propagation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation-required">Required</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation-requires_new">RequiresNew</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation-nested">Nested</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-applying-more-than-just-tx-advice">11.5.8. Advising transactional operations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-aspectj">11.5.9. Using @Transactional with AspectJ</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-programmatic">11.6. Programmatic transaction management</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-template">11.6.1. Using the TransactionTemplate</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-template-settings">Specifying transaction settings</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-programmatic-ptm">11.6.2. Using the PlatformTransactionManager</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tx-decl-vs-prog">11.7. Choosing between programmatic and declarative transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-application-server-integration">11.8. Application server-specific integration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-application-server-integration-websphere">11.8.1. IBM WebSphere</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-application-server-integration-weblogic">11.8.2. Oracle WebLogic Server</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-solutions-to-common-problems">11.9. Solutions to common problems</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-solutions-to-common-problems-wrong-ptm">11.9.1. Use of the wrong transaction manager for a specific DataSource</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-resources">11.10. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dao">12. DAO support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dao-introduction">12.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dao-exceptions">12.2. Consistent exception hierarchy</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dao-annotations">12.3. Annotations used for configuring DAO or Repository classes</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc">13. Data access with JDBC</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-introduction">13.1. Introduction to Spring Framework JDBC</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-choose-style">13.1.1. Choosing an approach for JDBC database access</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-packages">13.1.2. Package hierarchy</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-core">13.2. Using the JDBC core classes to control basic JDBC processing and error handling</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate">13.2.1. JdbcTemplate</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate-examples">Examples of JdbcTemplate class usage</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate-idioms">JdbcTemplate best practices</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-NamedParameterJdbcTemplate">13.2.2. NamedParameterJdbcTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SQLExceptionTranslator">13.2.3. SQLExceptionTranslator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-statements-executing">13.2.4. Executing statements</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-statements-querying">13.2.5. Running queries</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-updates">13.2.6. Updating the database</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-auto-genereted-keys">13.2.7. Retrieving auto-generated keys</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-connections">13.3. Controlling database connections</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-datasource">13.3.1. DataSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-DataSourceUtils">13.3.2. DataSourceUtils</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SmartDataSource">13.3.3. SmartDataSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-AbstractDataSource">13.3.4. AbstractDataSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SingleConnectionDataSource">13.3.5. SingleConnectionDataSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-DriverManagerDataSource">13.3.6. DriverManagerDataSource</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-TransactionAwareDataSourceProxy">13.3.7. TransactionAwareDataSourceProxy</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-DataSourceTransactionManager">13.3.8. DataSourceTransactionManager</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-NativeJdbcExtractor">13.3.9. NativeJdbcExtractor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-advanced-jdbc">13.4. JDBC batch operations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-classic">13.4.1. Basic batch operations with the JdbcTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-list">13.4.2. Batch operations with a List of objects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-multi">13.4.3. Batch operations with multiple batches</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc">13.5. Simplifying JDBC operations with the SimpleJdbc classes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-insert-1">13.5.1. Inserting data using SimpleJdbcInsert</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-insert-2">13.5.2. Retrieving auto-generated keys using SimpleJdbcInsert</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-insert-3">13.5.3. Specifying columns for a SimpleJdbcInsert</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-parameters">13.5.4. Using SqlParameterSource to provide parameter values</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-1">13.5.5. Calling a stored procedure with SimpleJdbcCall</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-2">13.5.6. Explicitly declaring parameters to use for a SimpleJdbcCall</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-params">13.5.7. How to define SqlParameters</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-3">13.5.8. Calling a stored function using SimpleJdbcCall</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-4">13.5.9. Returning ResultSet/REF Cursor from a SimpleJdbcCall</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-object">13.6. Modeling JDBC operations as Java objects</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SqlQuery">13.6.1. SqlQuery</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-MappingSqlQuery">13.6.2. MappingSqlQuery</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SqlUpdate">13.6.3. SqlUpdate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-StoredProcedure">13.6.4. StoredProcedure</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-parameter-handling">13.7. Common problems with parameter and data value handling</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-type-information">13.7.1. Providing SQL type information for parameters</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-lob">13.7.2. Handling BLOB and CLOB objects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-in-clause">13.7.3. Passing in lists of values for IN clause</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-complex-types">13.7.4. Handling complex types for stored procedure calls</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-support">13.8. Embedded database support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-why-embedded-database">13.8.1. Why use an embedded database?</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-xml">13.8.2. Creating an embedded database instance using Spring XML</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-java">13.8.3. Creating an embedded database instance programmatically</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-extension">13.8.4. Extending the embedded database support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-using-HSQL">13.8.5. Using HSQL</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-using-H2">13.8.6. Using H2</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-using-Derby">13.8.7. Using Derby</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-dao-testing">13.8.8. Testing data access logic with an embedded database</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-intializing-datasource">13.9. Initializing a DataSource</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-initializing-datasource-xml">13.9.1. Initializing a database instance using Spring XML</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-client-component-initialization">Initialization of Other Components that Depend on the Database</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm">14. Object Relational Mapping (ORM) Data Access</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-introduction">14.1. Introduction to ORM with Spring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-general">14.2. General ORM integration considerations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-resource-mngmnt">14.2.1. Resource and transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-exception-translation">14.2.2. Exception translation</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate">14.3. Hibernate</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-session-factory-setup">14.3.1. SessionFactory setup in a Spring container</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-straight">14.3.2. Implementing DAOs based on plain Hibernate 3 API</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-tx-declarative">14.3.3. Declarative transaction demarcation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-tx-programmatic">14.3.4. Programmatic transaction demarcation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-tx-strategies">14.3.5. Transaction management strategies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-resources">14.3.6. Comparing container-managed and locally defined resources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-invalid-jdbc-access-error">14.3.7. Spurious application server warnings with Hibernate</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo">14.4. JDO</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo-setup">14.4.1. PersistenceManagerFactory setup</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo-daos-straight">14.4.2. Implementing DAOs based on the plain JDO API</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo-tx">14.4.3. Transaction management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo-dialect">14.4.4. JdoDialect</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa">14.5. JPA</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup">14.5.1. Three options for JPA setup in a Spring environment</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-lemfb">LocalEntityManagerFactoryBean</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-jndi">Obtaining an EntityManagerFactory from JNDI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-lcemfb">LocalContainerEntityManagerFactoryBean</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-multiple-pu">Dealing with multiple persistence units</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-straight">14.5.2. Implementing DAOs based on plain JPA</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-tx">14.5.3. Transaction Management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-dialect">14.5.4. JpaDialect</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm">15. Marshalling XML using O/X Mappers</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-introduction">15.1. Introduction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_ease_of_configuration">15.1.1. Ease of configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_consistent_interfaces">15.1.2. Consistent Interfaces</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#_consistent_exception_hierarchy">15.1.3. Consistent Exception Hierarchy</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-marshaller-unmarshaller">15.2. Marshaller and Unmarshaller</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-marshaller">15.2.1. Marshaller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-unmarshaller">15.2.2. Unmarshaller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlmappingexception">15.2.3. XmlMappingException</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-usage">15.3. Using Marshaller and Unmarshaller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-schema-based-config">15.4. XML Schema-based Configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jaxb">15.5. JAXB</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jaxb2">15.5.1. Jaxb2Marshaller</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jaxb2-xsd">XML Schema-based Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-castor">15.6. Castor</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-castor-marshaller">15.6.1. CastorMarshaller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-castor-mapping">15.6.2. Mapping</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-castor-xsd">XML Schema-based Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlbeans">15.7. XMLBeans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlbeans-marshaller">15.7.1. XmlBeansMarshaller</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlbeans-xsd">XML Schema-based Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jibx">15.8. JiBX</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jibx-marshaller">15.8.1. JibxMarshaller</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-jibx-xsd">XML Schema-based Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xstream">15.9. XStream</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm-xstream-marshaller">15.9.1. XStreamMarshaller</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-web">V. The Web</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc">16. Web MVC framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduction">16.1. Introduction to Spring Web MVC framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-features">16.1.1. Features of Spring Web MVC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduction-pluggability">16.1.2. Pluggability of other MVC implementations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-servlet">16.2. The DispatcherServlet</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-servlet-special-bean-types">16.2.1. Special Bean Types In the WebApplicationContext</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-servlet-config">16.2.2. Default DispatcherServlet Configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-servlet-sequence">16.2.3. DispatcherServlet Processing Sequence</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-controller">16.3. Implementing Controllers</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-controller">16.3.1. Defining a controller with @Controller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping">16.3.2. Mapping Requests With Using @RequestMapping</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-31-vs-30">New Support Classes for @RequestMapping methods in Spring MVC 3.1</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-uri-templates">URI Template Patterns</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-uri-templates-regex">URI Template Patterns with Regular Expressions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-patterns">Path Patterns</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-placeholders">Patterns with Placeholders</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-matrix-variables">Matrix Variables</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-consumes">Consumable Media Types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-produces">Producible Media Types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-params-and-headers">Request Parameters and Header Values</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-methods">16.3.3. Defining @RequestMapping handler methods</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-arguments">Supported method argument types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-return-types">Supported method return types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestparam">Binding request parameters to method parameters with @RequestParam</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestbody">Mapping the request body with the @RequestBody annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-responsebody">Mapping the response body with the @ResponseBody annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontroller">Creating REST Controllers with the @RestController annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-httpentity">Using HttpEntity</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-modelattrib-methods">Using @ModelAttribute on a method</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-modelattrib-method-args">Using @ModelAttribute on a method argument</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-sessionattrib">Using @SessionAttributes to store model attributes in the HTTP session between requests</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-redirect-attributes">Specifying redirect and flash attributes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-form-urlencoded-data">Working with "application/x-www-form-urlencoded" data</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-cookievalue">Mapping cookie values with the @CookieValue annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestheader">Mapping request header attributes with the @RequestHeader annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-typeconversion">Method Parameters And Type Conversion</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-webdatabinder">Customizing WebDataBinder initialization</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-lastmodified">Support for the Last-Modified Response Header To Facilitate Content Caching</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-controller-advice">Assisting Controllers with the @ControllerAdvice annotation</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async">16.3.4. Asynchronous Request Processing</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async-exceptions">Exception Handling for Async Requests</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async-interception">Intercepting Async Requests</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async-configuration">Configuration for Async Request Processing</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-tests">16.3.5. Testing Controllers</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-handlermapping">16.4. Handler mappings</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-handlermapping-interceptor">16.4.1. Intercepting requests with a HandlerInterceptor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-viewresolver">16.5. Resolving views</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-viewresolver-resolver">16.5.1. Resolving views with the ViewResolver interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-viewresolver-chaining">16.5.2. Chaining ViewResolvers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-redirecting">16.5.3. Redirecting to views</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-redirecting-redirect-view">RedirectView</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-redirecting-redirect-prefix">The redirect: prefix</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-redirecting-forward-prefix">The forward: prefix</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multiple-representations">16.5.4. ContentNegotiatingViewResolver</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-flash-attributes">16.6. Using flash attributes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-construct-encode-uri">16.7. Building URIs</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-construct-uri-controllers">16.8. Building URIs to Controllers and methods</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver">16.9. Using locales</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-timezone">16.9.1. Obtaining Time Zone Information</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver-acceptheader">16.9.2. AcceptHeaderLocaleResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver-cookie">16.9.3. CookieLocaleResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver-session">16.9.4. SessionLocaleResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver-interceptor">16.9.5. LocaleChangeInterceptor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-themeresolver">16.10. Using themes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-themeresolver-introduction">16.10.1. Overview of themes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-themeresolver-defining">16.10.2. Defining themes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-themeresolver-resolving">16.10.3. Theme resolvers</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart">16.11. Spring’s multipart (file upload) support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-introduction">16.11.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-resolver-commons">16.11.2. Using a MultipartResolver with <span class="emphasis"><em>Commons FileUpload</em></span></a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-resolver-standard">16.11.3. Using a MultipartResolver with <span class="emphasis"><em>Servlet 3.0</em></span></a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-forms">16.11.4. Handling a file upload in a form</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-forms-non-browsers">16.11.5. Handling a file upload request from programmatic clients</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-exceptionhandlers">16.12. Handling exceptions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-exceptionhandlers-resolver">16.12.1. HandlerExceptionResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-exceptionhandler">16.12.2. @ExceptionHandler</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-rest-spring-mvc-exceptions">16.12.3. Handling Standard Spring MVC Exceptions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-annotated-exceptions">16.12.4. Annotating Business Exceptions With @ResponseStatus</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-customer-servlet-container-error-page">16.12.5. Customizing the Default Servlet Container Error Page</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc">16.13. Convention over configuration support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc-ccnhm">16.13.1. The Controller ControllerClassNameHandlerMapping</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc-modelmap">16.13.2. The Model ModelMap (ModelAndView)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc-r2vnt">16.13.3. The View - RequestToViewNameTranslator</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-etag">16.14. ETag support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-container-config">16.15. Code-based Servlet container initialization</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config">16.16. Configuring Spring MVC</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-enable">16.16.1. Enabling the MVC Java Config or the MVC XML Namespace</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-customize">16.16.2. Customizing the Provided Configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-interceptors">16.16.3. Configuring Interceptors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-content-negotiation">16.16.4. Configuring Content Negotiation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-view-controller">16.16.5. Configuring View Controllers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-static-resources">16.16.6. Configuring Serving of Resources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-default-servlet-handler">16.16.7. mvc:default-servlet-handler</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-resources">16.16.8. More Spring Web MVC Resources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-advanced-java">16.16.9. Advanced Customizations with MVC Java Config</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-advanced-xml">16.16.10. Advanced Customizations with the MVC Namespace</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view">17. View technologies</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-introduction">17.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp">17.2. JSP &amp; JSTL</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-resolver">17.2.1. View resolvers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-jstl">17.2.2. <span class="emphasis"><em>Plain-old</em></span> JSPs versus JSTL</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-tags">17.2.3. Additional tags facilitating development</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib">17.2.4. Using Spring’s form tag library</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-configuration">Configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-formtag">The form tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-inputtag">The input tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-checkboxtag">The checkbox tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-checkboxestag">The checkboxes tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-radiobuttontag">The radiobutton tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-radiobuttonstag">The radiobuttons tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-passwordtag">The password tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-selecttag">The select tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-optiontag">The option tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-optionstag">The options tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-textAreatag">The textarea tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-hiddeninputtag">The hidden tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-errorstag">The errors tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-method-conversion">HTTP Method Conversion</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-html5">HTML5 Tags</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles">17.3. Tiles</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-dependencies">17.3.1. Dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-integrate">17.3.2. How to integrate Tiles</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-url">UrlBasedViewResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-resource">ResourceBundleViewResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-preparer">SimpleSpringPreparerFactory and SpringBeanPreparerFactory</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity">17.4. Velocity &amp; FreeMarker</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-dependencies">17.4.1. Dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-contextconfig">17.4.2. Context configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-createtemplates">17.4.3. Creating templates</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-advancedconfig">17.4.4. Advanced configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-example-velocityproperties">velocity.properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#views-freemarker">FreeMarker</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-forms">17.4.5. Bind support and form handling</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-bind-macros">The bind macros</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-simple-binding">Simple binding</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#views-form-macros">Form input generation macros</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#views-form-macros-html-escaping">HTML escaping and XHTML compliance</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt">17.5. XSLT</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-firstwords">17.5.1. My First Words</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-beandefs">Bean definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-controllercode">Standard MVC controller code</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-subclassing">Convert the model data to XML</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-viewdefinitions">Defining the view properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-transforming">Document transformation</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-summary">17.5.2. Summary</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document">17.6. Document views (PDF/Excel)</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-intro">17.6.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-config">17.6.2. Configuration and setup</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-configviews">Document view definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-configcontroller">Controller code</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-configsubclasses">Subclassing for Excel views</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-document-configsubclasspdf">Subclassing for PDF views</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports">17.7. JasperReports</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-dependencies">17.7.1. Dependencies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-configuration">17.7.2. Configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-configuration-resolver">Configuring the ViewResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-configuration-views">Configuring the Views</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-configuration-report-files">About Report Files</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-configuration-multiformat-view">Using JasperReportsMultiFormatView</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-model">17.7.3. Populating the ModelAndView</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-subreports">17.7.4. Working with Sub-Reports</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-subreports-config-reports">Configuring Sub-Report Files</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-subreports-config-datasources">Configuring Sub-Report Data Sources</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-exporter-parameters">17.7.5. Configuring Exporter Parameters</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-feeds">17.8. Feed Views</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-xml-marshalling">17.9. XML Marshalling View</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#view-json-mapping">17.10. JSON Mapping View</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#web-integration">18. Integrating with other web frameworks</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#intro">18.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#web-integration-common">18.2. Common configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jsf">18.3. JavaServer Faces 1.2</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jsf-springbeanfaceselresolver">18.3.1. SpringBeanFacesELResolver (JSF 1.2+)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jsf-facescontextutils">18.3.2. FacesContextUtils</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#struts">18.4. Apache Struts 2.x</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#tapestry">18.5. Tapestry 5.x</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#web-integration-resources">18.6. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet">19. Portlet MVC Framework</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-introduction">19.1. Introduction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-introduction-controller">19.1.1. Controllers - The C in MVC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-introduction-view">19.1.2. Views - The V in MVC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-introduction-scope">19.1.3. Web-scoped beans</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-dispatcher">19.2. The DispatcherPortlet</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-viewservlet">19.3. The ViewRendererServlet</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller">19.4. Controllers</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller-abstractcontroller">19.4.1. AbstractController and PortletContentGenerator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller-simple">19.4.2. Other simple controllers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller-command">19.4.3. Command Controllers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller-wrapping">19.4.4. PortletWrappingController</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping">19.5. Handler mappings</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-portletmode">19.5.1. PortletModeHandlerMapping</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-parameter">19.5.2. ParameterHandlerMapping</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-portletmodeparameter">19.5.3. PortletModeParameterHandlerMapping</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-interceptor">19.5.4. Adding HandlerInterceptors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-interceptoradapter">19.5.5. HandlerInterceptorAdapter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-parameterinterceptor">19.5.6. ParameterMappingInterceptor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-viewresolver">19.6. Views and resolving them</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-multipart">19.7. Multipart (file upload) support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-multipart-resolver">19.7.1. Using the PortletMultipartResolver</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-multipart-forms">19.7.2. Handling a file upload in a form</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-exceptionresolver">19.8. Handling exceptions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-annotation">19.9. Annotation-based controller configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-setup">19.9.1. Setting up the dispatcher for annotation support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-controller">19.9.2. Defining a controller with @Controller</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-requestmapping">19.9.3. Mapping requests with @RequestMapping</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-requestmapping-arguments">19.9.4. Supported handler method arguments</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-requestparam">19.9.5. Binding request parameters to method parameters with @RequestParam</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-modelattrib">19.9.6. Providing a link to data from the model with @ModelAttribute</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-sessionattrib">19.9.7. Specifying attributes to store in a Session with @SessionAttributes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-webdatabinder">19.9.8. Customizing WebDataBinder initialization</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-initbinder">Customizing data binding with @InitBinder</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-webbindinginitializer">Configuring a custom WebBindingInitializer</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet-deployment">19.10. Portlet application deployment</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket">20. WebSocket Support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-intro">20.1. Introduction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-into-fallback-options">20.1.1. Fallback Options</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-intro-architecture">20.1.2. Messaging Architecture</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-intro-sub-protocol">20.1.3. Sub-Protocol Support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-intro-when-to-use">20.1.4. When To Use WebSocket?</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-server">20.2. WebSocket Server</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-server-handler">20.2.1. Create and Configure a WebSocketHandler</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-server-handshake">20.2.2. Customizing the WebSocket Handshake</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-server-decorators">20.2.3. WebSocketHandler Decoration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-server-deployment">20.2.4. Deployment Considerations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-fallback">20.3. Fallback Options</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-fallback-sockjs-enable">20.3.1. Enable SockJS</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-fallback-sockjs-explained">20.3.2. How SockJS Works</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-fallback-sockjs-spring">20.3.3. Spring’s SockJS Support</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp">20.4. STOMP Messaging</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-overview">20.4.1. Overview of STOMP</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-enable">20.4.2. Enable STOMP (over WebSocket)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle">20.4.3. Overview of STOMP Message Handling</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-annotations">Annotation-based Message Handling</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-send">Sending Messages From Anywhere</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-simple-broker">Simple Message Broker</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-broker-relay">Using a Full-Featured Message Broker</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-user">Handling Messages to User Destinations</a></span></dt></dl></dd></dl></dd></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-integration">VI. Integration</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting">21. Remoting and web services using Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-introduction">21.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-rmi">21.2. Exposing services using RMI</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-rmi-server">21.2.1. Exporting the service using the RmiServiceExporter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-rmi-client">21.2.2. Linking in the service at the client</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols">21.3. Using Hessian or Burlap to remotely call services via HTTP</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-hessian">21.3.1. Wiring up the DispatcherServlet for Hessian and co.</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-hessian-server">21.3.2. Exposing your beans by using the HessianServiceExporter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-hessian-client">21.3.3. Linking in the service on the client</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-burlap">21.3.4. Using Burlap</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-security">21.3.5. Applying HTTP basic authentication to a service exposed through Hessian or Burlap</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-httpinvoker">21.4. Exposing services using HTTP invokers</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-httpinvoker-server">21.4.1. Exposing the service object</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-httpinvoker-client">21.4.2. Linking in the service at the client</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-services">21.5. Web services</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-services-jaxws-export-servlet">21.5.1. Exposing servlet-based web services using JAX-WS</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-services-jaxws-export-standalone">21.5.2. Exporting standalone web services using JAX-WS</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-services-jaxws-export-ri">21.5.3. Exporting web services using the JAX-WS RI’s Spring support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-services-jaxws-access">21.5.4. Accessing web services using JAX-WS</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-jms">21.6. JMS</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-jms-server">21.6.1. Server-side configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-jms-client">21.6.2. Client-side configuration</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-amqp">21.7. AMQP</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-autodection-remote-interfaces">21.8. Auto-detection is not implemented for remote interfaces</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#remoting-considerations">21.9. Considerations when choosing a technology</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-client-access">21.10. Accessing RESTful services on the Client</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-resttemplate">21.10.1. RestTemplate</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-resttemplate-uri">Working with the URI</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-template-headers">Dealing with request and response headers</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-message-conversion">21.10.2. HTTP Message Conversion</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-string-converter">StringHttpMessageConverter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-form-converter">FormHttpMessageConverter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-byte-converter">ByteArrayHttpMessageConverter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-marhsalling-converter">MarshallingHttpMessageConverter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-mapping-json-converter">MappingJackson2HttpMessageConverter (or MappingJacksonHttpMessageConverter with Jackson 1.x)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-source-converter">SourceHttpMessageConverter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-buffered-image-converter">BufferedImageHttpMessageConverter</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-async-resttemplate">21.10.3. Async RestTemplate</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb">22. Enterprise JavaBeans (EJB) integration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-introduction">22.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-access">22.2. Accessing EJBs</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-concepts">22.2.1. Concepts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-local">22.2.2. Accessing local SLSBs</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-remote">22.2.3. Accessing remote SLSBs</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-ejb2-ejb3">22.2.4. Accessing EJB 2.x SLSBs versus EJB 3 SLSBs</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-implementation">22.3. Using Spring’s EJB implementation support classes</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb-implementation-ejb3">22.3.1. EJB 3 injection interceptor</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms">23. JMS (Java Message Service)</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-introduction">23.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-using">23.2. Using Spring JMS</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-jmstemplate">23.2.1. JmsTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-connections">23.2.2. Connections</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-caching-resources">Caching Messaging Resources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-connection-factory">SingleConnectionFactory</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-connection-factory-caching">CachingConnectionFactory</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-destinations">23.2.3. Destination Management</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-mdp">23.2.4. Message Listener Containers</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-mdp-simple">SimpleMessageListenerContainer</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-mdp-default">DefaultMessageListenerContainer</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-tx">23.2.5. Transaction management</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-sending">23.3. Sending a Message</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-msg-conversion">23.3.1. Using Message Converters</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-callbacks">23.3.2. SessionCallback and ProducerCallback</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-receiving">23.4. Receiving a message</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-receiving-sync">23.4.1. Synchronous Reception</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-asynchronousMessageReception">23.4.2. Asynchronous Reception - Message-Driven POJOs</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-receiving-async-session-aware-message-listener">23.4.3. the SessionAwareMessageListener interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-receiving-async-message-listener-adapter">23.4.4. the MessageListenerAdapter</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-tx-participation">23.4.5. Processing messages within transactions</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-jca-message-endpoint-manager">23.5. Support for JCA Message Endpoints</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms-namespace">23.6. JMS Namespace Support</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx">24. JMX</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-introduction">24.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-exporting">24.2. Exporting your beans to JMX</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-exporting-mbeanserver">24.2.1. Creating an MBeanServer</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-mbean-server">24.2.2. Reusing an existing MBeanServer</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-exporting-lazy">24.2.3. Lazy-initialized MBeans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-exporting-auto">24.2.4. Automatic registration of MBeans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-exporting-registration-behavior">24.2.5. Controlling the registration behavior</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface">24.3. Controlling the management interface of your beans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-assembler">24.3.1. the MBeanInfoAssembler Interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-metadata">24.3.2. Using Source-Level Metadata (JDK 5.0 annotations)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-metadata-types">24.3.3. Source-Level Metadata Types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-autodetect">24.3.4. the AutodetectCapableMBeanInfoAssembler interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-java">24.3.5. Defining management interfaces using Java interfaces</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-methodnames">24.3.6. Using MethodNameBasedMBeanInfoAssembler</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-naming">24.4. Controlling the ObjectNames for your beans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-naming-properties">24.4.1. Reading ObjectNames from Properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-naming-metadata">24.4.2. Using the MetadataNamingStrategy</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-context-mbeanexport">24.4.3. Configuring annotation based MBean export</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-jsr160">24.5. JSR-160 Connectors</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-jsr160-server">24.5.1. Server-side Connectors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-jsr160-client">24.5.2. Client-side Connectors</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-jsr160-protocols">24.5.3. JMX over Burlap/Hessian/SOAP</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-proxy">24.6. Accessing MBeans via Proxies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-notifications">24.7. Notifications</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-notifications-listeners">24.7.1. Registering Listeners for Notifications</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-notifications-publishing">24.7.2. Publishing Notifications</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-resources">24.8. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci">25. JCA CCI</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-introduction">25.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-config">25.2. Configuring CCI</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-config-connector">25.2.1. Connector configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-config-connectionfactory">25.2.2. ConnectionFactory configuration in Spring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-config-cci-connections">25.2.3. Configuring CCI connections</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-config-single-connection">25.2.4. Using a single CCI connection</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-using">25.3. Using Spring’s CCI access support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-record-creator">25.3.1. Record conversion</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-using-template">25.3.2. the CciTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-using-dao">25.3.3. DAO support</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#automatic-output-generation">25.3.4. Automatic output record generation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#template-summary">25.3.5. Summary</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-straight">25.3.6. Using a CCI Connection and Interaction directly</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-template-example">25.3.7. Example for CciTemplate usage</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-object">25.4. Modeling CCI access as operation objects</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-object-mapping-record">25.4.1. MappingRecordOperation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-object-mapping-comm-area">25.4.2. MappingCommAreaOperation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-automatic-record-gen">25.4.3. Automatic output record generation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-object-summary">25.4.4. Summary</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-objects-mappring-record-example">25.4.5. Example for MappingRecordOperation usage</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-objects-mapping-comm-area-example">25.4.6. Example for MappingCommAreaOperation usage</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci-tx">25.5. Transactions</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail">26. Email</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-introduction">26.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-usage">26.2. Usage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-usage-simple">26.2.1. Basic MailSender and SimpleMailMessage usage</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-usage-mime">26.2.2. Using the JavaMailSender and the MimeMessagePreparator</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-javamail-mime">26.3. Using the JavaMail MimeMessageHelper</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-javamail-mime-attachments">26.3.1. Sending attachments and inline resources</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-javamail-mime-attachments-attachment">Attachments</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-javamail-mime-attachments-inline">Inline resources</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-templates">26.3.2. Creating email content using a templating library</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mail-templates-example">A Velocity-based example</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling">27. Task Execution and Scheduling</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-introduction">27.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-executor">27.2. The Spring TaskExecutor abstraction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-executor-types">27.2.1. TaskExecutor types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-executor-usage">27.2.2. Using a TaskExecutor</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-scheduler">27.3. The Spring TaskScheduler abstraction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-trigger-interface">27.3.1. the Trigger interface</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-trigger-implementations">27.3.2. Trigger implementations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-scheduler-implementations">27.3.3. TaskScheduler implementations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-support">27.4. Annotation Support for Scheduling and Asynchronous Execution</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-enable-annotation-support">27.4.1. Enable scheduling annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-support-scheduled">27.4.2. The @Scheduled Annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-support-async">27.4.3. The @Async Annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-support-qualification">27.4.4. Executor qualification with @Async</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-namespace">27.5. The Task Namespace</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-namespace-scheduler">27.5.1. The <span class="emphasis"><em>scheduler</em></span> element</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-namespace-executor">27.5.2. The <span class="emphasis"><em>executor</em></span> element</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-namespace-scheduled-tasks">27.5.3. The <span class="emphasis"><em>scheduled-tasks</em></span> element</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz">27.6. Using the Quartz Scheduler</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz-jobdetail">27.6.1. Using the JobDetailBean</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz-method-invoking-job">27.6.2. Using the MethodInvokingJobDetailFactoryBean</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz-cron">27.6.3. Wiring up jobs using triggers and the SchedulerFactoryBean</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language">28. Dynamic language support</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-introduction">28.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-a-first-example">28.2. A first example</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans">28.3. Defining beans that are backed by dynamic languages</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-concepts">28.3.1. Common concepts</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-concepts-xml-language-element">The &lt;lang:language/&gt; element</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-refreshable-beans">Refreshable beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-inline">Inline dynamic language source files</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-ctor-injection">Understanding Constructor Injection in the context of dynamic-language-backed beans</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-jruby">28.3.2. JRuby beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-groovy">28.3.3. Groovy beans</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-groovy-customizer">Customising Groovy objects via a callback</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-bsh">28.3.4. BeanShell beans</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-scenarios">28.4. Scenarios</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-scenarios-controllers">28.4.1. Scripted Spring MVC Controllers</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-scenarios-validators">28.4.2. Scripted Validators</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-final-notes">28.5. Bits and bobs</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-final-notes-aop">28.5.1. AOP - advising scripted beans</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-final-notes-scopes">28.5.2. Scoping</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-resources">28.6. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache">29. Cache Abstraction</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-introduction">29.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-strategies">29.2. Understanding the cache abstraction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations">29.3. Declarative annotation-based caching</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-cacheable">29.3.1. @Cacheable annotation</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-default-key">Default Key Generation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-key">Custom Key Generation Declaration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-condition">Conditional caching</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-spel-context">Available caching SpEL evaluation context</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-put">29.3.2. @CachePut annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-evict">29.3.3. @CacheEvict annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-caching">29.3.4. @Caching annotation</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotation-enable">29.3.5. Enable caching annotations</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-annotation-stereotype">29.3.6. Using custom annotations</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-declarative-xml">29.4. Declarative XML-based caching</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration">29.5. Configuring the cache storage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-jdk">29.5.1. JDK ConcurrentMap-based Cache</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-ehcache">29.5.2. EhCache-based Cache</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-gemfire">29.5.3. GemFire-based Cache</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-noop">29.5.4. Dealing with caches without a backing store</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-plug">29.6. Plugging-in different back-end caches</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cache-specific-config">29.7. How can I set the TTL/TTI/Eviction policy/XXX feature?</a></span></dt></dl></dd></dl></dd><dt><span class="part"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-appendices">VII. Appendices</a></span></dt><dd><dl><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#migration-4.0">30. Migrating to Spring Framework 4.0</a></span></dt><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring">31. Classic Spring Usage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-orm">31.1. Classic ORM usage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-hibernate">31.1.1. Hibernate</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-template">the HibernateTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate-daos">Implementing Spring-based DAOs without callbacks</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jdo">31.1.2. JDO</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo-template">JdoTemplate and <code class="literal">JdoDaoSupport</code></a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jpa">31.1.3. JPA</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-template">JpaTemplate and <code class="literal">JpaDaoSupport</code></a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#clasic-spring-mvc">31.2. Classic Spring MVC</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jms">31.3. JMS Usage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jms-template">31.3.1. JmsTemplate</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-aysnc-messages">31.3.2. Asynchronous Message Reception</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jms-connections">31.3.3. Connections</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-spring-jms-tx-management">31.3.4. Transaction Management</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-spring">32. Classic Spring AOP Usage</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts">32.1. Pointcut API in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-concepts">32.1.1. Concepts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcut-ops">32.1.2. Operations on pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-aspectj">32.1.3. AspectJ expression pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-impls">32.1.4. Convenience pointcut implementations</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-static">Static pointcuts</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-dynamic">Dynamic pointcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-superclasses">32.1.5. Pointcut superclasses</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-custom">32.1.6. Custom pointcuts</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice">32.2. Advice API in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-lifecycle">32.2.1. Advice lifecycles</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-types">32.2.2. Advice types in Spring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-around">Interception around advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-before">Before advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-throws">Throws advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-after-returning">After Returning advice</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-introduction">Introduction advice</a></span></dt></dl></dd></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advisor">32.3. Advisor API in Spring</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-pfb">32.4. Using the ProxyFactoryBean to create AOP proxies</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-pfb-1">32.4.1. Basics</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-pfb-2">32.4.2. JavaBean properties</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-pfb-proxy-types">32.4.3. JDK- and CGLIB-based proxies</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-proxying-intf">32.4.4. Proxying interfaces</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-proxying-class">32.4.5. Proxying classes</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-global-advisors">32.4.6. Using <span class="emphasis"><em>global</em></span> advisors</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-concise-proxy">32.5. Concise proxy definitions</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-prog">32.6. Creating AOP proxies programmatically with the ProxyFactory</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-advised">32.7. Manipulating advised objects</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-autoproxy">32.8. Using the "autoproxy" facility</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-autoproxy-choices">32.8.1. Autoproxy bean definitions</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-autoproxy">BeanNameAutoProxyCreator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-autoproxy-default">DefaultAdvisorAutoProxyCreator</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-autoproxy-abstract">AbstractAdvisorAutoProxyCreator</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-autoproxy-metadata">32.8.2. Using metadata-driven auto-proxying</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-targetsource">32.9. Using TargetSources</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-ts-swap">32.9.1. Hot swappable target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-ts-pool">32.9.2. Pooling target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-ts-prototype">32.9.3. Prototype target sources</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-ts-threadlocal">32.9.4. ThreadLocal target sources</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-extensibility">32.10. Defining new Advice types</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-resources">32.11. Further resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config">33. XML Schema-based configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-introduction">33.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body">33.2. XML Schema-based configuration</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-referencing">33.2.1. Referencing the schemas</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util">33.2.2. the util schema</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-constant">&lt;util:constant/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-property-path">&lt;util:property-path/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-properties">&lt;util:properties/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-list">&lt;util:list/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-map">&lt;util:map/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util-set">&lt;util:set/&gt;</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee">33.2.3. the jee schema</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup">&lt;jee:jndi-lookup/&gt; (simple)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup-environment-single">&lt;jee:jndi-lookup/&gt; (with single JNDI environment setting)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup-evironment-multiple">&lt;jee:jndi-lookup/&gt; (with multiple JNDI environment settings)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup-complex">&lt;jee:jndi-lookup/&gt; (complex)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-local-slsb">&lt;jee:local-slsb/&gt; (simple)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-local-slsb-complex">&lt;jee:local-slsb/&gt; (complex)</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-remote-slsb">&lt;jee:remote-slsb/&gt;</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-lang">33.2.4. the lang schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jms">33.2.5. the jms schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-tx">33.2.6. the tx (transaction) schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-aop">33.2.7. the aop schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context">33.2.8. the context schema</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-pphc">&lt;property-placeholder/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-ac">&lt;annotation-config/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-component-scan">&lt;component-scan/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-ltw">&lt;load-time-weaver/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-sc">&lt;spring-configured/&gt;</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-mbe">&lt;mbean-export/&gt;</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-tool">33.2.9. the tool schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jdbc">33.2.10. the jdbc schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-cache">33.2.11. the cache schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-beans">33.2.12. the beans schema</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml">34. Extensible XML authoring</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-introduction">34.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-schema">34.2. Authoring the schema</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-namespacehandler">34.3. Coding a NamespaceHandler</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-parser">34.4. nDefinitionParser</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-registration">34.5. Registering the handler and the schema</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-registration-spring-handlers">34.5.1. <span class="emphasis"><em>META-INF/spring.handlers</em></span></a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-registration-spring-schemas">34.5.2. <span class="emphasis"><em>META-INF/spring.schemas</em></span></a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-using">34.6. Using a custom extension in your Spring XML configuration</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-meat">34.7. Meatier examples</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-custom-nested">34.7.1. Nesting custom tags within custom tags</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-custom-just-attributes">34.7.2. Custom attributes on <span class="emphasis"><em>normal</em></span> elements</a></span></dt></dl></dd><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-resources">34.8. Further Resources</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld">35. spring.tld</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld-intro">35.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.bind">35.2. the bind tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.escapeBody">35.3. the escapeBody tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.hasBindErrors">35.4. the hasBindErrors tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.htmlEscape">35.5. the htmlEscape tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.message">35.6. the message tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.nestedPath">35.7. the nestedPath tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.theme">35.8. the theme tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.transform">35.9. the transform tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.url">35.10. the url tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.eval">35.11. the eval tag</a></span></dt></dl></dd><dt><span class="chapter"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld">36. spring-form.tld</a></span></dt><dd><dl><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld-intro">36.1. Introduction</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.checkbox">36.2. the checkbox tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.checkboxes">36.3. the checkboxes tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.errors">36.4. the errors tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.form">36.5. the form tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.hidden">36.6. the hidden tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.input">36.7. the input tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.label">36.8. the label tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.option">36.9. the option tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.options">36.10. the options tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.password">36.11. the password tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.radiobutton">36.12. the radiobutton tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.radiobuttons">36.13. the radiobuttons tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.select">36.14. the select tag</a></span></dt><dt><span class="section"><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.textarea">36.15. the textarea tag</a></span></dt></dl></dd></dl></dd></dl></div>

<div class="part" title="Part I. Overview of Spring Framework"><div class="titlepage"><div><div><h1 class="title"><a name="spring-introduction"></a>Part&nbsp;I.&nbsp;Overview of Spring Framework</h1></div></div></div>

<div class="partintro" title="Overview of Spring Framework"><div></div>
<p>The Spring Framework is a lightweight solution and a potential one-stop-shop for
building your enterprise-ready applications. However, Spring is modular, allowing you to
use only those parts that you need, without having to bring in the rest. You can use the
IoC container, with Struts on top, but you can also use only the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate" title="14.3 Hibernate">Hibernate integration code</a> or the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-introduction" title="13.1 Introduction to Spring Framework JDBC">JDBC abstraction
layer</a>. The Spring Framework supports declarative transaction management, remote access
to your logic through RMI or web services, and various options for persisting your data.
It offers a full-featured <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduction" title="16.1 Introduction to Spring Web MVC framework">MVC framework</a>, and enables you to
integrate <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction" title="8.1 Introduction">AOP</a> transparently into your software.</p>
<p>Spring is designed to be non-intrusive, meaning that your domain logic code generally
has no dependencies on the framework itself. In your integration layer (such as the data
access layer), some dependencies on the data access technology and the Spring libraries
will exist. However, it should be easy to isolate these dependencies from the rest of
your code base.</p>
<p>This document is a reference guide to Spring Framework features. If you have any
requests, comments, or questions on this document, please post them on the user mailing
list or on the support forums at <a class="ulink" href="http://forum.spring.io/" target="_top">http://forum.spring.io/</a>.</p>
</div>
<div class="chapter" title="1. Getting Started With Spring"><div class="titlepage"><div><div><h2 class="title"><a name="overview-getting-started-with-spring"></a>1.&nbsp;Getting Started With Spring</h2></div></div></div>

<p>This reference guide provides detailed information about the Spring Framework.
It provides comprehensive documentation for all features, as well as some background
about the underlying concepts (such as <span class="emphasis"><em>"Dependency Injection"</em></span>) that Spring has
embraced.</p>
<p>If you are just getting started with Spring, you may want to begin with the lighter
<a class="ulink" href="https://spring.io/guides" target="_top">"Getting Started"</a> guides that are available from
<a class="ulink" href="http://spring.io/" target="_top">http://spring.io</a>. As well as being easier to digest, these guide are very
<span class="emphasis"><em>task focused</em></span>. They also cover other projects from the Spring portfolio that you might
 want to consider when solving a particular problem.</p>
<p><a class="ulink" href="https://spring.io/guides/gs/rest-service/" target="_top">Getting Started Building a RESTful Web Service</a>
would be an excellent first choice to get your feet wet.</p>
</div>
<div class="chapter" title="2. Introduction to Spring Framework"><div class="titlepage"><div><div><h2 class="title"><a name="overview"></a>2.&nbsp;Introduction to Spring Framework</h2></div></div></div>

<p>Spring Framework is a Java platform that provides comprehensive infrastructure support
for developing Java applications. Spring handles the infrastructure so you can focus on
your application.</p>
<p>Spring enables you to build applications from "plain old Java objects" (POJOs) and to
apply enterprise services non-invasively to POJOs. This capability applies to the Java
SE programming model and to full and partial Java EE.</p>
<p>Examples of how you, as an application developer, can use the Spring platform advantage:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Make a Java method execute in a database transaction without having to deal with
transaction APIs.
</li><li class="listitem">
Make a local Java method a remote procedure without having to deal with remote APIs.
</li><li class="listitem">
Make a local Java method a management operation without having to deal with JMX APIs.
</li><li class="listitem">
Make a local Java method a message handler without having to deal with JMS APIs.
</li></ul></div>

<div class="section" title="2.1 Dependency Injection and Inversion of Control"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="overview-dependency-injection"></a>2.1&nbsp;Dependency Injection and Inversion of Control</h2></div></div></div>

<div class="sidebar" title="Background"><a name="background-ioc"></a><p class="title"><b>Background</b></p>

<p>"<span class="emphasis"><em>The question is, what aspect of control are [they] inverting?</em></span>" Martin Fowler posed
this question about Inversion of Control (IoC) on his site in 2004. Fowler suggested
renaming the principle to make it more self-explanatory and came up with <span class="emphasis"><em>Dependency
Injection</em></span>.</p>
<p>For insight into IoC and DI, refer to Fowler’s article at
<a class="ulink" href="http://martinfowler.com/articles/injection.html" target="_top">http://martinfowler.com/articles/injection.html</a>.</p>
</div>

<p>Java applications&#8201;—&#8201;a loose term that runs the gamut from constrained applets to n-tier
server-side enterprise applications&#8201;—&#8201;typically consist of objects that collaborate to
form the application proper. Thus the objects in an application have <span class="emphasis"><em>dependencies</em></span> on
each other.</p>
<p>Although the Java platform provides a wealth of application development functionality,
it lacks the means to organize the basic building blocks into a coherent whole, leaving
that task to architects and developers. True, you can use design patterns such
as <span class="emphasis"><em>Factory</em></span>, <span class="emphasis"><em>Abstract Factory</em></span>, <span class="emphasis"><em>Builder</em></span>, <span class="emphasis"><em>Decorator</em></span>, and <span class="emphasis"><em>Service Locator</em></span>
to compose the various classes and object instances that make up an application.
However, these patterns are simply that: best practices given a name, with a description
of what the pattern does, where to apply it, the problems it addresses, and so forth.
Patterns are formalized best practices that <span class="emphasis"><em>you must implement yourself</em></span> in your
application.</p>
<p>The Spring Framework <span class="emphasis"><em>Inversion of Control</em></span> (IoC) component addresses this concern by
providing a formalized means of composing disparate components into a fully working
application ready for use. The Spring Framework codifies formalized design patterns as
first-class objects that you can integrate into your own application(s). Numerous
organizations and institutions use the Spring Framework in this manner to engineer
robust, <span class="emphasis"><em>maintainable</em></span> applications.</p>
</div>
<div class="section" title="2.2 Modules"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="overview-modules"></a>2.2&nbsp;Modules</h2></div></div></div>

<p>The Spring Framework consists of features organized into about 20 modules. These modules
are grouped into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented
Programming), Instrumentation, and Test, as shown in the following diagram.</p>
<div class="figure"><a name="d4e191"></a><p class="title"><b>Figure&nbsp;2.1.&nbsp;Overview of the Spring Framework</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/spring-overview.png" alt="spring overview"></div>
</div></div><br class="figure-break">

<div class="section" title="2.2.1 Core Container"><div class="titlepage"><div><div><h3 class="title"><a name="overview-core-container"></a>2.2.1&nbsp;Core Container</h3></div></div></div>

<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-introduction" title="4.1 Introduction to the Spring IoC container and beans"><span class="emphasis"><em>Core Container</em></span></a> consists of the Core, Beans, Context, and
Expression Language modules.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-introduction" title="4.1 Introduction to the Spring IoC container and beans"><span class="emphasis"><em>Core and Beans</em></span></a> modules provide the fundamental parts of
the framework, including the IoC and Dependency Injection features. The <code class="literal">BeanFactory</code> is
a sophisticated implementation of the factory pattern. It removes the need for
programmatic singletons and allows you to decouple the configuration and specification
of dependencies from your actual program logic.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction" title="4.16 Additional Capabilities of the ApplicationContext"><span class="emphasis"><em>Context</em></span></a> module builds on the solid base provided by the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-introduction" title="4.1 Introduction to the Spring IoC container and beans"><span class="emphasis"><em>Core and Beans</em></span></a> modules: it is a means to access objects in a
framework-style manner that is similar to a JNDI registry. The Context module inherits
its features from the Beans module and adds support for internationalization (using, for
example, resource bundles), event-propagation, resource-loading, and the transparent
creation of contexts by, for example, a servlet container. The Context module also
supports Java EE features such as EJB, JMX ,and basic remoting. The <code class="literal">ApplicationContext</code>
interface is the focal point of the Context module.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions" title="7. Spring Expression Language (SpEL)"><span class="emphasis"><em>Expression Language</em></span></a> module provides a powerful expression
language for querying and manipulating an object graph at runtime. It is an extension of
the unified expression language (unified EL) as specified in the JSP 2.1 specification.
The language supports setting and getting property values, property assignment, method
invocation, accessing the context of arrays, collections and indexers, logical and
arithmetic operators, named variables, and retrieval of objects by name from Spring’s
IoC container. It also supports list projection and selection as well as common list
aggregations.</p>
</div>
<div class="section" title="2.2.2 Data Access/Integration"><div class="titlepage"><div><div><h3 class="title"><a name="overview-data-access"></a>2.2.2&nbsp;Data Access/Integration</h3></div></div></div>

<p>The <span class="emphasis"><em>Data Access/Integration</em></span> layer consists of the JDBC, ORM, OXM, JMS and
Transaction modules.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jdbc-introduction" title="13.1 Introduction to Spring Framework JDBC">JDBC</a> module provides a JDBC-abstraction layer that removes the
need to do tedious JDBC coding and parsing of database-vendor specific error codes.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-introduction" title="14.1 Introduction to ORM with Spring"><span class="emphasis"><em>ORM</em></span></a> module provides integration layers for popular
object-relational mapping APIs, including <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa" title="14.5 JPA">JPA</a>, <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo" title="14.4 JDO">JDO</a>, and
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate" title="14.3 Hibernate">Hibernate</a>. Using the ORM package you can use all of these O/R-mapping
frameworks in combination with all of the other features Spring offers, such as the simple
declarative transaction management feature mentioned previously.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#oxm" title="15. Marshalling XML using O/X Mappers">OXM</a> module provides an abstraction layer that supports Object/XML mapping
implementations for JAXB, Castor, XMLBeans, JiBX and XStream.</p>
<p>The Java Messaging Service (<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jms" title="23. JMS (Java Message Service)">JMS</a>) module contains features for producing and
consuming messages.</p>
<p>The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction" title="11. Transaction Management">Transaction</a> module supports programmatic and declarative transaction
management for classes that implement special interfaces and for <span class="emphasis"><em>all your POJOs (plain
old Java objects)</em></span>.</p>
</div>
<div class="section" title="2.2.3 Web"><div class="titlepage"><div><div><h3 class="title"><a name="overview-web"></a>2.2.3&nbsp;Web</h3></div></div></div>

<p>The <span class="emphasis"><em>Web</em></span> layer consists of the Web, Web-Servlet, WebSocket and Web-Portlet modules.</p>
<p>Spring’s <span class="emphasis"><em>Web</em></span> module provides basic web-oriented integration features such as
multipart file-upload functionality and the initialization of the IoC container using
servlet listeners and a web-oriented application context. It also contains the
web-related parts of Spring’s remoting support.</p>
<p>The <span class="emphasis"><em>Web-Servlet</em></span> module contains Spring’s model-view-controller
(<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduction" title="16.1 Introduction to Spring Web MVC framework"><span class="emphasis"><em>MVC</em></span></a>) implementation for web applications. Spring’s MVC
framework provides a clean separation between domain model code and web forms, and
integrates with all the other features of the Spring Framework.</p>
<p>The <span class="emphasis"><em>Web-Portlet</em></span> module provides the MVC implementation to be used in a portlet
environment and mirrors the functionality of Web-Servlet module.</p>
</div>
<div class="section" title="2.2.4 AOP and Instrumentation"><div class="titlepage"><div><div><h3 class="title"><a name="overview-aop-instrumentation"></a>2.2.4&nbsp;AOP and Instrumentation</h3></div></div></div>

<p>Spring’s <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction" title="8.1 Introduction"><span class="emphasis"><em>AOP</em></span></a> module provides an <span class="emphasis"><em>AOP Alliance</em></span>-compliant
aspect-oriented programming implementation allowing you to define, for example,
method-interceptors and pointcuts to cleanly decouple code that implements functionality
that should be separated. Using source-level metadata functionality, you can also
incorporate behavioral information into your code, in a manner similar to that of .NET
attributes.</p>
<p>The separate <span class="emphasis"><em>Aspects</em></span> module provides integration with AspectJ.</p>
<p>The <span class="emphasis"><em>Instrumentation</em></span> module provides class instrumentation support and classloader
implementations to be used in certain application servers.</p>
</div>
<div class="section" title="2.2.5 Test"><div class="titlepage"><div><div><h3 class="title"><a name="overview-testing"></a>2.2.5&nbsp;Test</h3></div></div></div>

<p>The <span class="emphasis"><em>Test</em></span> module supports the testing of Spring components with JUnit or TestNG. It
provides consistent loading of Spring ApplicationContexts and caching of those contexts.
It also provides mock objects that you can use to test your code in isolation.</p>
</div>
</div>
<div class="section" title="2.3 Usage scenarios"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="overview-usagescenarios"></a>2.3&nbsp;Usage scenarios</h2></div></div></div>

<p>The building blocks described previously make Spring a logical choice in many scenarios,
from applets to full-fledged enterprise applications that use Spring’s transaction
management functionality and web framework integration.</p>
<div class="figure"><a name="d4e264"></a><p class="title"><b>Figure&nbsp;2.2.&nbsp;Typical full-fledged Spring web application</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/overview-full.png" alt="overview full"></div>
</div></div><br class="figure-break">

<p>Spring’s <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative" title="11.5 Declarative transaction management">declarative transaction management features</a> make
the web application fully transactional, just as it would be if you used EJB
container-managed transactions. All your custom business logic can be implemented with
simple POJOs and managed by Spring’s IoC container. Additional services include support
for sending email and validation that is independent of the web layer, which lets you
choose where to execute validation rules. Spring’s ORM support is integrated with JPA,
Hibernate and and JDO; for example, when using Hibernate, you can continue to use
your existing mapping files and standard Hibernate <code class="literal">SessionFactory</code> configuration. Form
controllers seamlessly integrate the web-layer with the domain model, removing the need
for <code class="literal">ActionForms</code> or other classes that transform HTTP parameters to values for your
domain model.</p>
<div class="figure"><a name="d4e275"></a><p class="title"><b>Figure&nbsp;2.3.&nbsp;Spring middle-tier using a third-party web framework</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/overview-thirdparty-web.png" alt="overview thirdparty web"></div>
</div></div><br class="figure-break">

<p>Sometimes circumstances do not allow you to completely switch to a different framework.
The Spring Framework does <span class="emphasis"><em>not</em></span> force you to use everything within it; it is not an
<span class="emphasis"><em>all-or-nothing</em></span> solution. Existing front-ends built with Struts, Tapestry, JSF
or other UI frameworks can be integrated with a Spring-based middle-tier, which allows
you to use Spring transaction features. You simply need to wire up your business logic
using an <code class="literal">ApplicationContext</code> and use a <code class="literal">WebApplicationContext</code> to integrate your web
layer.</p>
<div class="figure"><a name="d4e287"></a><p class="title"><b>Figure&nbsp;2.4.&nbsp;Remoting usage scenario</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/overview-remoting.png" alt="overview remoting"></div>
</div></div><br class="figure-break">

<p>When you need to access existing code through web services, you can use Spring’s
<code class="literal">Hessian-</code>, <code class="literal">Burlap-</code>, <code class="literal">Rmi-</code> or <code class="literal">JaxRpcProxyFactory</code> classes. Enabling remote access to
existing applications is not difficult.</p>
<div class="figure"><a name="d4e299"></a><p class="title"><b>Figure&nbsp;2.5.&nbsp;EJBs - Wrapping existing POJOs</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/overview-ejb.png" alt="overview ejb"></div>
</div></div><br class="figure-break">

<p>The Spring Framework also provides an <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ejb" title="22. Enterprise JavaBeans (EJB) integration">access and abstraction layer</a> for
Enterprise JavaBeans, enabling you to reuse your existing POJOs and wrap them in
stateless session beans for use in scalable, fail-safe web applications that might need
declarative security.</p>
<div class="section" title="2.3.1 Dependency Management and Naming Conventions"><div class="titlepage"><div><div><h3 class="title"><a name="dependency-management"></a>2.3.1&nbsp;Dependency Management and Naming Conventions</h3></div></div></div>

<p>Dependency management and dependency injection are different things. To get those nice
features of Spring into your application (like dependency injection) you need to
assemble all the libraries needed (jar files) and get them onto your classpath at
runtime, and possibly at compile time. These dependencies are not virtual components
that are injected, but physical resources in a file system (typically). The process of
dependency management involves locating those resources, storing them and adding them to
classpaths. Dependencies can be direct (e.g. my application depends on Spring at
runtime), or indirect (e.g. my application depends on <code class="literal">commons-dbcp</code> which depends on
<code class="literal">commons-pool</code>). The indirect dependencies are also known as "transitive" and it is
those dependencies that are hardest to identify and manage.</p>
<p>If you are going to use Spring you need to get a copy of the jar libraries that comprise
the pieces of Spring that you need. To make this easier Spring is packaged as a set of
modules that separate the dependencies as much as possible, so for example if you don’t
want to write a web application you don’t need the spring-web modules. To refer to
Spring library modules in this guide we use a shorthand naming convention <code class="literal">spring-*</code> or
<code class="literal">spring-*.jar,</code> where <code class="literal">*</code> represents the short name for the module (e.g. <code class="literal">spring-core</code>,
<code class="literal">spring-webmvc</code>, <code class="literal">spring-jms</code>, etc.). The actual jar file name that you use is normally
the module name concatenated with the version number
(e.g. <span class="emphasis"><em>spring-core-4.0.0.RELEASE.jar</em></span>).</p>
<p>Each release of the Spring Framework will publish artifacts to the following places:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Maven Central, which is the default repository that Maven queries, and does not
require any special configuration to use. Many of the common libraries that Spring
depends on also are available from Maven Central and a large section of the Spring
community uses Maven for dependency management, so this is convenient for them. The
names of the jars here are in the form <code class="literal">spring-*-&lt;version&gt;.jar</code> and the Maven groupId
is <code class="literal">org.springframework</code>.
</li><li class="listitem">
In a public Maven repository hosted specifically for Spring. In addition to the final
GA releases, this repository also hosts development snapshots and milestones. The jar
file names are in the same form as Maven Central, so this is a useful place to get
development versions of Spring to use with other libraries deployed in Maven Central.
This repository also contains a bundle distribution zip file that contains all Spring
jars  bundled together for easy download.
</li></ul></div>

<p>So the first thing you need to decide is how to manage your dependencies: we generally
recommend the use of an automated system like Maven, Gradle or Ivy, but you can also do
it manually by downloading all the jars yourself. We provide detailed instructions later
in this chapter.</p>
<div class="section" title="Spring Dependencies and Depending on Spring"><div class="titlepage"><div><div><h4 class="title"><a name="overview-spring-dependencies"></a>Spring Dependencies and Depending on Spring</h4></div></div></div>

<p>Although Spring provides integration and support for a huge range of enterprise and
other external tools, it intentionally keeps its mandatory dependencies to an absolute
minimum: you shouldn’t have to locate and download (even automatically) a large number
of jar libraries in order to use Spring for simple use cases. For basic dependency
injection there is only one mandatory external dependency, and that is for logging (see
below for a more detailed description of logging options).</p>
<p>Next we outline the basic steps needed to configure an application that depends on
Spring, first with Maven and then with Gradle and finally using Ivy. In all cases, if
anything is unclear, refer to the documentation of your dependency management system, or
look at some sample code - Spring itself uses Gradle to manage dependencies when it is
building, and our samples mostly use Gradle or Maven.</p>
</div>
<div class="section" title="Maven Dependency Management"><div class="titlepage"><div><div><h4 class="title"><a name="overview-maven-dependency-management"></a>Maven Dependency Management</h4></div></div></div>

<p>If you are using <a class="ulink" href="http://maven.apache.org/" target="_top">Maven</a> for dependency management you don’t even
need to supply the logging dependency explicitly. For example, to create an application
context and use dependency injection to configure an application, your Maven dependencies
will look like this:</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencies&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-context<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>4.0.0.RELEASE<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
<span class="hl-tag">&lt;/dependencies&gt;</span></pre>

<p>That’s it. Note the scope can be declared as runtime if you don’t need to compile
against Spring APIs, which is typically the case for basic dependency injection use
cases.</p>
<p>The example above works with the Maven Central repository. To use the Spring Maven
repository (e.g. for milestones or developer snapshots), you need to specify the
repository location in your Maven configuration. For full releases:</p>
<pre class="programlisting"><span class="hl-tag">&lt;repositories&gt;</span>
    <span class="hl-tag">&lt;repository&gt;</span>
        <span class="hl-tag">&lt;id&gt;</span>io.spring.repo.maven.release<span class="hl-tag">&lt;/id&gt;</span>
        <span class="hl-tag">&lt;url&gt;</span>http://repo.spring.io/release/<span class="hl-tag">&lt;/url&gt;</span>
        <span class="hl-tag">&lt;snapshots&gt;</span><span class="hl-tag">&lt;enabled&gt;</span>false<span class="hl-tag">&lt;/enabled&gt;</span><span class="hl-tag">&lt;/snapshots&gt;</span>
    <span class="hl-tag">&lt;/repository&gt;</span>
<span class="hl-tag">&lt;/repositories&gt;</span></pre>

<p>For milestones:</p>
<pre class="programlisting"><span class="hl-tag">&lt;repositories&gt;</span>
    <span class="hl-tag">&lt;repository&gt;</span>
        <span class="hl-tag">&lt;id&gt;</span>io.spring.repo.maven.milestone<span class="hl-tag">&lt;/id&gt;</span>
        <span class="hl-tag">&lt;url&gt;</span>http://repo.spring.io/milestone/<span class="hl-tag">&lt;/url&gt;</span>
        <span class="hl-tag">&lt;snapshots&gt;</span><span class="hl-tag">&lt;enabled&gt;</span>false<span class="hl-tag">&lt;/enabled&gt;</span><span class="hl-tag">&lt;/snapshots&gt;</span>
    <span class="hl-tag">&lt;/repository&gt;</span>
<span class="hl-tag">&lt;/repositories&gt;</span></pre>

<p>And for snapshots:</p>
<pre class="programlisting"><span class="hl-tag">&lt;repositories&gt;</span>
    <span class="hl-tag">&lt;repository&gt;</span>
        <span class="hl-tag">&lt;id&gt;</span>io.spring.repo.maven.snapshot<span class="hl-tag">&lt;/id&gt;</span>
        <span class="hl-tag">&lt;url&gt;</span>http://repo.spring.io/snapshot/<span class="hl-tag">&lt;/url&gt;</span>
        <span class="hl-tag">&lt;snapshots&gt;</span><span class="hl-tag">&lt;enabled&gt;</span>true<span class="hl-tag">&lt;/enabled&gt;</span><span class="hl-tag">&lt;/snapshots&gt;</span>
    <span class="hl-tag">&lt;/repository&gt;</span>
<span class="hl-tag">&lt;/repositories&gt;</span></pre>

</div>
<div class="section" title="Maven &quot;Bill Of Materials&quot; Dependency"><div class="titlepage"><div><div><h4 class="title"><a name="overview-maven-bom"></a>Maven "Bill Of Materials" Dependency</h4></div></div></div>

<p>It is possible to accidentally mix different versions of Spring JARs when using Maven.
For example, you may find that a third-party library, or another Spring project,
pulls in a transitive dependency to an older release. If you forget to explicitly declare
a direct dependency yourself, all sorts of unexpected issues can arise.</p>
<p>To overcome such problems Maven supports the concept of a "bill of materials" (BOM)
dependency. You can import the <code class="literal">spring-framework-bom</code> in your <code class="literal">dependencyManagement</code>
section to ensure that all spring dependencies (both direct and transitive) are at
the same version.</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencyManagement&gt;</span>
    <span class="hl-tag">&lt;dependencies&gt;</span>
        <span class="hl-tag">&lt;dependency&gt;</span>
            <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
            <span class="hl-tag">&lt;artifactId&gt;</span>spring-framework-bom<span class="hl-tag">&lt;/artifactId&gt;</span>
            <span class="hl-tag">&lt;version&gt;</span>4.0.0.RELEASE<span class="hl-tag">&lt;/version&gt;</span>
            <span class="hl-tag">&lt;type&gt;</span>pom<span class="hl-tag">&lt;/type&gt;</span>
            <span class="hl-tag">&lt;scope&gt;</span>import<span class="hl-tag">&lt;/scope&gt;</span>
        <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;/dependencies&gt;</span>
<span class="hl-tag">&lt;/dependencyManagement&gt;</span></pre>

<p>An added benefit of using the BOM is that you no longer need to specify the <code class="literal">&lt;version&gt;</code>
attribute when depending on Spring Framework artifacts:</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencies&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-context<span class="hl-tag">&lt;/artifactId&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-web<span class="hl-tag">&lt;/artifactId&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
<span class="hl-tag">&lt;dependencies&gt;</span></pre>

</div>
<div class="section" title="Gradle Dependency Management"><div class="titlepage"><div><div><h4 class="title"><a name="overview-gradle-dependency-management"></a>Gradle Dependency Management</h4></div></div></div>

<p>To use the Spring repository with the <a class="ulink" href="http://www.gradle.org/" target="_top">Gradle</a> build system,
include the appropriate URL in the <code class="literal">repositories</code> section:</p>
<pre class="programlisting">repositories {
    mavenCentral()
    // and optionally...
    maven { url "http://repo.spring.io/release" }
}</pre>

<p>You can change the <code class="literal">repositories</code> URL from <code class="literal">/release</code> to <code class="literal">/milestone</code> or <code class="literal">/snapshot</code> as
appropriate. Once a repository has been configured, you can declare dependencies in the
usual Gradle way:</p>
<pre class="programlisting">dependencies {
    compile("org.springframework:spring-context:4.0.0.RELEASE")
    testCompile("org.springframework:spring-test:4.0.0.RELEASE")
}</pre>

</div>
<div class="section" title="Ivy Dependency Management"><div class="titlepage"><div><div><h4 class="title"><a name="overview-ivy-dependency-management"></a>Ivy Dependency Management</h4></div></div></div>

<p>If you prefer to use <a class="ulink" href="http://ant.apache.org/ivy" target="_top">Ivy</a> to manage dependencies then there
are similar configuration options.</p>
<p>To configure Ivy to point to the Spring repository add the following resolver to your
<code class="literal">ivysettings.xml</code>:</p>
<pre class="programlisting"><span class="hl-tag">&lt;resolvers&gt;</span>
    <span class="hl-tag">&lt;ibiblio</span> <span class="hl-attribute">name</span>=<span class="hl-value">"io.spring.repo.maven.release"</span>
            <span class="hl-attribute">m2compatible</span>=<span class="hl-value">"true"</span>
            <span class="hl-attribute">root</span>=<span class="hl-value">"http://repo.spring.io/release/"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/resolvers&gt;</span></pre>

<p>You can change the <code class="literal">root</code> URL from <code class="literal">/release/</code> to <code class="literal">/milestone/</code> or <code class="literal">/snapshot/</code> as
appropriate.</p>
<p>Once configured, you can add dependencies in the usual way. For example (in <code class="literal">ivy.xml</code>):</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependency</span> <span class="hl-attribute">org</span>=<span class="hl-value">"org.springframework"</span>
    <span class="hl-attribute">name</span>=<span class="hl-value">"spring-core"</span> <span class="hl-attribute">rev</span>=<span class="hl-value">"4.0.0.RELEASE"</span> <span class="hl-attribute">conf</span>=<span class="hl-value">"compile-&gt;runtime"</span><span class="hl-tag">/&gt;</span></pre>

</div>
<div class="section" title="Distribution Zip Files"><div class="titlepage"><div><div><h4 class="title"><a name="overview-distribution-zip"></a>Distribution Zip Files</h4></div></div></div>

<p>Although using a build system that supports dependency management is the recommended
way to obtain the Spring Framework, it is still possible to download a distribution
zip file.</p>
<p>Distribution zips are published to the Spring Maven Repository (this is just for our
convenience, you don’t need Maven or any other build system in order to download them).</p>
<p>To download a distribution zip open a web browser to
<a class="ulink" href="http://repo.spring.io/release/org/springframework/spring" target="_top">http://repo.spring.io/release/org/springframework/spring</a> and select the appropriate
subfolder for the version that you want. Distribution files end <code class="literal">-dist.zip</code>, for example
<code class="literal">spring-framework-4.0.0.RELEASE-RELEASE-dist.zip</code>. Distributions are also published
for <a class="ulink" href="http://repo.spring.io/milestone/org/springframework/spring" target="_top">milestones</a> and
<a class="ulink" href="http://repo.spring.io/snapshot/org/springframework/spring" target="_top">snapshots</a>.</p>
</div>
</div>
<div class="section" title="2.3.2 Logging"><div class="titlepage"><div><div><h3 class="title"><a name="overview-logging"></a>2.3.2&nbsp;Logging</h3></div></div></div>

<p>Logging is a very important dependency for Spring because <span class="emphasis"><em>a)</em></span> it is the only mandatory
external dependency, <span class="emphasis"><em>b)</em></span> everyone likes to see some output from the tools they are
using, and <span class="emphasis"><em>c)</em></span> Spring integrates with lots of other tools all of which have also made
a choice of logging dependency. One of the goals of an application developer is often to
have unified logging configured in a central place for the whole application, including
all external components. This is more difficult than it might have been since there are so
many choices of logging framework.</p>
<p>The mandatory logging dependency in Spring is the Jakarta Commons Logging API (JCL). We
compile against JCL and we also make JCL <code class="literal">Log</code> objects visible for classes that extend
the Spring Framework. It’s important to users that all versions of Spring use the same
logging library: migration is easy because backwards compatibility is preserved even
with applications that extend Spring. The way we do this is to make one of the modules
in Spring depend explicitly on <code class="literal">commons-logging</code> (the canonical implementation of JCL),
and then make all the other modules depend on that at compile time. If you are using
Maven for example, and wondering where you picked up the dependency on
<code class="literal">commons-logging</code>, then it is from Spring and specifically from the central module
called <code class="literal">spring-core</code>.</p>
<p>The nice thing about <code class="literal">commons-logging</code> is that you don’t need anything else to make your
application work. It has a runtime discovery algorithm that looks for other logging
frameworks in well known places on the classpath and uses one that it thinks is
appropriate (or you can tell it which one if you need to). If nothing else is available
you get pretty nice looking logs just from the JDK (java.util.logging or JUL for short).
You should find that your Spring application works and logs happily to the console out
of the box in most situations, and that’s important.</p>
<div class="section" title="Not Using Commons Logging"><div class="titlepage"><div><div><h4 class="title"><a name="overview-not-using-commons-logging"></a>Not Using Commons Logging</h4></div></div></div>

<p>Unfortunately, the runtime discovery algorithm in <code class="literal">commons-logging</code>, while convenient
for the end-user, is problematic. If we could turn back the clock and start Spring now
as a new project it would use a different logging dependency. The first choice would
probably be the Simple Logging Facade for Java ( <a class="ulink" href="http://www.slf4j.org/" target="_top">SLF4J</a>), which is
also used by a lot of other tools that people use with Spring inside their applications.</p>
<p>Switching off <code class="literal">commons-logging</code> is easy: just make sure it isn’t on the classpath at
runtime. In Maven terms you exclude the dependency, and because of the way that the
Spring dependencies are declared, you only have to do that once.</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencies&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-context<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>4.0.0.RELEASE<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
        <span class="hl-tag">&lt;exclusions&gt;</span>
            <span class="hl-tag">&lt;exclusion&gt;</span>
                <span class="hl-tag">&lt;groupId&gt;</span>commons-logging<span class="hl-tag">&lt;/groupId&gt;</span>
                <span class="hl-tag">&lt;artifactId&gt;</span>commons-logging<span class="hl-tag">&lt;/artifactId&gt;</span>
            <span class="hl-tag">&lt;/exclusion&gt;</span>
        <span class="hl-tag">&lt;/exclusions&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
<span class="hl-tag">&lt;/dependencies&gt;</span></pre>

<p>Now this application is probably broken because there is no implementation of the JCL
API on the classpath, so to fix it a new one has to be provided. In the next section we
show you how to provide an alternative implementation of JCL using SLF4J as an example.</p>
</div>
<div class="section" title="Using SLF4J"><div class="titlepage"><div><div><h4 class="title"><a name="overview-logging-slf4j"></a>Using SLF4J</h4></div></div></div>

<p>SLF4J is a cleaner dependency and more efficient at runtime than <code class="literal">commons-logging</code>
because it uses compile-time bindings instead of runtime discovery of the other logging
frameworks it integrates. This also means that you have to be more explicit about what
you want to happen at runtime, and declare it or configure it accordingly. SLF4J
provides bindings to many common logging frameworks, so you can usually choose one that
you already use, and bind to that for configuration and management.</p>
<p>SLF4J provides bindings to many common logging frameworks, including JCL, and it also
does the reverse: bridges between other logging frameworks and itself. So to use SLF4J
with Spring you need to replace the <code class="literal">commons-logging</code> dependency with the SLF4J-JCL
bridge. Once you have done that then logging calls from within Spring will be translated
into logging calls to the SLF4J API, so if other libraries in your application use that
API, then you have a single place to configure and manage logging.</p>
<p>A common choice might be to bridge Spring to SLF4J, and then provide explicit binding
from SLF4J to Log4J. You need to supply 4 dependencies (and exclude the existing
<code class="literal">commons-logging</code>): the bridge, the SLF4J API, the binding to Log4J, and the Log4J
implementation itself. In Maven you would do that like this</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencies&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-context<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>4.0.0.RELEASE<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
        <span class="hl-tag">&lt;exclusions&gt;</span>
            <span class="hl-tag">&lt;exclusion&gt;</span>
                <span class="hl-tag">&lt;groupId&gt;</span>commons-logging<span class="hl-tag">&lt;/groupId&gt;</span>
                <span class="hl-tag">&lt;artifactId&gt;</span>commons-logging<span class="hl-tag">&lt;/artifactId&gt;</span>
            <span class="hl-tag">&lt;/exclusion&gt;</span>
        <span class="hl-tag">&lt;/exclusions&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.slf4j<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>jcl-over-slf4j<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>1.5.8<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.slf4j<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>slf4j-api<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>1.5.8<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.slf4j<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>slf4j-log4j12<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>1.5.8<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>log4j<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>log4j<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>1.2.14<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
<span class="hl-tag">&lt;/dependencies&gt;</span></pre>

<p>That might seem like a lot of dependencies just to get some logging. Well it is, but it
<span class="emphasis"><em>is</em></span> optional, and it should behave better than the vanilla <code class="literal">commons-logging</code> with
respect to classloader issues, notably if you are in a strict container like an OSGi
platform. Allegedly there is also a performance benefit because the bindings are at
compile-time not runtime.</p>
<p>A more common choice amongst SLF4J users, which uses fewer steps and generates fewer
dependencies, is to bind directly to <a class="ulink" href="http://logback.qos.ch/" target="_top">Logback</a>. This removes the
extra binding step because Logback implements SLF4J directly, so you only need to depend
on two libraries not four ( <code class="literal">jcl-over-slf4j</code> and <code class="literal">logback</code>). If you do that you might
also need to exclude the slf4j-api dependency from other external dependencies (not
Spring), because you only want one version of that API on the classpath.</p>
</div>
<div class="section" title="Using Log4J"><div class="titlepage"><div><div><h4 class="title"><a name="overview-logging-log4j"></a>Using Log4J</h4></div></div></div>

<p>Many people use <a class="ulink" href="http://logging.apache.org/log4j" target="_top">Log4j</a> as a logging framework for
configuration and management purposes. It’s efficient and well-established, and in fact
it’s what we use at runtime when we build and test Spring. Spring also provides some
utilities for configuring and initializing Log4j, so it has an optional compile-time
dependency on Log4j in some modules.</p>
<p>To make Log4j work with the default JCL dependency ( <code class="literal">commons-logging</code>) all you need to
do is put Log4j on the classpath, and provide it with a configuration file (
<code class="literal">log4j.properties</code> or <code class="literal">log4j.xml</code> in the root of the classpath). So for Maven users this
is your dependency declaration:</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependencies&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>org.springframework<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>spring-context<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>4.0.0.RELEASE<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
    <span class="hl-tag">&lt;dependency&gt;</span>
        <span class="hl-tag">&lt;groupId&gt;</span>log4j<span class="hl-tag">&lt;/groupId&gt;</span>
        <span class="hl-tag">&lt;artifactId&gt;</span>log4j<span class="hl-tag">&lt;/artifactId&gt;</span>
        <span class="hl-tag">&lt;version&gt;</span>1.2.14<span class="hl-tag">&lt;/version&gt;</span>
        <span class="hl-tag">&lt;scope&gt;</span>runtime<span class="hl-tag">&lt;/scope&gt;</span>
    <span class="hl-tag">&lt;/dependency&gt;</span>
<span class="hl-tag">&lt;/dependencies&gt;</span></pre>

<p>And here’s a sample log4j.properties for logging to the console:</p>

<pre class="literallayout">log4j.rootCategory=INFO, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %t %c{2}:%L - %m%n

log4j.category.org.springframework.beans.factory=DEBUG</pre>

<div class="section" title="Runtime Containers with Native JCL"><div class="titlepage"><div><div><h5 class="title"><a name="overview-native-jcl"></a>Runtime Containers with Native JCL</h5></div></div></div>

<p>Many people run their Spring applications in a container that itself provides an
implementation of JCL. IBM Websphere Application Server (WAS) is the archetype. This
often causes problems, and unfortunately there is no silver bullet solution; simply
excluding <code class="literal">commons-logging</code> from your application is not enough in most situations.</p>
<p>To be clear about this: the problems reported are usually not with JCL per se, or even
with <code class="literal">commons-logging</code>: rather they are to do with binding <code class="literal">commons-logging</code> to another
framework (often Log4J). This can fail because <code class="literal">commons-logging</code> changed the way they do
the runtime discovery in between the older versions (1.0) found in some containers and
the modern versions that most people use now (1.1). Spring does not use any unusual
parts of the JCL API, so nothing breaks there, but as soon as Spring or your application
tries to do any logging you can find that the bindings to Log4J are not working.</p>
<p>In such cases with WAS the easiest thing to do is to invert the class loader hierarchy
(IBM calls it "parent last") so that the application controls the JCL dependency, not
the container. That option isn’t always open, but there are plenty of other suggestions
in the public domain for alternative approaches, and your mileage may vary depending on
the exact version and feature set of the container.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="part" title="Part II. What’s New in Spring Framework 4.x"><div class="titlepage"><div><div><h1 class="title"><a name="spring-whats-new"></a>Part&nbsp;II.&nbsp;What’s New in Spring Framework 4.x</h1></div></div></div>

<div class="chapter" title="3. New Features and Enhancements in Spring Framework 4.0"><div class="titlepage"><div><div><h2 class="title"><a name="new-in-4.0"></a>3.&nbsp;New Features and Enhancements in Spring Framework 4.0</h2></div></div></div>

<p>The Spring Framework was first released in 2004; since then there have been significant
major revisions: Spring 2.0 provided XML namespaces and AspectJ support; Spring 2.5
embraced annotation-driven configuration; Spring 3.0 introduced a strong Java 5+ foundation
across the framework codebase, and features such as the Java-based <code class="literal">@Configuration</code> model.</p>
<p>Version 4.0 is the latest major release of the Spring Framework and the first to fully
support Java 8 features. You can still use Spring with older versions of Java, however,
the minimum requirement has now been raised to Java SE 6. We have also taken the
opportunity of a major release to remove many deprecated classes and methods.</p>
<p>A <a class="ulink" href="https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-spring-framework" target="_top">migration guide for upgrading to Spring 4.0</a>
is available on the <a class="ulink" href="https://github.com/spring-projects/spring-framework/wiki" target="_top">Spring Framework GitHub Wiki</a>.</p>
<div class="section" title="3.1 Improved Getting Started Experience"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_improved_getting_started_experience"></a>3.1&nbsp;Improved Getting Started Experience</h2></div></div></div>

<p>The new <a class="ulink" href="http://spring.io/" target="_top">spring.io</a> website provides a whole series of
<a class="ulink" href="http://spring.io/guides" target="_top">"Getting Started"</a> guides to help you learn Spring. You
can read more about the guides in the <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-getting-started-with-spring" title="1. Getting Started With Spring">Chapter&nbsp;1, <i>Getting Started With Spring</i></a> section
in this document. The new website also provides a comprehensive overview of the many
additional projects that are released under the Spring umbrella.</p>
<p>If you are a Maven user you may also be interested in the helpful
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-maven-bom" title="Maven &quot;Bill Of Materials&quot; Dependency">bill of materials</a> POM file that is now published with each Spring
Framework release.</p>
</div>
<div class="section" title="3.2 Removed Deprecated Packages and Methods"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_removed_deprecated_packages_and_methods"></a>3.2&nbsp;Removed Deprecated Packages and Methods</h2></div></div></div>

<p>All deprecated packages, and many deprecated classes and methods have been removed with
version 4.0. If you are upgrading from a previous release of Spring, you should ensure
that you have fixed any deprecated calls that you were making to outdated APIs.</p>
<p>For a complete set of changes, check out the
<a class="ulink" href="http://docs.spring.io/spring-framework/docs/3.2.4.RELEASE_to_4.0.0.RELEASE/" target="_top">API
Differences Report</a>.</p>
<p>Note that optional third-party dependencies have been raised to a 2010/2011 minimum
(i.e. Spring 4 generally only supports versions released in late 2010 or later now):
notably, Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-Time 2.0+.
As an exception to the rule, Spring 4 requires the recent Hibernate Validator 4.3+,
and support for Jackson has been focused on 2.0+ now (with Jackson 1.8/1.9 support
retained for the time being where Spring 3.2 had it; now just in deprecated form).</p>
</div>
<div class="section" title="3.3 Java 8 (as well as 6 and 7)"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_java_8_as_well_as_6_and_7"></a>3.3&nbsp;Java 8 (as well as 6 and 7)</h2></div></div></div>

<p>Spring Framework 4.0 provides support for several Java 8 features. You can make use of
<span class="emphasis"><em>lambda expressions</em></span> and <span class="emphasis"><em>method references</em></span> with Spring’s callback interfaces. There
is first class support for <code class="literal">java.time</code> (<a class="ulink" href="http://jcp.org/en/jsr/detail?id=310" target="_top">JSR-310</a>) and
several existing annotations have been retrofitted as <code class="literal">@Repeatable</code>. You can also use
Java 8’s parameter name discovery as an alternative to compiling your code with debug
information enabled.</p>
<p>Spring remains compatible with older versions of Java and the JDK: Concretely, Java SE 6
(specifically, a minimum level equivalent to JDK 6 update 10, as released in late 2008)
and above are still fully supported. However, for newly started development projects
based on Spring 4, we recommend the use of Java 7 or 8.</p>
<p>Note that the Java 8 bytecode level (-target 1.8, as required by -source 1.8) is only
fully supported as of Spring Framework 4.0. In particular, Spring 3.2 based applications
need to be compiled with a maximum of Java 7 as the target, even if they happen to be
deployed onto a Java 8 runtime. Please upgrade to Spring 4 for Java 8 based applications.</p>
</div>
<div class="section" title="3.4 Java EE 6 and 7"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_java_ee_6_and_7"></a>3.4&nbsp;Java EE 6 and 7</h2></div></div></div>

<p>Java EE version 6 or above is now considered the baseline for Spring Framework 4, with
the JPA 2.0 and Servlet 3.0 specifications being of particular relevance. In order to
remain compatible with Google App Engine and older application servers, it is possible
to deploy a Spring application into a Servlet 2.5 environment; however, Servlet 3.0+
is recommended when at all possible.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>If you are a WebSphere 7 user, be sure install the JPA 2.0 feature pack. On
WebLogic 10.3.4 or higher, install the JPA 2.0 patch that comes with it. This turns
both of those server generations into Spring 4 compatible deployment environments.</p>
</td></tr></tbody></table></div>

<p>On a more forward-looking note, Spring Framework 4.0 supports the Java EE 7 level of
applicable specifications now: in particular, JMS 2.0, JTA 1.2, JPA 2.1, Bean Validation
1.1, and JSR-236 Concurrency Utilities. As usual, this support focuses on individual
use of those specifications, e.g. on Tomcat or in standalone environments. However,
it works equally well when a Spring application is being deployed to a Java EE 7 server.</p>
<p>Note that Hibernate 4.3 is a JPA 2.1 provider and therefore only supported as of
Spring Framework 4.0. The same applies to Hibernate Validator 5.0 as a Bean Validation
1.1 provider. Neither of the two are officially supported with Spring Framework 3.2.</p>
</div>
<div class="section" title="3.5 Groovy Bean Definition DSL"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_groovy_bean_definition_dsl"></a>3.5&nbsp;Groovy Bean Definition DSL</h2></div></div></div>

<p>With Spring Framework 4.0 it is now possible to define external bean configuration using
a Groovy DSL. This is similar in concept to using XML bean definitions, but allows for
a more concise syntax. Using Groovy also allows you to easily embed bean definitions
directly in your bootstrap code. For example:</p>
<pre class="programlisting">def reader = new GroovyBeanDefinitionReader(myApplicationContext)
reader.beans {
    dataSource(BasicDataSource) {
        driverClassName = "org.hsqldb.jdbcDriver"
        url = "jdbc:hsqldb:mem:grailsDB"
        username = "sa"
        password = ""
        settings = [mynew:"setting"]
    }
    sessionFactory(SessionFactory) {
        dataSource = dataSource
    }
    myService(MyService) {
        nestedBean = { AnotherBean bean -&gt;
            dataSource = dataSource
        }
    }
}</pre>

<p>For more information consult the <code class="literal">GroovyBeanDefinitionReader</code>
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.html" target="_top">Javadoc</a>.</p>
</div>
<div class="section" title="3.6 Core Container Improvements"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_core_container_improvements"></a>3.6&nbsp;Core Container Improvements</h2></div></div></div>

<p>There have been several general improvements to the core container:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Spring now treats <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-generics-as-qualifiers" title="4.9.4 Using generics as autowiring qualifiers"><span class="emphasis"><em>generic types</em></span> as a form of
<span class="emphasis"><em>qualifier</em></span></a> when injecting Beans. For example, if you are using a Spring Data
<code class="literal">Repository</code> you can now easily inject a specific implementation:
<code class="literal">@Autowired Repository&lt;Customer&gt; customerRepository</code>.
</li><li class="listitem">
If you use Spring’s meta-annotation support, you can now develop custom annotations that
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-annotations" title="4.10.2 Meta-annotations">expose specific attributes from the source annotation</a>.
</li><li class="listitem">
Beans can now be <code class="literal">Ordered</code> when they are <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation" title="4.9.2 @Autowired">autowired into
lists and arrays</a>. Both the <code class="literal">@Ordered</code> annotation and <code class="literal">Ordered</code> interface are
supported.
</li><li class="listitem">
The <code class="literal">@Lazy</code> annotation can now be used on injection points, as well as <code class="literal">@Bean</code>
definitions.
</li><li class="listitem">
The <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-bean-description" title="Bean description"><code class="literal">@Description</code> annotation has been added</a> for
developers using Java-based configuration.
</li><li class="listitem">
A generalized model for <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-conditional" title="Conditionally including @Configuration classes or @Beans">conditionally filtering beans</a> has
been added via the <code class="literal">@Conditional</code> annotation. This is similar to <code class="literal">@Profile</code> but allows
for user-defined strategies to be developed.
</li><li class="listitem">
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-proxy-types" title="9.5.3 JDK- and CGLIB-based proxies">CGLIB-based proxy classes</a> no longer require a default
constructor. Support is provided via the <a class="ulink" href="http://code.google.com/p/objenesis/" target="_top">objenesis</a>
library which is repackaged <span class="emphasis"><em>inline</em></span> and distributed as part of the Spring Framework.
With this strategy, no constructor at all is being invoked for proxy instances anymore.
</li><li class="listitem">
There is managed time zone support across the framework now, e.g. on <code class="literal">LocaleContext</code>.
</li></ul></div>

</div>
<div class="section" title="3.7 General Web Improvements"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_general_web_improvements"></a>3.7&nbsp;General Web Improvements</h2></div></div></div>

<p>Deployment to Servlet 2.5 servers remains an option, but Spring Framework 4.0 is now
focused primarily on Servlet 3.0+ environments. If you are using the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" title="10.3.6 Spring MVC Test Framework">Spring MVC Test Framework</a> you
will need to ensure that a Servlet 3.0 compatible JAR is in your <span class="emphasis"><em>test classpath</em></span>.</p>
<p>In addition to the WebSocket support mentioned earlier, the following general improvements
have been made to Spring’s Web modules:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
You can use <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontroller" title="Creating REST Controllers with the @RestController annotation">the new <code class="literal">@RestController</code> annotation</a> with Spring
MVC applications, removing the need to add <code class="literal">@ResponseBody</code> to each of your
<code class="literal">@RequestMapping</code> methods.
</li><li class="listitem">
The <code class="literal">AsyncRestTemplate</code> class has been added, <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#rest-async-resttemplate" title="21.10.3 Async RestTemplate">allowing
non-blocking asynchronous support</a> when developing REST clients.
</li><li class="listitem">
Spring now offers <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-timezone" title="16.9.1 Obtaining Time Zone Information">comprehensive timezone support</a> when developing
Spring MVC applications.
</li></ul></div>

</div>
<div class="section" title="3.8 WebSocket, SockJS, and STOMP Messaging"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_websocket_sockjs_and_stomp_messaging"></a>3.8&nbsp;WebSocket, SockJS, and STOMP Messaging</h2></div></div></div>

<p>A new <code class="literal">spring-websocket</code> module provides comprehensive support for WebSocket-based,
two-way communication between client and server in web applications. It is compatible with
<a class="ulink" href="http://jcp.org/en/jsr/detail?id=356" target="_top">JSR-356</a>, the Java WebSocket API, and in addition
provides SockJS-based fallback options (i.e. WebSocket emulation) for use in browsers
that don’t yet support the WebSocket protocol (e.g. IE &lt; 10).</p>
<p>A new <code class="literal">spring-messaging</code> module adds support for STOMP as the WebSocket sub-protocol
to use in applications along with an annotation programming model for routing and
processing STOMP messages from WebSocket clients. As a result an <code class="literal">@Controller</code>
can now contain both <code class="literal">@RequestMapping</code> and <code class="literal">@MessageMapping</code> methods for handling
HTTP requests and messages from WebSocket-connected clients. The new <code class="literal">spring-messaging</code>
module also contains key abstractions from the
<a class="ulink" href="http://projects.spring.io/spring-integration/" target="_top">Spring Integration</a> project such as
<code class="literal">Message</code>, <code class="literal">MessageChannel</code>, <code class="literal">MessageHandler</code> and others to serve as
a foundation for messaging applications.</p>
<p>For more details including a more thorough introduction, see the <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#websocket" title="20. WebSocket Support">Chapter&nbsp;20, <i>WebSocket Support</i></a> section.</p>
</div>
<div class="section" title="3.9 Testing Improvements"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="_testing_improvements"></a>3.9&nbsp;Testing Improvements</h2></div></div></div>

<p>In addition to pruning of deprecated code within the <code class="literal">spring-test</code> module, Spring
Framework 4.0 introduces several new features for use in unit and integration testing.</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Almost all annotations in the <code class="literal">spring-test</code> module (e.g., <code class="literal">@ContextConfiguration</code>,
<code class="literal">@WebAppConfiguration</code>, <code class="literal">@ContextHierarchy</code>, <code class="literal">@ActiveProfiles</code>, etc.) can now be used
as <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-meta" title="Meta-Annotation Support for Testing">meta-annotations</a> to create custom
<span class="emphasis"><em>composed annotations</em></span> and reduce configuration duplication across tests.
</li><li class="listitem">
Active bean definition profiles can now be resolved programmatically, simply by
implementing a custom <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-env-profiles-ActiveProfilesResolver"><code class="literal">ActiveProfilesResolver</code></a>
and registering it via the <code class="literal">resolver</code> attribute of <code class="literal">@ActiveProfiles</code>.
</li><li class="listitem">
A new <code class="literal">SocketUtils</code> utility class has been introduced in the <code class="literal">spring-core</code> module
which enables you to scan for free TCP &amp; UDP server ports on localhost. This
functionality is not specific to testing but can prove very useful when writing
integration tests that require the use of sockets, for example tests that start
an in-memory SMTP server, FTP server, Servlet container, etc.
</li><li class="listitem">
As of Spring 4.0, the set of mocks in the <code class="literal">org.springframework.mock.web</code> package is
now compatible with Servlet 3.0. Furthermore, several of the Servlet API mocks
(e.g., <code class="literal">MockHttpServletRequest</code>, <code class="literal">MockServletContext</code>, etc.) have been updated with
minor enhancements and improved configurability.
</li></ul></div>

</div>
</div>
</div>
<div class="part" title="Part III. Core Technologies"><div class="titlepage"><div><div><h1 class="title"><a name="spring-core"></a>Part&nbsp;III.&nbsp;Core Technologies</h1></div></div></div>

<div class="partintro" title="Core Technologies"><div></div>
<p>This part of the reference documentation covers all of those technologies that are
absolutely integral to the Spring Framework.</p>
<p>Foremost amongst these is the Spring Framework’s Inversion of Control (IoC) container. A
thorough treatment of the Spring Framework’s IoC container is closely followed by
comprehensive coverage of Spring’s Aspect-Oriented Programming (AOP) technologies. The
Spring Framework has its own AOP framework, which is conceptually easy to understand,
and which successfully addresses the 80% sweet spot of AOP requirements in Java
enterprise programming.</p>
<p>Coverage of Spring’s integration with AspectJ (currently the richest - in terms of
features - and certainly most mature AOP implementation in the Java enterprise space) is
also provided.</p>
<p>Finally, the adoption of the test-driven-development (TDD) approach to software
development is certainly advocated by the Spring team, and so coverage of Spring’s
support for integration testing is covered (alongside best practices for unit testing).
The Spring team has found that the correct use of IoC certainly does make both unit and
integration testing easier (in that the presence of setter methods and appropriate
constructors on classes makes them easier to wire together in a test without having to
set up service locator registries and suchlike)… the chapter dedicated solely to
testing will hopefully convince you of this as well.</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans" title="4. The IoC container">Chapter&nbsp;4, <i>The IoC container</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources" title="5. Resources">Chapter&nbsp;5, <i>Resources</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#validation" title="6. Validation, Data Binding, and Type Conversion">Chapter&nbsp;6, <i>Validation, Data Binding, and Type Conversion</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#expressions" title="7. Spring Expression Language (SpEL)">Chapter&nbsp;7, <i>Spring Expression Language (SpEL)</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop" title="8. Aspect Oriented Programming with Spring">Chapter&nbsp;8, <i>Aspect Oriented Programming with Spring</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-api" title="9. Spring AOP APIs">Chapter&nbsp;9, <i>Spring AOP APIs</i></a>
</li><li class="listitem">
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing" title="10. Testing">Chapter&nbsp;10, <i>Testing</i></a>
</li></ul></div>

</div>
<div class="chapter" title="4. The IoC container"><div class="titlepage"><div><div><h2 class="title"><a name="beans"></a>4.&nbsp;The IoC container</h2></div></div></div>

<div class="section" title="4.1 Introduction to the Spring IoC container and beans"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-introduction"></a>4.1&nbsp;Introduction to the Spring IoC container and beans</h2></div></div></div>

<p>This chapter covers the Spring Framework implementation of the Inversion of Control
(IoC) <sup>[<a name="d4e640" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ftn.d4e640" class="footnote">1</a>]</sup> principle. IoC
is also known as <span class="emphasis"><em>dependency injection</em></span> (DI). It is a process whereby objects define
their dependencies, that is, the other objects they work with, only through constructor
arguments, arguments to a factory method, or properties that are set on the object
instance after it is constructed or returned from a factory method. The container then
<span class="emphasis"><em>injects</em></span> those dependencies when it creates the bean. This process is fundamentally
the inverse, hence the name <span class="emphasis"><em>Inversion of Control</em></span> (IoC), of the bean itself
controlling the instantiation or location of its dependencies by using direct
construction of classes, or a mechanism such as the <span class="emphasis"><em>Service Locator</em></span> pattern.</p>
<p>The <code class="literal">org.springframework.beans</code> and <code class="literal">org.springframework.context</code> packages are the basis
for Spring Framework’s IoC container. The
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_top"><code class="literal">BeanFactory</code></a>
interface provides an advanced configuration mechanism capable of managing any type of
object.
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html" target="_top"><code class="literal">ApplicationContext</code></a>
is a sub-interface of <code class="literal">BeanFactory</code>. It adds easier integration with Spring’s AOP
features; message resource handling (for use in internationalization), event
publication; and application-layer specific contexts such as the <code class="literal">WebApplicationContext</code>
for use in web applications.</p>
<p>In short, the <code class="literal">BeanFactory</code> provides the configuration framework and basic
functionality, and the <code class="literal">ApplicationContext</code> adds more enterprise-specific functionality.
The <code class="literal">ApplicationContext</code> is a complete superset of the <code class="literal">BeanFactory</code>, and is used
exclusively in this chapter in descriptions of Spring’s IoC container. For more
information on using the <code class="literal">BeanFactory</code> instead of the <code class="literal">ApplicationContext,</code> refer to
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanfactory" title="4.17 The BeanFactory">Section&nbsp;4.17, “The BeanFactory”</a>.</p>
<p>In Spring, the objects that form the backbone of your application and that are managed
by the Spring IoC <span class="emphasis"><em>container</em></span> are called <span class="emphasis"><em>beans</em></span>. A bean is an object that is
instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a
bean is simply one of many objects in your application. Beans, and the <span class="emphasis"><em>dependencies</em></span>
among them, are reflected in the <span class="emphasis"><em>configuration metadata</em></span> used by a container.</p>
</div>
<div class="section" title="4.2 Container overview"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-basics"></a>4.2&nbsp;Container overview</h2></div></div></div>

<p>The interface <code class="literal">org.springframework.context.ApplicationContext</code> represents the Spring IoC
container and is responsible for instantiating, configuring, and assembling the
aforementioned beans. The container gets its instructions on what objects to
instantiate, configure, and assemble by reading configuration metadata. The
configuration metadata is represented in XML, Java annotations, or Java code. It allows
you to express the objects that compose your application and the rich interdependencies
between such objects.</p>
<p>Several implementations of the <code class="literal">ApplicationContext</code> interface are supplied
out-of-the-box with Spring. In standalone applications it is common to create an
instance of
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_top"><code class="literal">ClassPathXmlApplicationContext</code></a>
or <a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html" target="_top"><code class="literal">FileSystemXmlApplicationContext</code></a>.
 While XML has been the traditional format for defining configuration metadata you can
instruct the container to use Java annotations or code as the metadata format by
providing a small amount of XML configuration to declaratively enable support for these
additional metadata formats.</p>
<p>In most application scenarios, explicit user code is not required to instantiate one or
more instances of a Spring IoC container. For example, in a web application scenario, a
simple eight (or so) lines of boilerplate web descriptor XML in the <code class="literal">web.xml</code> file
of the application will typically suffice (see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-create" title="4.16.4 Convenient ApplicationContext instantiation for web applications">Section&nbsp;4.16.4, “Convenient ApplicationContext instantiation for web applications”</a>). If you are using the
<a class="ulink" href="http://spring.io/tools/sts" target="_top">SpringSource Tool Suite</a> Eclipse-powered development
environment this boilerplate configuration can be easily created with few mouse clicks or
keystrokes.</p>
<p>The following diagram is a high-level view of how Spring works. Your application classes
are combined with configuration metadata so that after the <code class="literal">ApplicationContext</code> is
created and initialized, you have a fully configured and executable system or
application.</p>
<div class="figure"><a name="d4e685"></a><p class="title"><b>Figure&nbsp;4.1.&nbsp;The Spring IoC container</b></p><div class="figure-contents">

  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/container-magic.png" alt="container magic"></div>
</div></div><br class="figure-break">

<div class="section" title="4.2.1 Configuration metadata"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-metadata"></a>4.2.1&nbsp;Configuration metadata</h3></div></div></div>

<p>As the preceding diagram shows, the Spring IoC container consumes a form of
<span class="emphasis"><em>configuration metadata</em></span>; this configuration metadata represents how you as an
application developer tell the Spring container to instantiate, configure, and assemble
the objects in your application.</p>
<p>Configuration metadata is traditionally supplied in a simple and intuitive XML format,
which is what most of this chapter uses to convey key concepts and features of the
Spring IoC container.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>XML-based metadata is <span class="emphasis"><em>not</em></span> the only allowed form of configuration metadata. The
Spring IoC container itself is <span class="emphasis"><em>totally</em></span> decoupled from the format in which this
configuration metadata is actually written. These days many developers choose
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java" title="4.12 Java-based container configuration">Java-based configuration</a> for their Spring applications.</p>
</td></tr></tbody></table></div>

<p>For information about using other forms of metadata with the Spring container, see:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config" title="4.9 Annotation-based container configuration">Annotation-based configuration</a>: Spring 2.5 introduced
support for annotation-based configuration metadata.
</li><li class="listitem">
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java" title="4.12 Java-based container configuration">Java-based configuration</a>: Starting with Spring 3.0, many features
provided by the Spring JavaConfig project became part of the core Spring Framework.
Thus you can define beans external to your application classes by using Java rather
than XML files. To use these new features, see the <code class="literal">@Configuration</code>, <code class="literal">@Bean</code>, <code class="literal">@Import</code>
and <code class="literal">@DependsOn</code> annotations.
</li></ul></div>

<p>Spring configuration consists of at least one and typically more than one bean
definition that the container must manage. XML-based configuration metadata shows these
beans configured as <code class="literal">&lt;bean/&gt;</code> elements inside a top-level <code class="literal">&lt;beans/&gt;</code> element. Java
configuration typically uses <code class="literal">@Bean</code> annotated methods within a <code class="literal">@Configuration</code> class.</p>
<p>These bean definitions correspond to the actual objects that make up your application.
Typically you define service layer objects, data access objects (DAOs), presentation
objects such as Struts <code class="literal">Action</code> instances, infrastructure objects such as Hibernate
<code class="literal">SessionFactories</code>, JMS <code class="literal">Queues</code>, and so forth. Typically one does not configure
fine-grained domain objects in the container, because it is usually the responsibility
of DAOs and business logic to create and load domain objects. However, you can use
Spring’s integration with AspectJ to configure objects that have been created outside
the control of an IoC container. See <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-atconfigurable" title="8.8.1 Using AspectJ to dependency inject domain objects with Spring">Using AspectJ to
dependency-inject domain objects with Spring</a>.</p>
<p>The following example shows the basic structure of XML-based configuration metadata:</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"..."</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"..."</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-comment">&lt;!-- more bean definitions go here --&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The <code class="literal">id</code> attribute is a string that you use to identify the individual bean definition.
The <code class="literal">class</code> attribute defines the type of the bean and uses the fully qualified
classname. The value of the id attribute refers to collaborating objects. The XML for
referring to collaborating objects is not shown in this example; see
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-dependencies" title="4.4 Dependencies">Dependencies</a> for more information.</p>
</div>
<div class="section" title="4.2.2 Instantiating a container"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-instantiation"></a>4.2.2&nbsp;Instantiating a container</h3></div></div></div>

<p>Instantiating a Spring IoC container is straightforward. The location path or paths
supplied to an <code class="literal">ApplicationContext</code> constructor are actually resource strings that allow
the container to load configuration metadata from a variety of external resources such
as the local file system, from the Java <code class="literal">CLASSPATH</code>, and so on.</p>
<pre class="programlisting">ApplicationContext context =
    <span class="hl-keyword">new</span> ClassPathXmlApplicationContext(<span class="hl-keyword">new</span> String[] {<span class="hl-string">"services.xml"</span>, <span class="hl-string">"daos.xml"</span>});</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>After you learn about Spring’s IoC container, you may want to know more about Spring’s
<code class="literal">Resource</code> abstraction, as described in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources" title="5. Resources">Chapter&nbsp;5, <i>Resources</i></a>, which provides a convenient
mechanism for reading an InputStream from locations defined in a URI syntax. In
particular, <code class="literal">Resource</code> paths are used to construct applications contexts as described in
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx" title="5.7 Application contexts and Resource paths">Section&nbsp;5.7, “Application contexts and Resource paths”</a>.</p>
</td></tr></tbody></table></div>

<p>The following example shows the service layer objects <code class="literal">(services.xml)</code> configuration file:</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-comment">&lt;!-- services --&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"petStore"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.samples.jpetstore.services.PetStoreServiceImpl"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"accountDao"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"accountDao"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"itemDao"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"itemDao"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-comment">&lt;!-- more bean definitions for services go here --&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The following example shows the data access objects <code class="literal">daos.xml</code> file:</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountDao"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao"</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"itemDao"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.samples.jpetstore.dao.jpa.JapItemDao"</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-comment">&lt;!-- more bean definitions for data access objects go here --&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>In the preceding example, the service layer consists of the class <code class="literal">PetStoreServiceImpl</code>,
and two data access objects of the type <code class="literal">JpaAccountDao</code> and <code class="literal">JpaItemDao</code> (based
on the JPA Object/Relational mapping standard). The <code class="literal">property name</code> element refers to the
name of the JavaBean property, and the <code class="literal">ref</code> element refers to the name of another bean
definition. This linkage between <code class="literal">id</code> and <code class="literal">ref</code> elements expresses the dependency between
collaborating objects. For details of configuring an object’s dependencies, see
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-dependencies" title="4.4 Dependencies">Dependencies</a>.</p>
<div class="section" title="Composing XML-based configuration metadata"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-xml-import"></a>Composing XML-based configuration metadata</h4></div></div></div>

<p>It can be useful to have bean definitions span multiple XML files. Often each individual
XML configuration file represents a logical layer or module in your architecture.</p>
<p>You can use the application context constructor to load bean definitions from all these
XML fragments. This constructor takes multiple <code class="literal">Resource</code> locations, as was shown in the
previous section. Alternatively, use one or more occurrences of the <code class="literal">&lt;import/&gt;</code> element
to load bean definitions from another file or files. For example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;import</span> <span class="hl-attribute">resource</span>=<span class="hl-value">"services.xml"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;import</span> <span class="hl-attribute">resource</span>=<span class="hl-value">"resources/messageSource.xml"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;import</span> <span class="hl-attribute">resource</span>=<span class="hl-value">"/resources/themeSource.xml"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"bean1"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"bean2"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>In the preceding example, external bean definitions are loaded from three files,
<code class="literal">services.xml</code>, <code class="literal">messageSource.xml</code>, and <code class="literal">themeSource.xml</code>. All location paths are
relative to the definition file doing the importing, so <code class="literal">services.xml</code> must be in the
same directory or classpath location as the file doing the importing, while
<code class="literal">messageSource.xml</code> and <code class="literal">themeSource.xml</code> must be in a <code class="literal">resources</code> location below the
location of the importing file. As you can see, a leading slash is ignored, but given
that these paths are relative, it is better form not to use the slash at all. The
contents of the files being imported, including the top level <code class="literal">&lt;beans/&gt;</code> element, must
be valid XML bean definitions according to the Spring Schema.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>It is possible, but not recommended, to reference files in parent directories using a
relative "../" path. Doing so creates a dependency on a file that is outside the current
application. In particular, this reference is not recommended for "classpath:" URLs (for
example, "classpath:../services.xml"), where the runtime resolution process chooses the
"nearest" classpath root and then looks into its parent directory. Classpath
configuration changes may lead to the choice of a different, incorrect directory.</p>
<p>You can always use fully qualified resource locations instead of relative paths: for
example, "file:C:/config/services.xml" or "classpath:/config/services.xml". However, be
aware that you are coupling your application’s configuration to specific absolute
locations. It is generally preferable to keep an indirection for such absolute
locations, for example, through "${…}" placeholders that are resolved against JVM
system properties at runtime.</p>
</td></tr></tbody></table></div>

</div>
</div>
<div class="section" title="4.2.3 Using the container"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-client"></a>4.2.3&nbsp;Using the container</h3></div></div></div>

<p>The <code class="literal">ApplicationContext</code> is the interface for an advanced factory capable of maintaining
a registry of different beans and their dependencies. Using the method <code class="literal">T getBean(String
name, Class&lt;T&gt; requiredType)</code> you can retrieve instances of your beans.</p>
<p>The <code class="literal">ApplicationContext</code> enables you to read bean definitions and access them as follows:</p>
<pre class="programlisting"><span class="hl-comment">// create and configure beans</span>
ApplicationContext context =
    <span class="hl-keyword">new</span> ClassPathXmlApplicationContext(<span class="hl-keyword">new</span> String[] {<span class="hl-string">"services.xml"</span>, <span class="hl-string">"daos.xml"</span>});

<span class="hl-comment">// retrieve configured instance</span>
PetStoreService service = context.getBean(<span class="hl-string">"petStore"</span>, PetStoreService.<span class="hl-keyword">class</span>);

<span class="hl-comment">// use configured instance</span>
List&lt;String&gt; userList = service.getUsernameList();</pre>

<p>You use <code class="literal">getBean()</code> to retrieve instances of your beans. The <code class="literal">ApplicationContext</code>
interface has a few other methods for retrieving beans, but ideally your application
code should never use them. Indeed, your application code should have no calls to the
<code class="literal">getBean()</code> method at all, and thus no dependency on Spring APIs at all. For example,
Spring’s integration with web frameworks provides for dependency injection for various
web framework classes such as controllers and JSF-managed beans.</p>
</div>
</div>
<div class="section" title="4.3 Bean overview"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-definition"></a>4.3&nbsp;Bean overview</h2></div></div></div>

<p>A Spring IoC container manages one or more <span class="emphasis"><em>beans</em></span>. These beans are created with the
configuration metadata that you supply to the container, for example, in the form of XML
<code class="literal">&lt;bean/&gt;</code> definitions.</p>
<p>Within the container itself, these bean definitions are represented as <code class="literal">BeanDefinition</code>
objects, which contain (among other information) the following metadata:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
<span class="emphasis"><em>A package-qualified class name:</em></span> typically the actual implementation class of the
bean being defined.
</li><li class="listitem">
Bean behavioral configuration elements, which state how the bean should behave in the
container (scope, lifecycle callbacks, and so forth).
</li><li class="listitem">
References to other beans that are needed for the bean to do its work; these
references are also called <span class="emphasis"><em>collaborators</em></span> or <span class="emphasis"><em>dependencies</em></span>.
</li><li class="listitem">
Other configuration settings to set in the newly created object, for example, the
number of connections to use in a bean that manages a connection pool, or the size
limit of the pool.
</li></ul></div>

<p>This metadata translates to a set of properties that make up each bean definition.</p>
<div class="table"><a name="beans-factory-bean-definition-tbl"></a><p class="title"><b>Table&nbsp;4.1.&nbsp;The bean definition</b></p><div class="table-contents">

  <table summary="The bean definition" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Property</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">Explained in…</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>class</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class" title="4.3.2 Instantiating beans">Section&nbsp;4.3.2, “Instantiating beans”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>name</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname" title="4.3.1 Naming beans">Section&nbsp;4.3.1, “Naming beans”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>scope</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes" title="4.5 Bean scopes">Section&nbsp;4.5, “Bean scopes”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>constructor arguments</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-collaborators" title="4.4.1 Dependency injection">Section&nbsp;4.4.1, “Dependency injection”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>properties</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-collaborators" title="4.4.1 Dependency injection">Section&nbsp;4.4.1, “Dependency injection”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>autowiring mode</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire" title="4.4.5 Autowiring collaborators">Section&nbsp;4.4.5, “Autowiring collaborators”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>lazy-initialization mode</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lazy-init" title="4.4.4 Lazy-initialized beans">Section&nbsp;4.4.4, “Lazy-initialized beans”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>initialization method</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks">the section called “Initialization callbacks”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>destruction method</p></td><td style="" align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean" title="Destruction callbacks">the section called “Destruction callbacks”</a></p></td></tr></tbody></table>
</div></div><br class="table-break">

<p>In addition to bean definitions that contain information on how to create a specific
bean, the <code class="literal">ApplicationContext</code> implementations also permit the registration of existing
objects that are created outside the container, by users. This is done by accessing the
ApplicationContext’s BeanFactory via the method <code class="literal">getBeanFactory()</code> which returns the
BeanFactory implementation <code class="literal">DefaultListableBeanFactory</code>. <code class="literal">DefaultListableBeanFactory</code>
supports this registration through the methods <code class="literal">registerSingleton(..)</code> and
<code class="literal">registerBeanDefinition(..)</code>. However, typical applications work solely with beans
defined through metadata bean definitions.</p>
<div class="section" title="4.3.1 Naming beans"><div class="titlepage"><div><div><h3 class="title"><a name="beans-beanname"></a>4.3.1&nbsp;Naming beans</h3></div></div></div>

<p>Every bean has one or more identifiers. These identifiers must be unique within the
container that hosts the bean. A bean usually has only one identifier, but if it
requires more than one, the extra ones can be considered aliases.</p>
<p>In XML-based configuration metadata, you use the <code class="literal">id</code> and/or <code class="literal">name</code> attributes to
specify the bean identifier(s). The <code class="literal">id</code> attribute allows you to specify exactly one id.
 Conventionally these names are alphanumeric (<span class="emphasis"><em>myBean</em></span>, <span class="emphasis"><em>fooService</em></span>, etc), but may
special characters as well. If you want to introduce other aliases to the bean, you can
also specify them in the <code class="literal">name</code> attribute, separated by a comma (<code class="literal">,</code>), semicolon (<code class="literal">;</code>),
or white space. As a historical note, in versions prior to Spring 3.1, the <code class="literal">id</code>
attribute was typed as an <code class="literal">xsd:ID</code>, which constrained possible characters. As of 3.1,
it is now <code class="literal">xsd:string</code>. Note that bean id uniqueness is still enforced by the
container, though no longer by XML parsers.</p>
<p>You are not required to supply a name or id for a bean. If no name or id is supplied
explicitly, the container generates a unique name for that bean. However, if you want to
refer to that bean by name, through the use of the <code class="literal">ref</code> element or
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-servicelocator" title="4.17.2 Glue code and the evil singleton">Service Locator</a> style lookup, you must provide a name.
Motivations for not supplying a name are related to using <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-inner-beans" title="Inner beans">inner
beans</a> and <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire" title="4.4.5 Autowiring collaborators">autowiring collaborators</a>.</p>
<div class="sidebar" title="Bean Naming Conventions"><p class="title"><b>Bean Naming Conventions</b></p>

<p>The convention is to use the standard Java convention for instance field names when
naming beans. That is, bean names start with a lowercase letter, and are camel-cased
from then on. Examples of such names would be (without quotes) <code class="literal">'accountManager'</code>,
<code class="literal">'accountService'</code>, <code class="literal">'userDao'</code>, <code class="literal">'loginController'</code>, and so forth.</p>
<p>Naming beans consistently makes your configuration easier to read and understand, and if
you are using Spring AOP it helps a lot when applying advice to a set of beans related
by name.</p>
</div>

<div class="section" title="Aliasing a bean outside the bean definition"><div class="titlepage"><div><div><h4 class="title"><a name="beans-beanname-alias"></a>Aliasing a bean outside the bean definition</h4></div></div></div>

<p>In a bean definition itself, you can supply more than one name for the bean, by using a
combination of up to one name specified by the <code class="literal">id</code> attribute, and any number of other
names in the <code class="literal">name</code> attribute. These names can be equivalent aliases to the same bean,
and are useful for some situations, such as allowing each component in an application to
refer to a common dependency by using a bean name that is specific to that component
itself.</p>
<p>Specifying all aliases where the bean is actually defined is not always adequate,
however. It is sometimes desirable to introduce an alias for a bean that is defined
elsewhere. This is commonly the case in large systems where configuration is split
amongst each subsystem, each subsystem having its own set of object definitions. In
XML-based configuration metadata, you can use the <code class="literal">&lt;alias/&gt;</code> element to accomplish this.</p>
<pre class="programlisting"><span class="hl-tag">&lt;alias</span> <span class="hl-attribute">name</span>=<span class="hl-value">"fromName"</span> <span class="hl-attribute">alias</span>=<span class="hl-value">"toName"</span><span class="hl-tag">/&gt;</span></pre>

<p>In this case, a bean in the same container which is named <code class="literal">fromName</code>, may also after the
use of this alias definition, be referred to as <code class="literal">toName</code>.</p>
<p>For example, the configuration metadata for subsystem A may refer to a DataSource via
the name <code class="literal">subsystemA-dataSource</code>. The configuration metadata for subsystem B may refer to
a DataSource via the name <code class="literal">subsystemB-dataSource</code>. When composing the main application
that uses both these subsystems the main application refers to the DataSource via the
name <code class="literal">myApp-dataSource</code>. To have all three names refer to the same object you add to the
MyApp configuration metadata the following aliases definitions:</p>
<pre class="programlisting"><span class="hl-tag">&lt;alias</span> <span class="hl-attribute">name</span>=<span class="hl-value">"subsystemA-dataSource"</span> <span class="hl-attribute">alias</span>=<span class="hl-value">"subsystemB-dataSource"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;alias</span> <span class="hl-attribute">name</span>=<span class="hl-value">"subsystemA-dataSource"</span> <span class="hl-attribute">alias</span>=<span class="hl-value">"myApp-dataSource"</span><span class="hl-tag"> /&gt;</span></pre>

<p>Now each component and the main application can refer to the dataSource through a name
that is unique and guaranteed not to clash with any other definition (effectively
creating a namespace), yet they refer to the same bean.</p>
<div class="sidebar" title="Java-configuration"><p class="title"><b>Java-configuration</b></p>

<p>If you are using Java-configuration, the <code class="literal">@Bean</code> annotation can be used to provide aliases
see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-bean-annotation" title="4.12.3 Using the @Bean annotation">Section&nbsp;4.12.3, “Using the @Bean annotation”</a> for details.</p>
</div>

</div>
</div>
<div class="section" title="4.3.2 Instantiating beans"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-class"></a>4.3.2&nbsp;Instantiating beans</h3></div></div></div>

<p>A bean definition essentially is a recipe for creating one or more objects. The
container looks at the recipe for a named bean when asked, and uses the configuration
metadata encapsulated by that bean definition to create (or acquire) an actual object.</p>
<p>If you use XML-based configuration metadata, you specify the type (or class) of object
that is to be instantiated in the <code class="literal">class</code> attribute of the <code class="literal">&lt;bean/&gt;</code> element. This
<code class="literal">class</code> attribute, which internally is a <code class="literal">Class</code> property on a <code class="literal">BeanDefinition</code>
instance, is usually mandatory. (For exceptions, see
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-instance-factory-method" title="Instantiation using an instance factory method">the section called “Instantiation using an instance factory method”</a> and <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title="4.7 Bean definition inheritance">Section&nbsp;4.7, “Bean definition inheritance”</a>.)
You use the <code class="literal">Class</code> property in one of two ways:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Typically, to specify the bean class to be constructed in the case where the container
itself directly creates the bean by calling its constructor reflectively, somewhat
equivalent to Java code using the <code class="literal">new</code> operator.
</li><li class="listitem">
To specify the actual class containing the <code class="literal">static</code> factory method that will be
invoked to create the object, in the less common case where the container invokes a
<code class="literal">static</code>, <span class="emphasis"><em>factory</em></span> method on a class to create the bean. The object type returned
from the invocation of the <code class="literal">static</code> factory method may be the same class or another
class entirely.
</li></ul></div>

<div class="sidebar"><p class="title"><b></b></p>
<p title="Inner class names">
<b>Inner class names.&nbsp;</b>
If you want to configure a bean definition for a <code class="literal">static</code> nested class, you have to use
the <span class="emphasis"><em>binary</em></span> name of the inner class.
</p>
<p>For example, if you have a class called <code class="literal">Foo</code> in the <code class="literal">com.example</code> package, and this
<code class="literal">Foo</code> class has a <code class="literal">static</code> inner class called <code class="literal">Bar</code>, the value of the <code class="literal">'class'</code>
attribute on a bean definition would be…</p>
<p><code class="literal">com.example.Foo$Bar</code></p>
<p>Notice the use of the <code class="literal">$</code> character in the name to separate the inner class name from
the outer class name.</p>
</div>

<div class="section" title="Instantiation with a constructor"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-class-ctor"></a>Instantiation with a constructor</h4></div></div></div>

<p>When you create a bean by the constructor approach, all normal classes are usable by and
compatible with Spring. That is, the class being developed does not need to implement
any specific interfaces or to be coded in a specific fashion. Simply specifying the bean
class should suffice. However, depending on what type of IoC you use for that specific
bean, you may need a default (empty) constructor.</p>
<p>The Spring IoC container can manage virtually <span class="emphasis"><em>any</em></span> class you want it to manage; it is
not limited to managing true JavaBeans. Most Spring users prefer actual JavaBeans with
only a default (no-argument) constructor and appropriate setters and getters modeled
after the properties in the container. You can also have more exotic non-bean-style
classes in your container. If, for example, you need to use a legacy connection pool
that absolutely does not adhere to the JavaBean specification, Spring can manage it as
well.</p>
<p>With XML-based configuration metadata you can specify your bean class as follows:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"anotherExample"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBeanTwo"</span><span class="hl-tag">/&gt;</span></pre>

<p>For details about the mechanism for supplying arguments to the constructor (if required)
and setting object instance properties after the object is constructed, see
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-collaborators" title="4.4.1 Dependency injection">Injecting Dependencies</a>.</p>
</div>
<div class="section" title="Instantiation with a static factory method"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-class-static-factory-method"></a>Instantiation with a static factory method</h4></div></div></div>

<p>When defining a bean that you create with a static factory method, you use the <code class="literal">class</code>
attribute to specify the class containing the <code class="literal">static</code> factory method and an attribute
named <code class="literal">factory-method</code> to specify the name of the factory method itself. You should be
able to call this method (with optional arguments as described later) and return a live
object, which subsequently is treated as if it had been created through a constructor.
One use for such a bean definition is to call <code class="literal">static</code> factories in legacy code.</p>
<p>The following bean definition specifies that the bean will be created by calling a
factory-method. The definition does not specify the type (class) of the returned object,
only the class containing the factory method. In this example, the <code class="literal">createInstance()</code>
method must be a <span class="emphasis"><em>static</em></span> method.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"clientService"</span>
    <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ClientService"</span>
    <span class="hl-attribute">factory-method</span>=<span class="hl-value">"createInstance"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ClientService {
    <span class="hl-keyword">private</span> <span class="hl-keyword">static</span> ClientService clientService = <span class="hl-keyword">new</span> ClientService();
    <span class="hl-keyword">private</span> ClientService() {}

    <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> ClientService createInstance() {
        <span class="hl-keyword">return</span> clientService;
    }
}</pre>

<p>For details about the mechanism for supplying (optional) arguments to the factory method
and setting object instance properties after the object is returned from the factory,
see <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-properties-detailed" title="4.4.2 Dependencies and configuration in detail">Dependencies and configuration in detail</a>.</p>
</div>
<div class="section" title="Instantiation using an instance factory method"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-class-instance-factory-method"></a>Instantiation using an instance factory method</h4></div></div></div>

<p>Similar to instantiation through a <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-static-factory-method" title="Instantiation with a static factory method">static
factory method</a>, instantiation with an instance factory method invokes a non-static
method of an existing bean from the container to create a new bean. To use this
mechanism, leave the <code class="literal">class</code> attribute empty, and in the <code class="literal">factory-bean</code> attribute,
specify the name of a bean in the current (or parent/ancestor) container that contains
the instance method that is to be invoked to create the object. Set the name of the
factory method itself with the <code class="literal">factory-method</code> attribute.</p>
<pre class="programlisting"><span class="hl-comment">&lt;!-- the factory bean, which contains a method called createInstance() --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"serviceLocator"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.DefaultServiceLocator"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-comment">&lt;!-- the bean to be created via the factory bean --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"clientService"</span>
    <span class="hl-attribute">factory-bean</span>=<span class="hl-value">"serviceLocator"</span>
    <span class="hl-attribute">factory-method</span>=<span class="hl-value">"createClientServiceInstance"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> DefaultServiceLocator {

    <span class="hl-keyword">private</span> <span class="hl-keyword">static</span> ClientService clientService = <span class="hl-keyword">new</span> ClientServiceImpl();
    <span class="hl-keyword">private</span> DefaultServiceLocator() {}

    <span class="hl-keyword">public</span> ClientService createClientServiceInstance() {
        <span class="hl-keyword">return</span> clientService;
    }
}</pre>

<p>One factory class can also hold more than one factory method as shown here:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"serviceLocator"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.DefaultServiceLocator"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"clientService"</span>
    <span class="hl-attribute">factory-bean</span>=<span class="hl-value">"serviceLocator"</span>
    <span class="hl-attribute">factory-method</span>=<span class="hl-value">"createClientServiceInstance"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span>
    <span class="hl-attribute">factory-bean</span>=<span class="hl-value">"serviceLocator"</span>
    <span class="hl-attribute">factory-method</span>=<span class="hl-value">"createAccountServiceInstance"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> DefaultServiceLocator {

    <span class="hl-keyword">private</span> <span class="hl-keyword">static</span> ClientService clientService = <span class="hl-keyword">new</span> ClientServiceImpl();
    <span class="hl-keyword">private</span> <span class="hl-keyword">static</span> AccountService accountService = <span class="hl-keyword">new</span> AccountServiceImpl();

    <span class="hl-keyword">private</span> DefaultServiceLocator() {}

    <span class="hl-keyword">public</span> ClientService createClientServiceInstance() {
        <span class="hl-keyword">return</span> clientService;
    }

    <span class="hl-keyword">public</span> AccountService createAccountServiceInstance() {
        <span class="hl-keyword">return</span> accountService;
    }

}</pre>

<p>This approach shows that the factory bean itself can be managed and configured through
dependency injection (DI). See <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-properties-detailed" title="4.4.2 Dependencies and configuration in detail">Dependencies and
configuration in detail</a>.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>In Spring documentation,<span class="emphasis"><em> factory bean</em></span> refers to a bean that is configured in the
Spring container that will create objects through an
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-instance-factory-method" title="Instantiation using an instance factory method">instance</a> or
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class-static-factory-method" title="Instantiation with a static factory method">static</a> factory method. By contrast,
<code class="literal">FactoryBean</code> (notice the capitalization) refers to a Spring-specific
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-factorybean" title="4.8.3 Customizing instantiation logic with a FactoryBean"><code class="literal">FactoryBean</code></a>.</p>
</td></tr></tbody></table></div>

</div>
</div>
</div>
<div class="section" title="4.4 Dependencies"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-dependencies"></a>4.4&nbsp;Dependencies</h2></div></div></div>

<p>A typical enterprise application does not consist of a single object (or bean in the
Spring parlance). Even the simplest application has a few objects that work together to
present what the end-user sees as a coherent application. This next section explains how
you go from defining a number of bean definitions that stand alone to a fully realized
application where objects collaborate to achieve a goal.</p>
<div class="section" title="4.4.1 Dependency injection"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-collaborators"></a>4.4.1&nbsp;Dependency injection</h3></div></div></div>

<p><span class="emphasis"><em>Dependency injection</em></span> (DI) is a process whereby objects define their dependencies,
that is, the other objects they work with, only through constructor arguments, arguments
to a factory method, or properties that are set on the object instance after it is
constructed or returned from a factory method. The container then <span class="emphasis"><em>injects</em></span> those
dependencies when it creates the bean. This process is fundamentally the inverse, hence
the name <span class="emphasis"><em>Inversion of Control</em></span> (IoC), of the bean itself controlling the instantiation
or location of its dependencies on its own by using direct construction of classes, or
the <span class="emphasis"><em>Service Locator</em></span> pattern.</p>
<p>Code is cleaner with the DI principle and decoupling is more effective when objects are
provided with their dependencies. The object does not look up its dependencies, and does
not know the location or class of the dependencies. As such, your classes become easier
to test, in particular when the dependencies are on interfaces or abstract base classes,
which allow for stub or mock implementations to be used in unit tests.</p>
<p>DI exists in two major variants, <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-constructor-injection" title="Constructor-based dependency injection">Constructor-based
dependency injection</a> and <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-setter-injection" title="Setter-based dependency injection">Setter-based dependency injection</a>.</p>
<div class="section" title="Constructor-based dependency injection"><div class="titlepage"><div><div><h4 class="title"><a name="beans-constructor-injection"></a>Constructor-based dependency injection</h4></div></div></div>

<p><span class="emphasis"><em>Constructor-based</em></span> DI is accomplished by the container invoking a constructor with a
number of arguments, each representing a dependency. Calling a <code class="literal">static</code> factory method
with specific arguments to construct the bean is nearly equivalent, and this discussion
treats arguments to a constructor and to a <code class="literal">static</code> factory method similarly. The
following example shows a class that can only be dependency-injected with constructor
injection. Notice that there is nothing <span class="emphasis"><em>special</em></span> about this class, it is a POJO that
has no dependencies on container specific interfaces, base classes or annotations.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-comment">// the SimpleMovieLister has a dependency on a MovieFinder</span>
    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <span class="hl-comment">// a constructor so that the Spring container can </span><span class="emphasis"><em>inject</em></span> a MovieFinder
    <span class="hl-keyword">public</span> SimpleMovieLister(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// business logic that actually </span><span class="emphasis"><em>uses</em></span> the injected MovieFinder is omitted...

}</pre>

<div class="section" title="Constructor argument resolution"><div class="titlepage"><div><div><h5 class="title"><a name="beans-factory-ctor-arguments-resolution"></a>Constructor argument resolution</h5></div></div></div>

<p>Constructor argument resolution matching occurs using the argument’s type. If no
potential ambiguity exists in the constructor arguments of a bean definition, then the
order in which the constructor arguments are defined in a bean definition is the order
in which those arguments are supplied to the appropriate constructor when the bean is
being instantiated. Consider the following class:</p>
<pre class="programlisting"><span class="hl-keyword">package</span> x.y;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Foo {

    <span class="hl-keyword">public</span> Foo(Bar bar, Baz baz) {
        <span class="hl-comment">// ...</span>
    }

}</pre>

<p>No potential ambiguity exists, assuming that <code class="literal">Bar</code> and <code class="literal">Baz</code> classes are not related by
inheritance. Thus the following configuration works fine, and you do not need to specify
the constructor argument indexes and/or types explicitly in the <code class="literal">&lt;constructor-arg/&gt;</code>
element.</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"foo"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Foo"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"bar"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"baz"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"bar"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Bar"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"baz"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Baz"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>When another bean is referenced, the type is known, and matching can occur (as was the
case with the preceding example). When a simple type is used, such as
<code class="literal">&lt;value&gt;true&lt;/value&gt;</code>, Spring cannot determine the type of the value, and so cannot match
by type without help. Consider the following class:</p>
<pre class="programlisting"><span class="hl-keyword">package</span> examples;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-comment">// No. of years to the calculate the Ultimate Answer</span>
    <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> years;

    <span class="hl-comment">// The Answer to Life, the Universe, and Everything</span>
    <span class="hl-keyword">private</span> String ultimateAnswer;

    <span class="hl-keyword">public</span> ExampleBean(<span class="hl-keyword">int</span> years, String ultimateAnswer) {
        <span class="hl-keyword">this</span>.years = years;
        <span class="hl-keyword">this</span>.ultimateAnswer = ultimateAnswer;
    }

}</pre>

<p>In the preceding scenario, the container <span class="emphasis"><em>can</em></span> use type matching with simple types if
you explicitly specify the type of the constructor argument using the <code class="literal">type</code> attribute.
For example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">type</span>=<span class="hl-value">"int"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"7500000"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">type</span>=<span class="hl-value">"java.lang.String"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"42"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>Use the <code class="literal">index</code> attribute to specify explicitly the index of constructor arguments. For
example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">index</span>=<span class="hl-value">"0"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"7500000"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">index</span>=<span class="hl-value">"1"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"42"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>In addition to resolving the ambiguity of multiple simple values, specifying an index
resolves ambiguity where a constructor has two arguments of the same type. Note that the
<span class="emphasis"><em>index is 0 based</em></span>.</p>
<p>You can also use the constructor parameter name for value disambiguation:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">name</span>=<span class="hl-value">"years"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"7500000"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">name</span>=<span class="hl-value">"ultimateanswer"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"42"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>Keep in mind that to make this work out of the box your code must be compiled with the
debug flag enabled so that Spring can look up the parameter name from the constructor.
If you can’t compile your code with debug flag (or don’t want to) you can use
<a class="ulink" href="http://download.oracle.com/javase/6/docs/api/java/beans/ConstructorProperties.html" target="_top">@ConstructorProperties</a>
JDK annotation to explicitly name your constructor arguments. The sample class would
then have to look as follows:</p>
<pre class="programlisting"><span class="hl-keyword">package</span> examples;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-comment">// Fields omitted</span>

    <i><span class="hl-annotation" style="color: gray">@ConstructorProperties({"years", "ultimateAnswer"})</span></i>
    <span class="hl-keyword">public</span> ExampleBean(<span class="hl-keyword">int</span> years, String ultimateAnswer) {
        <span class="hl-keyword">this</span>.years = years;
        <span class="hl-keyword">this</span>.ultimateAnswer = ultimateAnswer;
    }

}</pre>

</div>
</div>
<div class="section" title="Setter-based dependency injection"><div class="titlepage"><div><div><h4 class="title"><a name="beans-setter-injection"></a>Setter-based dependency injection</h4></div></div></div>

<p><span class="emphasis"><em>Setter-based</em></span> DI is accomplished by the container calling setter methods on your
beans after invoking a no-argument constructor or no-argument <code class="literal">static</code> factory method to
instantiate your bean.</p>
<p>The following example shows a class that can only be dependency-injected using pure
setter injection. This class is conventional Java. It is a POJO that has no dependencies
on container specific interfaces, base classes or annotations.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-comment">// the SimpleMovieLister has a dependency on the MovieFinder</span>
    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <span class="hl-comment">// a setter method so that the Spring container can </span><span class="emphasis"><em>inject</em></span> a MovieFinder
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// business logic that actually </span><span class="emphasis"><em>uses</em></span> the injected MovieFinder is omitted...

}</pre>

<p>The <code class="literal">ApplicationContext</code> supports constructor- and setter-based DI for the beans it
manages. It also supports setter-based DI after some dependencies are already injected
through the constructor approach. You configure the dependencies in the form of a
<code class="literal">BeanDefinition</code>, which you use with <code class="literal">PropertyEditor</code> instances to convert properties
from one format to another. However, most Spring users do not work with these classes
directly (programmatically), but rather with an XML definition file that is then
converted internally into instances of these classes, and used to load an entire Spring
IoC container instance.</p>
<div class="sidebar" title="Constructor-based or setter-based DI?"><p class="title"><b>Constructor-based or setter-based DI?</b></p>

<p>Since you can mix both, Constructor- and Setter-based DI, it is a good rule of thumb to
use constructor arguments for mandatory dependencies and setters for optional
dependencies. Note that the use of a <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-required-annotation" title="4.9.1 @Required">@Required</a> annotation
on a setter can be used to make setters required dependencies.</p>
<p>The Spring team generally advocates setter injection, because large numbers of
constructor arguments can get unwieldy, especially when properties are optional. Setter
methods also make objects of that class amenable to reconfiguration or re-injection
later. Management through <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx" title="24. JMX">JMX MBeans</a> is a compelling use case.</p>
<p>Some purists favor constructor-based injection. Supplying all object dependencies means
that the object is always returned to client (calling) code in a totally initialized
state. The disadvantage is that the object becomes less amenable to reconfiguration and
re-injection.</p>
<p>Use the DI that makes the most sense for a particular class. Sometimes, when dealing
with third-party classes to which you do not have the source, the choice is made for
you. A legacy class may not expose any setter methods, and so constructor injection is
the only available DI.</p>
</div>

</div>
<div class="section" title="Dependency resolution process"><div class="titlepage"><div><div><h4 class="title"><a name="beans-dependency-resolution"></a>Dependency resolution process</h4></div></div></div>

<p>The container performs bean dependency resolution as follows:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
The <code class="literal">ApplicationContext</code> is created and initialized with configuration metadata that
describes all the beans. Configuration metadata can be specified via XML, Java code or
annotations.
</li><li class="listitem">
For each bean, its dependencies are expressed in the form of properties, constructor
arguments, or arguments to the static-factory method if you are using that instead of
a normal constructor. These dependencies are provided to the bean,<span class="emphasis"><em>when the bean is
actually created</em></span>.
</li><li class="listitem">
Each property or constructor argument is an actual definition of the value to set, or
a reference to another bean in the container.
</li><li class="listitem">
Each property or constructor argument which is a value is converted from its specified
format to the actual type of that property or constructor argument. By default Spring
can convert a value supplied in string format to all built-in types, such as <code class="literal">int</code>,
<code class="literal">long</code>, <code class="literal">String</code>, <code class="literal">boolean</code>, etc.
</li></ul></div>

<p>The Spring container validates the configuration of each bean as the container is
created, including the validation of whether bean reference properties refer to valid
beans. However, the bean properties themselves are not set until the bean <span class="emphasis"><em>is actually
created</em></span>. Beans that are singleton-scoped and set to be pre-instantiated (the default)
are created when the container is created. Scopes are defined in
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes" title="4.5 Bean scopes">Section&nbsp;4.5, “Bean scopes”</a> Otherwise, the bean is created only when it is requested.
Creation of a bean potentially causes a graph of beans to be created, as the bean’s
dependencies and its dependencies' dependencies (and so on) are created and assigned.</p>
<div class="sidebar" title="Circular dependencies"><p class="title"><b>Circular dependencies</b></p>

<p>If you use predominantly constructor injection, it is possible to create an unresolvable
circular dependency scenario.</p>
<p>For example: Class A requires an instance of class B through constructor injection, and
class B requires an instance of class A through constructor injection. If you configure
beans for classes A and B to be injected into each other, the Spring IoC container
detects this circular reference at runtime, and throws a
<code class="literal">BeanCurrentlyInCreationException</code>.</p>
<p>One possible solution is to edit the source code of some classes to be configured by
setters rather than constructors. Alternatively, avoid constructor injection and use
setter injection only. In other words, although it is not recommended, you can configure
circular dependencies with setter injection.</p>
<p>Unlike the <span class="emphasis"><em>typical</em></span> case (with no circular dependencies), a circular dependency
between bean A and bean B forces one of the beans to be injected into the other prior to
being fully initialized itself (a classic chicken/egg scenario).</p>
</div>

<p>You can generally trust Spring to do the right thing. It detects configuration problems,
such as references to non-existent beans and circular dependencies, at container
load-time. Spring sets properties and resolves dependencies as late as possible, when
the bean is actually created. This means that a Spring container which has loaded
correctly can later generate an exception when you request an object if there is a
problem creating that object or one of its dependencies. For example, the bean throws an
exception as a result of a missing or invalid property. This potentially delayed
visibility of some configuration issues is why <code class="literal">ApplicationContext</code> implementations by
default pre-instantiate singleton beans. At the cost of some upfront time and memory to
create these beans before they are actually needed, you discover configuration issues
when the <code class="literal">ApplicationContext</code> is created, not later. You can still override this default
behavior so that singleton beans will lazy-initialize, rather than be pre-instantiated.</p>
<p>If no circular dependencies exist, when one or more collaborating beans are being
injected into a dependent bean, each collaborating bean is <span class="emphasis"><em>totally</em></span> configured prior
to being injected into the dependent bean. This means that if bean A has a dependency on
bean B, the Spring IoC container completely configures bean B prior to invoking the
setter method on bean A. In other words, the bean is instantiated (if not a
pre-instantiated singleton), its dependencies are set, and the relevant lifecycle
methods (such as a <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks">configured init method</a>
or the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks">InitializingBean callback method</a>)
are invoked.</p>
</div>
<div class="section" title="Examples of dependency injection"><div class="titlepage"><div><div><h4 class="title"><a name="beans-some-examples"></a>Examples of dependency injection</h4></div></div></div>

<p>The following example uses XML-based configuration metadata for setter-based DI. A small
part of a Spring XML configuration file specifies some bean definitions:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- setter injection using the nested &lt;ref/&gt; element --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"beanOne"</span><span class="hl-tag">&gt;</span><span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"anotherExampleBean"</span><span class="hl-tag">/&gt;</span><span class="hl-tag">&lt;/property&gt;</span>

    <span class="hl-comment">&lt;!-- setter injection using the neater </span><span class="emphasis"><em>ref</em></span> attribute --&gt;
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"beanTwo"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"yetAnotherBean"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"integerProperty"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"1"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"anotherExampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.AnotherBean"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"yetAnotherBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.YetAnotherBean"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-keyword">private</span> AnotherBean beanOne;
    <span class="hl-keyword">private</span> YetAnotherBean beanTwo;
    <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> i;

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setBeanOne(AnotherBean beanOne) {
        <span class="hl-keyword">this</span>.beanOne = beanOne;
    }

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setBeanTwo(YetAnotherBean beanTwo) {
        <span class="hl-keyword">this</span>.beanTwo = beanTwo;
    }

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setIntegerProperty(<span class="hl-keyword">int</span> i) {
        <span class="hl-keyword">this</span>.i = i;
    }

}</pre>

<p>In the preceding example, setters are declared to match against the properties specified
in the XML file. The following example uses constructor-based DI:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- constructor injection using the nested &lt;ref/&gt; element --&gt;</span>
    <span class="hl-tag">&lt;constructor-arg&gt;</span>
        <span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"anotherExampleBean"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/constructor-arg&gt;</span>

    <span class="hl-comment">&lt;!-- constructor injection using the neater </span><span class="emphasis"><em>ref</em></span> attribute --&gt;
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"yetAnotherBean"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">type</span>=<span class="hl-value">"int"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"1"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"anotherExampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.AnotherBean"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"yetAnotherBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.YetAnotherBean"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-keyword">private</span> AnotherBean beanOne;
    <span class="hl-keyword">private</span> YetAnotherBean beanTwo;
    <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> i;

    <span class="hl-keyword">public</span> ExampleBean(
        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class="hl-keyword">int</span> i) {
        <span class="hl-keyword">this</span>.beanOne = anotherBean;
        <span class="hl-keyword">this</span>.beanTwo = yetAnotherBean;
        <span class="hl-keyword">this</span>.i = i;
    }

}</pre>

<p>The constructor arguments specified in the bean definition will be used as arguments to
the constructor of the <code class="literal">ExampleBean</code>.</p>
<p>Now consider a variant of this example, where instead of using a constructor, Spring is
told to call a <code class="literal">static</code> factory method to return an instance of the object:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span> <span class="hl-attribute">factory-method</span>=<span class="hl-value">"createInstance"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"anotherExampleBean"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"yetAnotherBean"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;constructor-arg</span> <span class="hl-attribute">value</span>=<span class="hl-value">"1"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"anotherExampleBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.AnotherBean"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"yetAnotherBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.YetAnotherBean"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-comment">// a private constructor</span>
    <span class="hl-keyword">private</span> ExampleBean(...) {
        ...
    }

    <span class="hl-comment">// a static factory method; the arguments to this method can be</span>
    <span class="hl-comment">// considered the dependencies of the bean that is returned,</span>
    <span class="hl-comment">// regardless of how those arguments are actually used.</span>
    <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> ExampleBean createInstance (
        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class="hl-keyword">int</span> i) {

        ExampleBean eb = <span class="hl-keyword">new</span> ExampleBean (...);
        <span class="hl-comment">// some other operations...</span>
        <span class="hl-keyword">return</span> eb;
    }

}</pre>

<p>Arguments to the <code class="literal">static</code> factory method are supplied via <code class="literal">&lt;constructor-arg/&gt;</code> elements,
exactly the same as if a constructor had actually been used. The type of the class being
returned by the factory method does not have to be of the same type as the class that
contains the <code class="literal">static</code> factory method, although in this example it is. An instance
(non-static) factory method would be used in an essentially identical fashion (aside
from the use of the <code class="literal">factory-bean</code> attribute instead of the <code class="literal">class</code> attribute), so
details will not be discussed here.</p>
</div>
</div>
<div class="section" title="4.4.2 Dependencies and configuration in detail"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-properties-detailed"></a>4.4.2&nbsp;Dependencies and configuration in detail</h3></div></div></div>

<p>As mentioned in the previous section, you can define bean properties and constructor
arguments as references to other managed beans (collaborators), or as values defined
inline. Spring’s XML-based configuration metadata supports sub-element types within its
<code class="literal">&lt;property/&gt;</code> and <code class="literal">&lt;constructor-arg/&gt;</code> elements for this purpose.</p>
<div class="section" title="Straight values (primitives, Strings, and so on)"><div class="titlepage"><div><div><h4 class="title"><a name="beans-value-element"></a>Straight values (primitives, Strings, and so on)</h4></div></div></div>

<p>The <code class="literal">value</code> attribute of the <code class="literal">&lt;property/&gt;</code> element specifies a property or constructor
argument as a human-readable string representation. Spring’s
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#core-convert-ConversionService-API" title="6.5.4 ConversionService API">conversion service</a> is used to convert these
values from a <code class="literal">String</code> to the actual type of the property or argument.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"myDataSource"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hl-attribute">destroy-method</span>=<span class="hl-value">"close"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"driverClassName"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"com.mysql.jdbc.Driver"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"url"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"jdbc:mysql://localhost:3306/mydb"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"username"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"root"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"password"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"masterkaoli"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The following example uses the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-p-namespace" title="XML shortcut with the p-namespace">p-namespace</a> for even more succinct
XML configuration.</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:p</span>=<span class="hl-value">"http://www.springframework.org/schema/p"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"myDataSource"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.apache.commons.dbcp.BasicDataSource"</span>
        <span class="hl-attribute">destroy-method</span>=<span class="hl-value">"close"</span>
        <span class="hl-attribute">p:driverClassName</span>=<span class="hl-value">"com.mysql.jdbc.Driver"</span>
        <span class="hl-attribute">p:url</span>=<span class="hl-value">"jdbc:mysql://localhost:3306/mydb"</span>
        <span class="hl-attribute">p:username</span>=<span class="hl-value">"root"</span>
        <span class="hl-attribute">p:password</span>=<span class="hl-value">"masterkaoli"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The preceding XML is more succinct; however, typos are discovered at runtime rather than
design time, unless you use an IDE such as <a class="ulink" href="http://www.jetbrains.com/idea/" target="_top">IntelliJ
IDEA</a> or the <a class="ulink" href="http://www.springsource.com/products/sts" target="_top">SpringSource Tool Suite</a> (STS)
that support automatic property completion when you create bean definitions. Such IDE
assistance is highly recommended.</p>
<p>You can also configure a <code class="literal">java.util.Properties</code> instance as:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"mappings"</span>
    <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="hl-tag">&gt;</span>

    <span class="hl-comment">&lt;!-- typed as a java.util.Properties --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"properties"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;value&gt;</span>
            jdbc.driver.className=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://localhost:3306/mydb
        <span class="hl-tag">&lt;/value&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The Spring container converts the text inside the <code class="literal">&lt;value/&gt;</code> element into a
<code class="literal">java.util.Properties</code> instance by using the JavaBeans <code class="literal">PropertyEditor</code> mechanism. This
is a nice shortcut, and is one of a few places where the Spring team do favor the use of
the nested <code class="literal">&lt;value/&gt;</code> element over the <code class="literal">value</code> attribute style.</p>
<div class="section" title="The idref element"><div class="titlepage"><div><div><h5 class="title"><a name="beans-idref-element"></a>The idref element</h5></div></div></div>

<p>The <code class="literal">idref</code> element is simply an error-proof way to pass the <span class="emphasis"><em>id</em></span> (string value - not
a reference) of another bean in the container to a <code class="literal">&lt;constructor-arg/&gt;</code> or <code class="literal">&lt;property/&gt;</code>
element.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"theTargetBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"theClientBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"targetName"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;idref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"theTargetBean"</span><span class="hl-tag"> /&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The above bean definition snippet is <span class="emphasis"><em>exactly</em></span> equivalent (at runtime) to the
following snippet:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"theTargetBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag"> /&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"client"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"targetName"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"theTargetBean"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The first form is preferable to the second, because using the <code class="literal">idref</code> tag allows the
container to validate <span class="emphasis"><em>at deployment time</em></span> that the referenced, named bean actually
exists. In the second variation, no validation is performed on the value that is passed
to the <code class="literal">targetName</code> property of the <code class="literal">client</code> bean. Typos are only discovered (with most
likely fatal results) when the <code class="literal">client</code> bean is actually instantiated. If the <code class="literal">client</code>
bean is a <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes" title="4.5 Bean scopes">prototype</a> bean, this typo and the resulting exception
may only be discovered long after the container is deployed.</p>
<p>Additionally, if the referenced bean is in the same XML unit, and the bean name is the
bean <span class="emphasis"><em>id</em></span>, you can use the <code class="literal">local</code> attribute, which allows the XML parser itself to
validate the bean id earlier, at XML document parse time.</p>
<pre class="programlisting"><span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"targetName"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- a bean with id </span><span class="emphasis"><em>theTargetBean</em></span> must exist; otherwise an exception will be thrown --&gt;
    <span class="hl-tag">&lt;idref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"theTargetBean"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/property&gt;</span></pre>

<p>A common place (at least in versions earlier than Spring 2.0) where the <code class="literal">&lt;idref/&gt;</code> element
brings value is in the configuration of <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-1" title="9.5.1 Basics">AOP interceptors</a> in a
<code class="literal">ProxyFactoryBean</code> bean definition. Using <code class="literal">&lt;idref/&gt;</code> elements when you specify the
interceptor names prevents you from misspelling an interceptor id.</p>
</div>
</div>
<div class="section" title="References to other beans (collaborators)"><div class="titlepage"><div><div><h4 class="title"><a name="beans-ref-element"></a>References to other beans (collaborators)</h4></div></div></div>

<p>The <code class="literal">ref</code> element is the final element inside a <code class="literal">&lt;constructor-arg/&gt;</code> or <code class="literal">&lt;property/&gt;</code>
definition element. Here you set the value of the specified property of a bean to be a
reference to another bean (a collaborator) managed by the container. The referenced bean
is a dependency of the bean whose property will be set, and it is initialized on demand
as needed before the property is set. (If the collaborator is a singleton bean, it may
be initialized already by the container.) All references are ultimately a reference to
another object. Scoping and validation depend on whether you specify the id/name of the
other object through the <code class="literal">bean</code>, <code class="literal">local,</code> or <code class="literal">parent</code> attributes.</p>
<p>Specifying the target bean through the <code class="literal">bean</code> attribute of the <code class="literal">&lt;ref/&gt;</code> tag is the most
general form, and allows creation of a reference to any bean in the same container or
parent container, regardless of whether it is in the same XML file. The value of the
<code class="literal">bean</code> attribute may be the same as the <code class="literal">id</code> attribute of the target bean, or as one of
the values in the <code class="literal">name</code> attribute of the target bean.</p>
<pre class="programlisting"><span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"someBean"</span><span class="hl-tag">/&gt;</span></pre>

<p>Specifying the target bean through the <code class="literal">local</code> attribute leverages the ability of the
XML parser to validate XML id references within the same file. The value of the <code class="literal">local</code>
attribute must be the same as the <code class="literal">id</code> attribute of the target bean. The XML parser
issues an error if no matching element is found in the same file. As such, using the
local variant is the best choice (in order to know about errors as early as possible) if
the target bean is in the same XML file.</p>
<pre class="programlisting"><span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"someBean"</span><span class="hl-tag">/&gt;</span></pre>

<p>Specifying the target bean through the <code class="literal">parent</code> attribute creates a reference to a bean
that is in a parent container of the current container. The value of the <code class="literal">parent</code>
attribute may be the same as either the <code class="literal">id</code> attribute of the target bean, or one of the
values in the <code class="literal">name</code> attribute of the target bean, and the target bean must be in a
parent container of the current one. You use this bean reference variant mainly when you
have a hierarchy of containers and you want to wrap an existing bean in a parent
container with a proxy that will have the same name as the parent bean.</p>
<pre class="programlisting"><span class="hl-comment">&lt;!-- in the parent context --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.SimpleAccountService"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- insert dependencies as required as here --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<pre class="programlisting"><span class="hl-comment">&lt;!-- in the child (descendant) context --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span> <span class="hl-attribute">&lt;--</span> <span class="hl-attribute">bean</span> <span class="hl-attribute">name</span> <span class="hl-attribute">is</span> <span class="hl-attribute">the</span> <span class="hl-attribute">same</span> <span class="hl-attribute">as</span> <span class="hl-attribute">the</span> <span class="hl-attribute">parent</span> <span class="hl-attribute">bean</span> <span class="hl-attribute">--&gt;</span>
    <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.aop.framework.ProxyFactoryBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"target"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;ref</span> <span class="hl-attribute">parent</span>=<span class="hl-value">"accountService"</span><span class="hl-tag">/&gt;</span> <span class="hl-comment">&lt;!-- notice how we refer to the parent bean --&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-comment">&lt;!-- insert other configuration and dependencies as required here --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

</div>
<div class="section" title="Inner beans"><div class="titlepage"><div><div><h4 class="title"><a name="beans-inner-beans"></a>Inner beans</h4></div></div></div>

<p>A <code class="literal">&lt;bean/&gt;</code> element inside the <code class="literal">&lt;property/&gt;</code> or <code class="literal">&lt;constructor-arg/&gt;</code> elements defines a
so-called <span class="emphasis"><em>inner bean</em></span>.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"outer"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"target"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.Person"</span><span class="hl-tag">&gt;</span> <span class="hl-comment">&lt;!-- this is the inner bean --&gt;</span>
            <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Fiona Apple"</span><span class="hl-tag">/&gt;</span>
            <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"age"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"25"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;/bean&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>An inner bean definition does not require a defined id or name; the container ignores
these values. It also ignores the <code class="literal">scope</code> flag. Inner beans are <span class="emphasis"><em>always</em></span> anonymous and
they are <span class="emphasis"><em>always</em></span> created with the outer bean. It is <span class="emphasis"><em>not</em></span> possible to inject inner
beans into collaborating beans other than into the enclosing bean.</p>
</div>
<div class="section" title="Collections"><div class="titlepage"><div><div><h4 class="title"><a name="beans-collection-elements"></a>Collections</h4></div></div></div>

<p>In the <code class="literal">&lt;list/&gt;</code>, <code class="literal">&lt;set/&gt;</code>, <code class="literal">&lt;map/&gt;</code>, and <code class="literal">&lt;props/&gt;</code> elements, you set the properties
and arguments of the Java <code class="literal">Collection</code> types <code class="literal">List</code>, <code class="literal">Set</code>, <code class="literal">Map</code>, and <code class="literal">Properties</code>,
respectively.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"moreComplexObject"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.ComplexObject"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"adminEmails"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;props&gt;</span>
            <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"administrator"</span><span class="hl-tag">&gt;</span>administrator@example.org<span class="hl-tag">&lt;/prop&gt;</span>
            <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"support"</span><span class="hl-tag">&gt;</span>support@example.org<span class="hl-tag">&lt;/prop&gt;</span>
            <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"development"</span><span class="hl-tag">&gt;</span>development@example.org<span class="hl-tag">&lt;/prop&gt;</span>
        <span class="hl-tag">&lt;/props&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-comment">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"someList"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;list&gt;</span>
            <span class="hl-tag">&lt;value&gt;</span>a list element followed by a reference<span class="hl-tag">&lt;/value&gt;</span>
            <span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"myDataSource"</span><span class="hl-tag"> /&gt;</span>
        <span class="hl-tag">&lt;/list&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-comment">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"someMap"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;map&gt;</span>
            <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span>=<span class="hl-value">"an entry"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"just some string"</span><span class="hl-tag">/&gt;</span>
            <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span> =<span class="hl-value">"a ref"</span> <span class="hl-attribute">value-ref</span>=<span class="hl-value">"myDataSource"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;/map&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-comment">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"someSet"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;set&gt;</span>
            <span class="hl-tag">&lt;value&gt;</span>just some string<span class="hl-tag">&lt;/value&gt;</span>
            <span class="hl-tag">&lt;ref</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"myDataSource"</span><span class="hl-tag"> /&gt;</span>
        <span class="hl-tag">&lt;/set&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p><span class="emphasis"><em>The value of a map key or value, or a set value, can also again be any of the
following elements:</em></span></p>
<pre class="programlisting">bean | ref | idref | list | set | map | props | value | null</pre>

<div class="section" title="Collection merging"><div class="titlepage"><div><div><h5 class="title"><a name="beans-collection-elements-merging"></a>Collection merging</h5></div></div></div>

<p>The Spring container also supports the <span class="emphasis"><em>merging</em></span> of collections. An application
developer can define a parent-style <code class="literal">&lt;list/&gt;</code>, <code class="literal">&lt;map/&gt;</code>, <code class="literal">&lt;set/&gt;</code> or <code class="literal">&lt;props/&gt;</code> element,
and have child-style <code class="literal">&lt;list/&gt;</code>, <code class="literal">&lt;map/&gt;</code>, <code class="literal">&lt;set/&gt;</code> or <code class="literal">&lt;props/&gt;</code> elements inherit and
override values from the parent collection. That is, the child collection’s values are
the result of merging the elements of the parent and child collections, with the child’s
collection elements overriding values specified in the parent collection.</p>
<p><span class="emphasis"><em>This section on merging discusses the parent-child bean mechanism. Readers unfamiliar
with parent and child bean definitions may wish to read the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title="4.7 Bean definition inheritance">relevant section</a> before continuing.</em></span></p>
<p>The following example demonstrates collection merging:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"parent"</span> <span class="hl-attribute">abstract</span>=<span class="hl-value">"true"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.ComplexObject"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"adminEmails"</span><span class="hl-tag">&gt;</span>
            <span class="hl-tag">&lt;props&gt;</span>
                <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"administrator"</span><span class="hl-tag">&gt;</span>administrator@example.com<span class="hl-tag">&lt;/prop&gt;</span>
                <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"support"</span><span class="hl-tag">&gt;</span>support@example.com<span class="hl-tag">&lt;/prop&gt;</span>
            <span class="hl-tag">&lt;/props&gt;</span>
        <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"child"</span> <span class="hl-attribute">parent</span>=<span class="hl-value">"parent"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"adminEmails"</span><span class="hl-tag">&gt;</span>
            <span class="hl-comment">&lt;!-- the merge is specified on the </span><span class="strong"><strong>child</strong></span> collection definition --&gt;
            <span class="hl-tag">&lt;props</span> <span class="hl-attribute">merge</span>=<span class="hl-value">"true"</span><span class="hl-tag">&gt;</span>
                <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"sales"</span><span class="hl-tag">&gt;</span>sales@example.com<span class="hl-tag">&lt;/prop&gt;</span>
                <span class="hl-tag">&lt;prop</span> <span class="hl-attribute">key</span>=<span class="hl-value">"support"</span><span class="hl-tag">&gt;</span>support@example.co.uk<span class="hl-tag">&lt;/prop&gt;</span>
            <span class="hl-tag">&lt;/props&gt;</span>
        <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;beans&gt;</span></pre>

<p>Notice the use of the <code class="literal">merge=true</code> attribute on the <code class="literal">&lt;props/&gt;</code> element of the
<code class="literal">adminEmails</code> property of the <code class="literal">child</code> bean definition. When the <code class="literal">child</code> bean is resolved
and instantiated by the container, the resulting instance has an <code class="literal">adminEmails</code>
<code class="literal">Properties</code> collection that contains the result of the merging of the child’s
<code class="literal">adminEmails</code> collection with the parent’s <code class="literal">adminEmails</code> collection.</p>

<pre class="literallayout">administrator=administrator@example.com
sales=sales@example.com
support=support@example.co.uk</pre>

<p>The child <code class="literal">Properties</code> collection’s value set inherits all property elements from the
parent <code class="literal">&lt;props/&gt;</code>, and the child’s value for the <code class="literal">support</code> value overrides the value in
the parent collection.</p>
<p>This merging behavior applies similarly to the <code class="literal">&lt;list/&gt;</code>, <code class="literal">&lt;map/&gt;</code>, and <code class="literal">&lt;set/&gt;</code>
collection types. In the specific case of the <code class="literal">&lt;list/&gt;</code> element, the semantics
associated with the <code class="literal">List</code> collection type, that is, the notion of an <code class="literal">ordered</code>
collection of values, is maintained; the parent’s values precede all of the child list’s
values. In the case of the <code class="literal">Map</code>, <code class="literal">Set</code>, and <code class="literal">Properties</code> collection types, no ordering
exists. Hence no ordering semantics are in effect for the collection types that underlie
the associated <code class="literal">Map</code>, <code class="literal">Set</code>, and <code class="literal">Properties</code> implementation types that the container
uses internally.</p>
</div>
<div class="section" title="Limitations of collection merging"><div class="titlepage"><div><div><h5 class="title"><a name="beans-collection-merge-limitations"></a>Limitations of collection merging</h5></div></div></div>

<p>You cannot merge different collection types (such as a <code class="literal">Map</code> and a <code class="literal">List</code>), and if you
do attempt to do so an appropriate <code class="literal">Exception</code> is thrown. The <code class="literal">merge</code> attribute must be
specified on the lower, inherited, child definition; specifying the <code class="literal">merge</code> attribute on
a parent collection definition is redundant and will not result in the desired merging.</p>
</div>
<div class="section" title="Strongly-typed collection"><div class="titlepage"><div><div><h5 class="title"><a name="beans-collection-elements-strongly-typed"></a>Strongly-typed collection</h5></div></div></div>

<p>With the introduction of generic types in Java 5, you can use strongly typed collections.
That is, it is possible to declare a <code class="literal">Collection</code> type such that it can only contain
<code class="literal">String</code> elements (for example). If you are using Spring to dependency-inject a
strongly-typed <code class="literal">Collection</code> into a bean, you can take advantage of Spring’s
type-conversion support such that the elements of your strongly-typed <code class="literal">Collection</code>
instances are converted to the appropriate type prior to being added to the <code class="literal">Collection</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Foo {

    <span class="hl-keyword">private</span> Map&lt;String, Float&gt; accounts;

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setAccounts(Map&lt;String, Float&gt; accounts) {
        <span class="hl-keyword">this</span>.accounts = accounts;
    }
}</pre>

<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"foo"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Foo"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"accounts"</span><span class="hl-tag">&gt;</span>
            <span class="hl-tag">&lt;map&gt;</span>
                <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span>=<span class="hl-value">"one"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"9.99"</span><span class="hl-tag">/&gt;</span>
                <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span>=<span class="hl-value">"two"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"2.75"</span><span class="hl-tag">/&gt;</span>
                <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span>=<span class="hl-value">"six"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"3.99"</span><span class="hl-tag">/&gt;</span>
            <span class="hl-tag">&lt;/map&gt;</span>
        <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>When the <code class="literal">accounts</code> property of the <code class="literal">foo</code> bean is prepared for injection, the generics
information about the element type of the strongly-typed <code class="literal">Map&lt;String, Float&gt;</code> is
available by reflection. Thus Spring’s type conversion infrastructure recognizes the
various value elements as being of type <code class="literal">Float</code>, and the string values <code class="literal">9.99, 2.75</code>, and
<code class="literal">3.99</code> are converted into an actual <code class="literal">Float</code> type.</p>
</div>
</div>
<div class="section" title="Null and empty string values"><div class="titlepage"><div><div><h4 class="title"><a name="beans-null-element"></a>Null and empty string values</h4></div></div></div>

<p>Spring treats empty arguments for properties and the like as empty <code class="literal">Strings</code>. The
following XML-based configuration metadata snippet sets the email property to the empty
<code class="literal">String</code> value ("")</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"email"</span> <span class="hl-attribute">value</span>=<span class="hl-value">""</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The preceding example is equivalent to the following Java code:
<code class="literal">exampleBean.setEmail("")</code>. The <code class="literal">&lt;null/&gt;</code> element handles <code class="literal">null</code> values. For example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"ExampleBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"email"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;null/&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The above configuration is equivalent to the following Java code:
<code class="literal">exampleBean.setEmail(null)</code>.</p>
</div>
<div class="section" title="XML shortcut with the p-namespace"><div class="titlepage"><div><div><h4 class="title"><a name="beans-p-namespace"></a>XML shortcut with the p-namespace</h4></div></div></div>

<p>The p-namespace enables you to use the <code class="literal">bean</code> element’s attributes, instead of nested
<code class="literal">&lt;property/&gt;</code> elements, to describe your property values and/or collaborating beans.</p>
<p>Spring supports extensible configuration formats <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config" title="33. XML Schema-based configuration">with namespaces</a>, which are
based on an XML Schema definition. The <code class="literal">beans</code> configuration format discussed in this
chapter is defined in an XML Schema document. However, the p-namespace is not defined in
an XSD file and exists only in the core of Spring.</p>
<p>The following example shows two XML snippets that resolve to the same result: The first
uses standard XML format and the second uses the p-namespace.</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:p</span>=<span class="hl-value">"http://www.springframework.org/schema/p"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"classic"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.ExampleBean"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"email"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"foo@bar.com"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"p-namespace"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.ExampleBean"</span>
        <span class="hl-attribute">p:email</span>=<span class="hl-value">"foo@bar.com"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The example shows an attribute in the p-namespace called email in the bean definition.
This tells Spring to include a property declaration. As previously mentioned, the
p-namespace does not have a schema definition, so you can set the name of the attribute
to the property name.</p>
<p>This next example includes two more bean definitions that both have a reference to
another bean:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:p</span>=<span class="hl-value">"http://www.springframework.org/schema/p"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"john-classic"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.Person"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"John Doe"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"spouse"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"jane"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"john-modern"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.Person"</span>
        <span class="hl-attribute">p:name</span>=<span class="hl-value">"John Doe"</span>
        <span class="hl-attribute">p:spouse-ref</span>=<span class="hl-value">"jane"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"jane"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.example.Person"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Jane Doe"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>As you can see, this example includes not only a property value using the p-namespace,
but also uses a special format to declare property references. Whereas the first bean
definition uses <code class="literal">&lt;property name="spouse" ref="jane"/&gt;</code> to create a reference from bean
<code class="literal">john</code> to bean <code class="literal">jane</code>, the second bean definition uses <code class="literal">p:spouse-ref="jane"</code> as an
attribute to do the exact same thing. In this case <code class="literal">spouse</code> is the property name,
whereas the <code class="literal">-ref</code> part indicates that this is not a straight value but rather a
reference to another bean.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The p-namespace is not as flexible as the standard XML format. For example, the format
for declaring property references clashes with properties that end in <code class="literal">Ref</code>, whereas the
standard XML format does not. We recommend that you choose your approach carefully and
communicate this to your team members, to avoid producing XML documents that use all
three approaches at the same time.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="XML shortcut with the c-namespace"><div class="titlepage"><div><div><h4 class="title"><a name="beans-c-namespace"></a>XML shortcut with the c-namespace</h4></div></div></div>

<p>Similar to the <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-p-namespace" title="XML shortcut with the p-namespace">the section called “XML shortcut with the p-namespace”</a>, the <span class="emphasis"><em>c-namespace</em></span>, newly introduced in Spring
3.1, allows usage of inlined attributes for configuring the constructor arguments rather
then nested <code class="literal">constructor-arg</code> elements.</p>
<p>Let’s review the examples from <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-constructor-injection" title="Constructor-based dependency injection">the section called “Constructor-based dependency injection”</a> with the <code class="literal">c</code> namespace:</p>
<pre class="programlisting">&lt;beans xmlns=<span class="hl-string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="hl-string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns:c=<span class="hl-string">"http://www.springframework.org/schema/c"</span>
    xsi:schemaLocation=<span class="hl-string">"http://www.springframework.org/schema/beans
</span>        http:<span class="hl-comment">//www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span>

    &lt;bean id=<span class="hl-string">"bar"</span> <span class="hl-keyword">class</span>=<span class="hl-string">"x.y.Bar"</span>/&gt;
    &lt;bean id=<span class="hl-string">"baz"</span> <span class="hl-keyword">class</span>=<span class="hl-string">"x.y.Baz"</span>/&gt;

    &lt;-- <span class="emphasis"><em>traditional</em></span> declaration --&gt;
    &lt;bean id=<span class="hl-string">"foo"</span> <span class="hl-keyword">class</span>=<span class="hl-string">"x.y.Foo"</span>&gt;
        &lt;constructor-arg ref=<span class="hl-string">"bar"</span>/&gt;
        &lt;constructor-arg ref=<span class="hl-string">"baz"</span>/&gt;
        &lt;constructor-arg value=<span class="hl-string">"foo@bar.com"</span>/&gt;
    &lt;/bean&gt;

    &lt;-- <span class="emphasis"><em>c-namespace</em></span> declaration --&gt;
    &lt;bean id=<span class="hl-string">"foo"</span> <span class="hl-keyword">class</span>=<span class="hl-string">"x.y.Foo"</span> c:bar-ref=<span class="hl-string">"bar"</span> c:baz-ref=<span class="hl-string">"baz"</span> c:email=<span class="hl-string">"foo@bar.com"</span>&gt;

&lt;/beans&gt;</pre>

<p>The <code class="literal">c:</code> namespace uses the same conventions as the <code class="literal">p:</code> one (trailing <code class="literal">-ref</code> for bean
references) for setting the constructor arguments by their names. And just as well, it
needs to be declared even though it is not defined in an XSD schema (but it exists
inside the Spring core).</p>
<p>For the rare cases where the constructor argument names are not available (usually if
the bytecode was compiled without debugging information), one can use fallback to the
argument indexes:</p>
<pre class="programlisting">&lt;-- <span class="emphasis"><em>c-namespace</em></span> index declaration --&gt;
&lt;bean id=<span class="hl-string">"foo"</span> <span class="hl-keyword">class</span>=<span class="hl-string">"x.y.Foo"</span> c:_<span class="hl-number">0</span>-ref=<span class="hl-string">"bar"</span> c:_<span class="hl-number">1</span>-ref=<span class="hl-string">"baz"</span>&gt;</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Due to the XML grammar, the index notation requires the presence of the leading <code class="literal">_</code> as
XML attribute names cannot start with a number (even though some IDE allow it).</p>
</td></tr></tbody></table></div>

<p>In practice, the constructor resolution
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-ctor-arguments-resolution" title="Constructor argument resolution">mechanism</a> is quite efficient in matching
arguments so unless one really needs to, we recommend using the name notation
through-out your configuration.</p>
</div>
<div class="section" title="Compound property names"><div class="titlepage"><div><div><h4 class="title"><a name="beans-compound-property-names"></a>Compound property names</h4></div></div></div>

<p>You can use compound or nested property names when you set bean properties, as long as
all components of the path except the final property name are not <code class="literal">null</code>. Consider the
following bean definition.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"foo"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"foo.Bar"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"fred.bob.sammy"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"123"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The <code class="literal">foo</code> bean has a <code class="literal">fred</code> property, which has a <code class="literal">bob</code> property, which has a <code class="literal">sammy</code>
property, and that final <code class="literal">sammy</code> property is being set to the value <code class="literal">123</code>. In order for
this to work, the <code class="literal">fred</code> property of <code class="literal">foo</code>, and the <code class="literal">bob</code> property of <code class="literal">fred</code> must not be
<code class="literal">null</code> after the bean is constructed, or a <code class="literal">NullPointerException</code> is thrown.</p>
</div>
</div>
<div class="section" title="4.4.3 Using depends-on"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-dependson"></a>4.4.3&nbsp;Using depends-on</h3></div></div></div>

<p>If a bean is a dependency of another that usually means that one bean is set as a
property of another. Typically you accomplish this with the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-ref-element" title="References to other beans (collaborators)"><code class="literal">&lt;ref/&gt;</code>
element</a> in XML-based configuration metadata. However, sometimes dependencies between
beans are less direct; for example, a static initializer in a class needs to be
triggered, such as database driver registration. The <code class="literal">depends-on</code> attribute can
explicitly force one or more beans to be initialized before the bean using this element
is initialized. The following example uses the <code class="literal">depends-on</code> attribute to express a
dependency on a single bean:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"beanOne"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"ExampleBean"</span> <span class="hl-attribute">depends-on</span>=<span class="hl-value">"</span><span class="strong"><strong>manager</strong></span>"/&gt;
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"</span><span class="strong"><strong>manager</strong></span>" class="ManagerBean" /&gt;</pre>

<p>To express a dependency on multiple beans, supply a list of bean names as the value of
the <code class="literal">depends-on</code> attribute, with commas, whitespace and semicolons, used as valid
delimiters:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"beanOne"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"ExampleBean"</span> <span class="hl-attribute">depends-on</span>=<span class="hl-value">"manager,accountDao"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"manager"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"manager"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"manager"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"ManagerBean"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountDao"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.jdbc.JdbcAccountDao"</span><span class="hl-tag"> /&gt;</span></pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The <code class="literal">depends-on</code> attribute in the bean definition can specify both an initialization
time dependency and, in the case of <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" title="4.5.1 The singleton scope">singleton</a> beans
only, a corresponding destroy time dependency. Dependent beans that define a
<code class="literal">depends-on</code> relationship with a given bean are destroyed first, prior to the given bean
itself being destroyed. Thus <code class="literal">depends-on</code> can also control shutdown order.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="4.4.4 Lazy-initialized beans"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-lazy-init"></a>4.4.4&nbsp;Lazy-initialized beans</h3></div></div></div>

<p>By default, <code class="literal">ApplicationContext</code> implementations eagerly create and configure all
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" title="4.5.1 The singleton scope">singleton</a> beans as part of the initialization
process. Generally, this pre-instantiation is desirable, because errors in the
configuration or surrounding environment are discovered immediately, as opposed to hours
or even days later. When this behavior is <span class="emphasis"><em>not</em></span> desirable, you can prevent
pre-instantiation of a singleton bean by marking the bean definition as
lazy-initialized. A lazy-initialized bean tells the IoC container to create a bean
instance when it is first requested, rather than at startup.</p>
<p>In XML, this behavior is controlled by the <code class="literal">lazy-init</code> attribute on the <code class="literal">&lt;bean/&gt;</code>
element; for example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"lazy"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.ExpensiveToCreateBean"</span> <span class="strong"><strong>lazy-init="true"</strong></span>/&gt;
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">name</span>=<span class="hl-value">"not.lazy"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.AnotherBean"</span><span class="hl-tag">/&gt;</span></pre>

<p>When the preceding configuration is consumed by an <code class="literal">ApplicationContext</code>, the bean named
<code class="literal">lazy</code> is not eagerly pre-instantiated when the <code class="literal">ApplicationContext</code> is starting up,
whereas the <code class="literal">not.lazy</code> bean is eagerly pre-instantiated.</p>
<p>However, when a lazy-initialized bean is a dependency of a singleton bean that is
<span class="emphasis"><em>not</em></span> lazy-initialized, the <code class="literal">ApplicationContext</code> creates the lazy-initialized bean at
startup, because it must satisfy the singleton’s dependencies. The lazy-initialized bean
is injected into a singleton bean elsewhere that is not lazy-initialized.</p>
<p>You can also control lazy-initialization at the container level by using the
<code class="literal">default-lazy-init</code> attribute on the <code class="literal">&lt;beans/&gt;</code> element; for example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans</span> <span class="hl-attribute">default-lazy-init</span>=<span class="hl-value">"true"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- no beans will be pre-instantiated... --&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

</div>
<div class="section" title="4.4.5 Autowiring collaborators"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-autowire"></a>4.4.5&nbsp;Autowiring collaborators</h3></div></div></div>

<p>The Spring container can <span class="emphasis"><em>autowire</em></span> relationships between collaborating beans. You can
allow Spring to resolve collaborators (other beans) automatically for your bean by
inspecting the contents of the <code class="literal">ApplicationContext</code>. Autowiring has the following
advantages:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Autowiring can significantly reduce the need to specify properties or constructor
arguments. (Other mechanisms such as a bean template
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title="4.7 Bean definition inheritance">discussed elsewhere in this chapter</a> are also valuable
in this regard.)
</li><li class="listitem">
Autowiring can update a configuration as your objects evolve. For example, if you need
to add a dependency to a class, that dependency can be satisfied automatically without
you needing to modify the configuration. Thus autowiring can be especially useful
during development, without negating the option of switching to explicit wiring when
the code base becomes more stable.
</li></ul></div>

<p>When using XML-based configuration metadata <sup>[<a name="d4e1460" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#ftn.d4e1460" class="footnote">2</a>]</sup>, you specify autowire
mode for a bean definition with the <code class="literal">autowire</code> attribute of the <code class="literal">&lt;bean/&gt;</code> element. The
autowiring functionality has five modes. You specify autowiring <span class="emphasis"><em>per</em></span> bean and thus
can choose which ones to autowire.</p>
<div class="table"><a name="beans-factory-autowiring-modes-tbl"></a><p class="title"><b>Table&nbsp;4.2.&nbsp;Autowiring modes</b></p><div class="table-contents">

  <table summary="Autowiring modes" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Mode</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">Explanation</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>no</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>(Default) No autowiring. Bean references must be defined via a <code class="literal">ref</code> element. Changing
  the default setting is not recommended for larger deployments, because specifying
  collaborators explicitly gives greater control and clarity. To some extent, it
  documents the structure of a system.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>byName</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Autowiring by property name. Spring looks for a bean with the same name as the
  property that needs to be autowired. For example, if a bean definition is set to
  autowire by name, and it contains a <span class="emphasis"><em>master</em></span> property (that is, it has a
  <span class="emphasis"><em>setMaster(..)</em></span> method), Spring looks for a bean definition named <code class="literal">master</code>, and uses
  it to set the property.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>byType</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Allows a property to be autowired if exactly one bean of the property type exists in
  the container. If more than one exists, a fatal exception is thrown, which indicates
  that you may not use <span class="emphasis"><em>byType</em></span> autowiring for that bean. If there are no matching
  beans, nothing happens; the property is not set.</p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>constructor</p></td><td style="" align="left" valign="top"><p>Analogous to <span class="emphasis"><em>byType</em></span>, but applies to constructor arguments. If there is not exactly
  one bean of the constructor argument type in the container, a fatal error is raised.</p></td></tr></tbody></table>
</div></div><br class="table-break">

<p>With <span class="emphasis"><em>byType</em></span> or <span class="emphasis"><em>constructor</em></span> autowiring mode, you can wire arrays and
typed-collections. In such cases <span class="emphasis"><em>all</em></span> autowire candidates within the container that
match the expected type are provided to satisfy the dependency. You can autowire
strongly-typed Maps if the expected key type is <code class="literal">String</code>. An autowired Maps values will
consist of all bean instances that match the expected type, and the Maps keys will
contain the corresponding bean names.</p>
<p>You can combine autowire behavior with dependency checking, which is performed after
autowiring completes.</p>
<div class="section" title="Limitations and disadvantages of autowiring"><div class="titlepage"><div><div><h4 class="title"><a name="beans-autowired-exceptions"></a>Limitations and disadvantages of autowiring</h4></div></div></div>

<p>Autowiring works best when it is used consistently across a project. If autowiring is
not used in general, it might be confusing to developers to use it to wire only one or
two bean definitions.</p>
<p>Consider the limitations and disadvantages of autowiring:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Explicit dependencies in <code class="literal">property</code> and <code class="literal">constructor-arg</code> settings always override
autowiring. You cannot autowire so-called <span class="emphasis"><em>simple</em></span> properties such as primitives,
<code class="literal">Strings</code>, and <code class="literal">Classes</code> (and arrays of such simple properties). This limitation is
by-design.
</li><li class="listitem">
Autowiring is less exact than explicit wiring. Although, as noted in the above table,
Spring is careful to avoid guessing in case of ambiguity that might have unexpected
results, the relationships between your Spring-managed objects are no longer
documented explicitly.
</li><li class="listitem">
Wiring information may not be available to tools that may generate documentation from
a Spring container.
</li><li class="listitem">
Multiple bean definitions within the container may match the type specified by the
setter method or constructor argument to be autowired. For arrays, collections, or
Maps, this is not necessarily a problem. However for dependencies that expect a single
value, this ambiguity is not arbitrarily resolved. If no unique bean definition is
available, an exception is thrown.
</li></ul></div>

<p>In the latter scenario, you have several options:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Abandon autowiring in favor of explicit wiring.
</li><li class="listitem">
Avoid autowiring for a bean definition by setting its <code class="literal">autowire-candidate</code> attributes
to <code class="literal">false</code> as described in the next section.
</li><li class="listitem">
Designate a single bean definition as the <span class="emphasis"><em>primary</em></span> candidate by setting the
<code class="literal">primary</code> attribute of its <code class="literal">&lt;bean/&gt;</code> element to <code class="literal">true</code>.
</li><li class="listitem">
Implement the more fine-grained control available
with annotation-based configuration, as described in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config" title="4.9 Annotation-based container configuration">Section&nbsp;4.9, “Annotation-based container configuration”</a>.
</li></ul></div>

</div>
<div class="section" title="Excluding a bean from autowiring"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-autowire-candidate"></a>Excluding a bean from autowiring</h4></div></div></div>

<p>On a per-bean basis, you can exclude a bean from autowiring. In Spring’s XML format, set
the <code class="literal">autowire-candidate</code> attribute of the <code class="literal">&lt;bean/&gt;</code> element to <code class="literal">false</code>; the container
makes that specific bean definition unavailable to the autowiring infrastructure
(including annotation style configurations such as <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation" title="4.9.2 @Autowired"><code class="literal">@Autowired</code></a>).</p>
<p>You can also limit autowire candidates based on pattern-matching against bean names. The
top-level <code class="literal">&lt;beans/&gt;</code> element accepts one or more patterns within its
<code class="literal">default-autowire-candidates</code> attribute. For example, to limit autowire candidate status
to any bean whose name ends with <span class="emphasis"><em>Repository,</em></span> provide a value of *Repository. To
provide multiple patterns, define them in a comma-separated list. An explicit value of
<code class="literal">true</code> or <code class="literal">false</code> for a bean definitions <code class="literal">autowire-candidate</code> attribute always takes
precedence, and for such beans, the pattern matching rules do not apply.</p>
<p>These techniques are useful for beans that you never want to be injected into other
beans by autowiring. It does not mean that an excluded bean cannot itself be configured
using autowiring. Rather, the bean itself is not a candidate for autowiring other beans.</p>
</div>
</div>
<div class="section" title="4.4.6 Method injection"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-method-injection"></a>4.4.6&nbsp;Method injection</h3></div></div></div>

<p>In most application scenarios, most beans in the container are
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" title="4.5.1 The singleton scope">singletons</a>. When a singleton bean needs to
collaborate with another singleton bean, or a non-singleton bean needs to collaborate
with another non-singleton bean, you typically handle the dependency by defining one
bean as a property of the other. A problem arises when the bean lifecycles are
different. Suppose singleton bean A needs to use non-singleton (prototype) bean B,
perhaps on each method invocation on A. The container only creates the singleton bean A
once, and thus only gets one opportunity to set the properties. The container cannot
provide bean A with a new instance of bean B every time one is needed.</p>
<p>A solution is to forego some inversion of control. You can <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">make
bean A aware of the container</a> by implementing the <code class="literal">ApplicationContextAware</code> interface,
and by <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-client" title="4.2.3 Using the container">making a getBean("B") call to the container</a> ask for (a
typically new) bean B instance every time bean A needs it. The following is an example
of this approach:</p>
<pre class="programlisting"><span class="hl-comment">// a class that uses a stateful Command-style class to perform some processing</span>
<span class="hl-keyword">package</span> fiona.apple;

<span class="hl-comment">// Spring-API imports</span>
<span class="hl-keyword">import</span> org.springframework.beans.BeansException;
<span class="hl-keyword">import</span> org.springframework.context.ApplicationContext;
<span class="hl-keyword">import</span> org.springframework.context.ApplicationContextAware;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> CommandManager <span class="hl-keyword">implements</span> ApplicationContextAware {

    <span class="hl-keyword">private</span> ApplicationContext applicationContext;

    <span class="hl-keyword">public</span> Object process(Map commandState) {
        <span class="hl-comment">// grab a new instance of the appropriate Command</span>
        Command command = createCommand();
        <span class="hl-comment">// set the state on the (hopefully brand new) Command instance</span>
        command.setState(commandState);
        <span class="hl-keyword">return</span> command.execute();
    }

    <span class="hl-keyword">protected</span> Command createCommand() {
        <span class="hl-comment">// notice the Spring API dependency!</span>
        <span class="hl-keyword">return</span> <span class="hl-keyword">this</span>.applicationContext.getBean(<span class="hl-string">"command"</span>, Command.<span class="hl-keyword">class</span>);
    }

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setApplicationContext(
            ApplicationContext applicationContext) <span class="hl-keyword">throws</span> BeansException {
        <span class="hl-keyword">this</span>.applicationContext = applicationContext;
    }
}</pre>

<p>The preceding is not desirable, because the business code is aware of and coupled to the
Spring Framework. Method Injection, a somewhat advanced feature of the Spring IoC
container, allows this use case to be handled in a clean fashion.</p>
<div class="sidebar"><p class="title"><b></b></p>
<p>You can read more about the motivation for Method Injection in
<a class="ulink" href="http://blog.springsource.com/2004/08/06/method-injection/" target="_top">this blog entry</a>.</p>
</div>

<div class="section" title="Lookup method injection"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lookup-method-injection"></a>Lookup method injection</h4></div></div></div>

<p>Lookup method injection is the ability of the container to override methods on
<span class="emphasis"><em>container managed beans</em></span>, to return the lookup result for another named bean in the
container. The lookup typically involves a prototype bean as in the scenario described
in the preceding section. The Spring Framework implements this method injection by using
bytecode generation from the CGLIB library to generate dynamically a subclass that
overrides the method.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>For this dynamic subclassing to work, the class that the Spring container will subclass
cannot be <code class="literal">final</code>, and the method to be overridden cannot be <code class="literal">final</code> either. Also,
testing a class that has an <code class="literal">abstract</code> method requires you to subclass the class
yourself and to supply a stub implementation of the <code class="literal">abstract</code> method. Finally, objects
that have been the target of method injection cannot be serialized. As of Spring 3.2 it
is no longer necessary to add CGLIB to your classpath, because CGLIB classes are
repackaged under org.springframework and distributed within the spring-core JAR. This is
done both for convenience as well as to avoid potential conflicts with other projects
that use differing versions of CGLIB.</p>
</td></tr></tbody></table></div>

<p>Looking at the <code class="literal">CommandManager</code> class in the previous code snippet, you see that the
Spring container will dynamically override the implementation of the <code class="literal">createCommand()</code>
method. Your <code class="literal">CommandManager</code> class will not have any Spring dependencies, as can be
seen in the reworked example:</p>
<pre class="programlisting"><span class="hl-keyword">package</span> fiona.apple;

<span class="hl-comment">// no more Spring imports!</span>

<span class="hl-keyword">public</span> <span class="hl-keyword">abstract</span> <span class="hl-keyword">class</span> CommandManager {

    <span class="hl-keyword">public</span> Object process(Object commandState) {
        <span class="hl-comment">// grab a new instance of the appropriate Command interface</span>
        Command command = createCommand();
        <span class="hl-comment">// set the state on the (hopefully brand new) Command instance</span>
        command.setState(commandState);
        <span class="hl-keyword">return</span> command.execute();
    }

    <span class="hl-comment">// okay... but where is the implementation of this method?</span>
    <span class="hl-keyword">protected</span> <span class="hl-keyword">abstract</span> Command createCommand();
}</pre>

<p>In the client class containing the method to be injected (the <code class="literal">CommandManager</code> in this
case), the method to be injected requires a signature of the following form:</p>
<pre class="programlisting"><span class="hl-tag">&lt;public|protected&gt;</span> [abstract] <span class="hl-tag">&lt;return-type&gt;</span> theMethodName(no-arguments);</pre>

<p>If the method is <code class="literal">abstract</code>, the dynamically-generated subclass implements the method.
Otherwise, the dynamically-generated subclass overrides the concrete method defined in
the original class. For example:</p>
<pre class="programlisting"><span class="hl-comment">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"command"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"fiona.apple.AsyncCommand"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"prototype"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- inject dependencies here as required --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-comment">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"commandManager"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"fiona.apple.CommandManager"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;lookup-method</span> <span class="hl-attribute">name</span>=<span class="hl-value">"createCommand"</span> <span class="hl-attribute">bean</span>=<span class="hl-value">"command"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The bean identified as <span class="emphasis"><em>commandManager</em></span> calls its own method <code class="literal">createCommand()</code>
whenever it needs a new instance of the <span class="emphasis"><em>command</em></span> bean. You must be careful to deploy
the <code class="literal">command</code> bean as a prototype, if that is actually what is needed. If it is deployed
as a <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" title="4.5.1 The singleton scope">singleton</a>, the same instance of the <code class="literal">command</code>
bean is returned each time.</p>
<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>The interested reader may also find the <code class="literal">ServiceLocatorFactoryBean</code> (in the
<code class="literal">org.springframework.beans.factory.config</code> package) to be of use. The approach used in
ServiceLocatorFactoryBean is similar to that of another utility class,
<code class="literal">ObjectFactoryCreatingFactoryBean</code>, but it allows you to specify your own lookup
interface as opposed to a Spring-specific lookup interface. Consult the JavaDocs for
these classes for additional information.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="Arbitrary method replacement"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-arbitrary-method-replacement"></a>Arbitrary method replacement</h4></div></div></div>

<p>A less useful form of method injection than lookup method Injection is the ability to
replace arbitrary methods in a managed bean with another method implementation. Users
may safely skip the rest of this section until the functionality is actually needed.</p>
<p>With XML-based configuration metadata, you can use the <code class="literal">replaced-method</code> element to
replace an existing method implementation with another, for a deployed bean. Consider
the following class, with a method computeValue, which we want to override:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyValueCalculator {

    <span class="hl-keyword">public</span> String computeValue(String input) {
        <span class="hl-comment">// some real code...</span>
    }

    <span class="hl-comment">// some other methods...</span>

}</pre>

<p>A class implementing the <code class="literal">org.springframework.beans.factory.support.MethodReplacer</code>
interface provides the new method definition.</p>
<pre class="programlisting"><b class="hl-tag" style="color: blue">/**
 * meant to be used to override the existing computeValue(String)
 * implementation in MyValueCalculator
 */</b>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ReplacementComputeValue <span class="hl-keyword">implements</span> MethodReplacer {

    <span class="hl-keyword">public</span> Object reimplement(Object o, Method m, Object[] args) <span class="hl-keyword">throws</span> Throwable {
        <span class="hl-comment">// get the input value, work with it, and return a computed result</span>
        String input = (String) args[<span class="hl-number">0</span>];
        ...
        <span class="hl-keyword">return</span> ...;
    }
}</pre>

<p>The bean definition to deploy the original class and specify the method override would
look like this:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"myValueCalculator"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.z.MyValueCalculator"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- arbitrary method replacement --&gt;</span>
    <span class="hl-tag">&lt;replaced-method</span> <span class="hl-attribute">name</span>=<span class="hl-value">"computeValue"</span> <span class="hl-attribute">replacer</span>=<span class="hl-value">"replacementComputeValue"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;arg-type&gt;</span>String<span class="hl-tag">&lt;/arg-type&gt;</span>
    <span class="hl-tag">&lt;/replaced-method&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"replacementComputeValue"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"a.b.c.ReplacementComputeValue"</span><span class="hl-tag">/&gt;</span></pre>

<p>You can use one or more contained <code class="literal">&lt;arg-type/&gt;</code> elements within the <code class="literal">&lt;replaced-method/&gt;</code>
element to indicate the method signature of the method being overridden. The signature
for the arguments is necessary only if the method is overloaded and multiple variants
exist within the class. For convenience, the type string for an argument may be a
substring of the fully qualified type name. For example, the following all match
<code class="literal">java.lang.String</code>:</p>
<pre class="programlisting">java.lang.String
String
Str</pre>

<p>Because the number of arguments is often enough to distinguish between each possible
choice, this shortcut can save a lot of typing, by allowing you to type only the
shortest string that will match an argument type.</p>
</div>
</div>
</div>
<div class="section" title="4.5 Bean scopes"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-factory-scopes"></a>4.5&nbsp;Bean scopes</h2></div></div></div>

<p>When you create a bean definition, you create a <span class="emphasis"><em>recipe</em></span> for creating actual instances
of the class defined by that bean definition. The idea that a bean definition is a
recipe is important, because it means that, as with a class, you can create many object
instances from a single recipe.</p>
<p>You can control not only the various dependencies and configuration values that are to
be plugged into an object that is created from a particular bean definition, but also
the <span class="emphasis"><em>scope</em></span> of the objects created from a particular bean definition. This approach is
powerful and flexible in that you can <span class="emphasis"><em>choose</em></span> the scope of the objects you create
through configuration instead of having to bake in the scope of an object at the Java
class level. Beans can be defined to be deployed in one of a number of scopes: out of
the box, the Spring Framework supports five scopes, three of which are available only if
you use a web-aware <code class="literal">ApplicationContext</code>.</p>
<p>The following scopes are supported out of the box. You can also create
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom" title="4.5.5 Custom scopes">a custom scope.</a></p>
<div class="table"><a name="beans-factory-scopes-tbl"></a><p class="title"><b>Table&nbsp;4.3.&nbsp;Bean scopesThread-scoped beans</b></p><div class="table-contents">

  <table summary="Bean scopesThread-scoped beans" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Scope</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">Description</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" title="4.5.1 The singleton scope">singleton</a></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>(Default) Scopes a single bean definition to a single object instance per Spring IoC
  container.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-prototype" title="4.5.2 The prototype scope">prototype</a></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Scopes a single bean definition to any number of object instances.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-request" title="Request scope">request</a></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Scopes a single bean definition to the lifecycle of a single HTTP request; that is,
  each HTTP request has its own instance of a bean created off the back of a single bean
  definition. Only valid in the context of a web-aware Spring <code class="literal">ApplicationContext</code>.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-session" title="Session scope">session</a></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Scopes a single bean definition to the lifecycle of an HTTP <code class="literal">Session</code>. Only valid in
  the context of a web-aware Spring <code class="literal">ApplicationContext</code>.</p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p><a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-global-session" title="Global session scope">global session</a></p></td><td style="" align="left" valign="top"><p>Scopes a single bean definition to the lifecycle of a global HTTP <code class="literal">Session</code>. Typically
  only valid when used in a portlet context. Only valid in the context of a web-aware
  Spring <code class="literal">ApplicationContext</code>.</p></td></tr></tbody></table>
</div></div><br class="table-break">

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>As of Spring 3.0, a <span class="emphasis"><em>thread scope</em></span> is available, but is not registered by default. For
more information, see the documentation for
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/SimpleThreadScope.html" target="_top"><code class="literal">SimpleThreadScope</code></a>.
For instructions on how to register this or any other custom scope, see
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom-using" title="Using a custom scope">the section called “Using a custom scope”</a>.</p>
</td></tr></tbody></table></div>

<div class="section" title="4.5.1 The singleton scope"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-scopes-singleton"></a>4.5.1&nbsp;The singleton scope</h3></div></div></div>

<p>Only one <span class="emphasis"><em>shared</em></span> instance of a singleton bean is managed, and all requests for beans
with an id or ids matching that bean definition result in that one specific bean
instance being returned by the Spring container.</p>
<p>To put it another way, when you define a bean definition and it is scoped as a
singleton, the Spring IoC container creates <span class="emphasis"><em>exactly one</em></span> instance of the object
defined by that bean definition. This single instance is stored in a cache of such
singleton beans, and <span class="emphasis"><em>all subsequent requests and references</em></span> for that named bean
return the cached object.</p>
<div class="figure"><a name="d4e1690"></a><p class="title"><b>Figure&nbsp;4.2.&nbsp;</b></p><div class="figure-contents">
  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/singleton.png" alt="singleton"></div>
</div></div><br class="figure-break">

<p>Spring’s concept of a singleton bean differs from the Singleton pattern as defined in
the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scope of an
object such that one <span class="emphasis"><em>and only one</em></span> instance of a particular class is created <span class="emphasis"><em>per
ClassLoader</em></span>. The scope of the Spring singleton is best described as <span class="emphasis"><em>per container
and per bean</em></span>. This means that if you define one bean for a particular class in a
single Spring container, then the Spring container creates one <span class="emphasis"><em>and only one</em></span> instance
of the class defined by that bean definition. <span class="emphasis"><em>The singleton scope is the default scope
in Spring</em></span>. To define a bean as a singleton in XML, you would write, for example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.DefaultAccountService"</span><span class="hl-tag">/&gt;</span>

<span class="hl-comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.DefaultAccountService"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"singleton"</span><span class="hl-tag">/&gt;</span></pre>

</div>
<div class="section" title="4.5.2 The prototype scope"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-scopes-prototype"></a>4.5.2&nbsp;The prototype scope</h3></div></div></div>

<p>The non-singleton, prototype scope of bean deployment results in the <span class="emphasis"><em>creation of a new
bean instance</em></span> every time a request for that specific bean is made. That is, the bean
is injected into another bean or you request it through a <code class="literal">getBean()</code> method call on the
container. As a rule, use the prototype scope for all stateful beans and the singleton
scope for stateless beans.</p>
<p>The following diagram illustrates the Spring prototype scope. <span class="emphasis"><em>A data access object
(DAO) is not typically configured as a prototype, because a typical DAO does not hold
any conversational state; it was just easier for this author to reuse the core of the
singleton diagram.</em></span></p>
<div class="figure"><a name="d4e1710"></a><p class="title"><b>Figure&nbsp;4.3.&nbsp;</b></p><div class="figure-contents">
  <div class="mediaobject"><img src="./Spring Framework Reference Documentation_files/prototype.png" alt="prototype"></div>
</div></div><br class="figure-break">

<p>The following example defines a bean as a prototype in XML:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"accountService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.DefaultAccountService"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"prototype"</span><span class="hl-tag">/&gt;</span></pre>

<p>In contrast to the other scopes, Spring does not manage the complete lifecycle of a
prototype bean: the container instantiates, configures, and otherwise assembles a
prototype object, and hands it to the client, with no further record of that prototype
instance. Thus, although<span class="emphasis"><em> initialization</em></span> lifecycle callback methods are called on all
objects regardless of scope, in the case of prototypes, configured <span class="emphasis"><em>destruction</em></span>
lifecycle callbacks are <span class="emphasis"><em>not</em></span> called. The client code must clean up prototype-scoped
objects and release expensive resources that the prototype bean(s) are holding. To get
the Spring container to release resources held by prototype-scoped beans, try using a
custom <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp" title="4.8.1 Customizing beans using a BeanPostProcessor">bean post-processor</a>, which holds a reference to
beans that need to be cleaned up.</p>
<p>In some respects, the Spring container’s role in regard to a prototype-scoped bean is a
replacement for the Java <code class="literal">new</code> operator. All lifecycle management past that point must
be handled by the client. (For details on the lifecycle of a bean in the Spring
container, see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle" title="4.6.1 Lifecycle callbacks">Section&nbsp;4.6.1, “Lifecycle callbacks”</a>.)</p>
</div>
<div class="section" title="4.5.3 Singleton beans with prototype-bean dependencies"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-scopes-sing-prot-interaction"></a>4.5.3&nbsp;Singleton beans with prototype-bean dependencies</h3></div></div></div>

<p>When you use singleton-scoped beans with dependencies on prototype beans, be aware that
<span class="emphasis"><em>dependencies are resolved at instantiation time</em></span>. Thus if you dependency-inject a
prototype-scoped bean into a singleton-scoped bean, a new prototype bean is instantiated
and then dependency-injected into the singleton bean. The prototype instance is the sole
instance that is ever supplied to the singleton-scoped bean.</p>
<p>However, suppose you want the singleton-scoped bean to acquire a new instance of the
prototype-scoped bean repeatedly at runtime. You cannot dependency-inject a
prototype-scoped bean into your singleton bean, because that injection occurs only
<span class="emphasis"><em>once</em></span>, when the Spring container is instantiating the singleton bean and resolving
and injecting its dependencies. If you need a new instance of a prototype bean at
runtime more than once, see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-method-injection" title="4.4.6 Method injection">Section&nbsp;4.4.6, “Method injection”</a></p>
</div>
<div class="section" title="4.5.4 Request, session, and global session scopes"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-scopes-other"></a>4.5.4&nbsp;Request, session, and global session scopes</h3></div></div></div>

<p>The <code class="literal">request</code>, <code class="literal">session</code>, and <code class="literal">global session</code> scopes are <span class="emphasis"><em>only</em></span> available if you use
a web-aware Spring <code class="literal">ApplicationContext</code> implementation (such as
<code class="literal">XmlWebApplicationContext</code>). If you use these scopes with regular Spring IoC containers
such as the <code class="literal">ClassPathXmlApplicationContext</code>, you get an <code class="literal">IllegalStateException</code>
complaining about an unknown bean scope.</p>
<div class="section" title="Initial web configuration"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-other-web-configuration"></a>Initial web configuration</h4></div></div></div>

<p>To support the scoping of beans at the <code class="literal">request</code>, <code class="literal">session</code>, and <code class="literal">global session</code> levels
(web-scoped beans), some minor initial configuration is required before you define your
beans. (This initial setup is <span class="emphasis"><em>not</em></span> required for the standard scopes, singleton and
prototype.)</p>
<p>How you accomplish this initial setup depends on your particular Servlet environment..</p>
<p>If you access scoped beans within Spring Web MVC, in effect, within a request that is
processed by the Spring <code class="literal">DispatcherServlet</code>, or <code class="literal">DispatcherPortlet</code>, then no special
setup is necessary: <code class="literal">DispatcherServlet</code> and <code class="literal">DispatcherPortlet</code> already expose all
relevant state.</p>
<p>If you use a Servlet 2.4+ web container, with requests processed outside of Spring’s
DispatcherServlet (for example, when using JSF or Struts), you need to register the
<code class="literal">org.springframework.web.context.request.RequestContextListener</code> <code class="literal">ServletRequestListener</code>.
For Servlet 3.0+, this can done programmatically via the <code class="literal">WebApplicationInitializer</code>
interface. Alternatively, or for older containers, add the following declaration to your
web applications <code class="literal">web.xml</code> file:</p>
<pre class="programlisting"><span class="hl-tag">&lt;web-app&gt;</span>
    ...
    <span class="hl-tag">&lt;listener&gt;</span>
        <span class="hl-tag">&lt;listener-class&gt;</span>
            org.springframework.web.context.request.RequestContextListener
        <span class="hl-tag">&lt;/listener-class&gt;</span>
    <span class="hl-tag">&lt;/listener&gt;</span>
    ...
<span class="hl-tag">&lt;/web-app&gt;</span></pre>

<p>If you use an older web container (Servlet 2.3), use the provided <code class="literal">javax.servlet.Filter</code>
implementation. The following snippet of XML configuration must be included in the
<code class="literal">web.xml</code> file of your web application if you want to access web-scoped beans in
requests outside of Spring’s DispatcherServlet on a Servlet 2.3 container. (The filter
mapping depends on the surrounding web application configuration, so you must change it
as appropriate.)</p>
<pre class="programlisting"><span class="hl-tag">&lt;web-app&gt;</span>
    ...
    <span class="hl-tag">&lt;filter&gt;</span>
        <span class="hl-tag">&lt;filter-name&gt;</span>requestContextFilter<span class="hl-tag">&lt;/filter-name&gt;</span>
        <span class="hl-tag">&lt;filter-class&gt;</span>org.springframework.web.filter.RequestContextFilter<span class="hl-tag">&lt;/filter-class&gt;</span>
    <span class="hl-tag">&lt;/filter&gt;</span>
    <span class="hl-tag">&lt;filter-mapping&gt;</span>
        <span class="hl-tag">&lt;filter-name&gt;</span>requestContextFilter<span class="hl-tag">&lt;/filter-name&gt;</span>
        <span class="hl-tag">&lt;url-pattern&gt;</span>/*<span class="hl-tag">&lt;/url-pattern&gt;</span>
    <span class="hl-tag">&lt;/filter-mapping&gt;</span>
    ...
<span class="hl-tag">&lt;/web-app&gt;</span></pre>

<p><code class="literal">DispatcherServlet</code>, <code class="literal">RequestContextListener</code> and <code class="literal">RequestContextFilter</code> all do exactly
the same thing, namely bind the HTTP request object to the <code class="literal">Thread</code> that is servicing
that request. This makes beans that are request- and session-scoped available further
down the call chain.</p>
</div>
<div class="section" title="Request scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-request"></a>Request scope</h4></div></div></div>

<p>Consider the following bean definition:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"loginAction"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.LoginAction"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"request"</span><span class="hl-tag">/&gt;</span></pre>

<p>The Spring container creates a new instance of the <code class="literal">LoginAction</code> bean by using the
<code class="literal">loginAction</code> bean definition for each and every HTTP request. That is, the
<code class="literal">loginAction</code> bean is scoped at the HTTP request level. You can change the internal
state of the instance that is created as much as you want, because other instances
created from the same <code class="literal">loginAction</code> bean definition will not see these changes in state;
they are particular to an individual request. When the request completes processing, the
bean that is scoped to the request is discarded.</p>
</div>
<div class="section" title="Session scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-session"></a>Session scope</h4></div></div></div>

<p>Consider the following bean definition:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"session"</span><span class="hl-tag">/&gt;</span></pre>

<p>The Spring container creates a new instance of the <code class="literal">UserPreferences</code> bean by using the
<code class="literal">userPreferences</code> bean definition for the lifetime of a single HTTP <code class="literal">Session</code>. In other
words, the <code class="literal">userPreferences</code> bean is effectively scoped at the HTTP <code class="literal">Session</code> level. As
with <code class="literal">request-scoped</code> beans, you can change the internal state of the instance that is
created as much as you want, knowing that other HTTP <code class="literal">Session</code> instances that are also
using instances created from the same <code class="literal">userPreferences</code> bean definition do not see these
changes in state, because they are particular to an individual HTTP <code class="literal">Session</code>. When the
HTTP <code class="literal">Session</code> is eventually discarded, the bean that is scoped to that particular HTTP
<code class="literal">Session</code> is also discarded.</p>
</div>
<div class="section" title="Global session scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-global-session"></a>Global session scope</h4></div></div></div>

<p>Consider the following bean definition:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"globalSession"</span><span class="hl-tag">/&gt;</span></pre>

<p>The <code class="literal">global session</code> scope is similar to the standard HTTP <code class="literal">Session</code> scope
(<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-session" title="Session scope">described above</a>), and applies only in the context of
portlet-based web applications. The portlet specification defines the notion of a global
<code class="literal">Session</code> that is shared among all portlets that make up a single portlet web
application. Beans defined at the <code class="literal">global session</code> scope are scoped (or bound) to the
lifetime of the global portlet <code class="literal">Session</code>.</p>
<p>If you write a standard Servlet-based web application and you define one or more beans
as having <code class="literal">global session</code> scope, the standard HTTP <code class="literal">Session</code> scope is used, and no
error is raised.</p>
</div>
<div class="section" title="Scoped beans as dependencies"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-other-injection"></a>Scoped beans as dependencies</h4></div></div></div>

<p>The Spring IoC container manages not only the instantiation of your objects (beans), but
also the wiring up of collaborators (or dependencies). If you want to inject (for
example) an HTTP request scoped bean into another bean, you must inject an AOP proxy in
place of the scoped bean. That is, you need to inject a proxy object that exposes the
same public interface as the scoped object but that can also retrieve the real, target
object from the relevant scope (for example, an HTTP request) and delegate method calls
onto the real object.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>You <span class="emphasis"><em>do not</em></span> need to use the <code class="literal">&lt;aop:scoped-proxy/&gt;</code> in conjunction with beans that are
scoped as <code class="literal">singletons</code> or <code class="literal">prototypes</code>.</p>
</td></tr></tbody></table></div>

<p>The configuration in the following example is only one line, but it is important to
understand the "why" as well as the "how" behind it.</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:aop</span>=<span class="hl-value">"http://www.springframework.org/schema/aop"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"session"</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span>
        <span class="hl-tag">&lt;aop:scoped-proxy/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.SimpleUserService"</span><span class="hl-tag">&gt;</span>
        <span class="hl-comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"userPreferences"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>To create such a proxy, you insert a child <code class="literal">&lt;aop:scoped-proxy/&gt;</code> element into a scoped
bean definition. See <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-injection-proxies" title="Choosing the type of proxy to create">the section called “Choosing the type of proxy to create”</a> and
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#xsd-config" title="33. XML Schema-based configuration">Chapter&nbsp;33, <i>XML Schema-based configuration</i></a>.) Why do definitions of beans scoped at the <code class="literal">request</code>, <code class="literal">session</code>,
<code class="literal">globalSession</code> and custom-scope levels require the <code class="literal">&lt;aop:scoped-proxy/&gt;</code> element ?
Let’s examine the following singleton bean definition and contrast it with what you need
to define for the aforementioned scopes. (The following <code class="literal">userPreferences</code> bean
definition as it stands is <span class="emphasis"><em>incomplete.)</em></span></p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"session"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userManager"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserManager"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"userPreferences"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>In the preceding example, the singleton bean <code class="literal">userManager</code> is injected with a reference
to the HTTP <code class="literal">Session</code>-scoped bean <code class="literal">userPreferences</code>. The salient point here is that the
<code class="literal">userManager</code> bean is a singleton: it will be instantiated <span class="emphasis"><em>exactly once</em></span> per
container, and its dependencies (in this case only one, the <code class="literal">userPreferences</code> bean) are
also injected only once. This means that the <code class="literal">userManager</code> bean will only operate on the
exact same <code class="literal">userPreferences</code> object, that is, the one that it was originally injected
with.</p>
<p>This is <span class="emphasis"><em>not</em></span> the behavior you want when injecting a shorter-lived scoped bean into a
longer-lived scoped bean, for example injecting an HTTP <code class="literal">Session</code>-scoped collaborating
bean as a dependency into singleton bean. Rather, you need a single <code class="literal">userManager</code>
object, and for the lifetime of an HTTP <code class="literal">Session</code>, you need a <code class="literal">userPreferences</code> object
that is specific to said HTTP <code class="literal">Session</code>. Thus the container creates an object that
exposes the exact same public interface as the <code class="literal">UserPreferences</code> class (ideally an
object that <span class="emphasis"><em>is a</em></span> <code class="literal">UserPreferences</code> instance) which can fetch the real
<code class="literal">UserPreferences</code> object from the scoping mechanism (HTTP request, <code class="literal">Session</code>, etc.). The
container injects this proxy object into the <code class="literal">userManager</code> bean, which is unaware that
this <code class="literal">UserPreferences</code> reference is a proxy. In this example, when a <code class="literal">UserManager</code>
instance invokes a method on the dependency-injected <code class="literal">UserPreferences</code> object, it
actually is invoking a method on the proxy. The proxy then fetches the real
<code class="literal">UserPreferences</code> object from (in this case) the HTTP <code class="literal">Session</code>, and delegates the
method invocation onto the retrieved real <code class="literal">UserPreferences</code> object.</p>
<p>Thus you need the following, correct and complete, configuration when injecting
<code class="literal">request-</code>, <code class="literal">session-</code>, and <code class="literal">globalSession-scoped</code> beans into collaborating objects:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"session"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;aop:scoped-proxy/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userManager"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserManager"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"userPreferences"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<div class="section" title="Choosing the type of proxy to create"><div class="titlepage"><div><div><h5 class="title"><a name="beans-factory-scopes-other-injection-proxies"></a>Choosing the type of proxy to create</h5></div></div></div>

<p>By default, when the Spring container creates a proxy for a bean that is marked up with
the <code class="literal">&lt;aop:scoped-proxy/&gt;</code> element, <span class="emphasis"><em>a CGLIB-based class proxy is created</em></span>.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>CGLIB proxies only intercept public method calls! Do not call non-public
methods on such a proxy; they will not be delegated to the scoped target object.</p>
</td></tr></tbody></table></div>

<p>Alternatively, you can configure the Spring container to create standard JDK
interface-based proxies for such scoped beans, by specifying <code class="literal">false</code> for the value of
the <code class="literal">proxy-target-class</code> attribute of the <code class="literal">&lt;aop:scoped-proxy/&gt;</code> element. Using JDK
interface-based proxies means that you do not need additional libraries in your
application classpath to effect such proxying. However, it also means that the class of
the scoped bean must implement at least one interface, and <span class="emphasis"><em>that all</em></span> collaborators
into which the scoped bean is injected must reference the bean through one of its
interfaces.</p>
<pre class="programlisting"><span class="hl-comment">&lt;!-- DefaultUserPreferences implements the UserPreferences interface --&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.DefaultUserPreferences"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"session"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;aop:scoped-proxy</span> <span class="hl-attribute">proxy-target-class</span>=<span class="hl-value">"false"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"userManager"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.UserManager"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"userPreferences"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"userPreferences"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>For more detailed information about choosing class-based or interface-based proxying,
see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-proxying" title="8.6 Proxying mechanisms">Section&nbsp;8.6, “Proxying mechanisms”</a>.</p>
</div>
</div>
</div>
<div class="section" title="4.5.5 Custom scopes"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-scopes-custom"></a>4.5.5&nbsp;Custom scopes</h3></div></div></div>

<p>The bean scoping mechanism is extensible; You can define your own
scopes, or even redefine existing scopes, although the latter is considered bad practice
and you <span class="emphasis"><em>cannot</em></span> override the built-in <code class="literal">singleton</code> and <code class="literal">prototype</code> scopes.</p>
<div class="section" title="Creating a custom scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-custom-creating"></a>Creating a custom scope</h4></div></div></div>

<p>To integrate your custom scope(s) into the Spring container, you need to implement the
<code class="literal">org.springframework.beans.factory.config.Scope</code> interface, which is described in this
section. For an idea of how to implement your own scopes, see the <code class="literal">Scope</code>
implementations that are supplied with the Spring Framework itself and the
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/Scope.html" target="_top"><code class="literal">Scope</code>
Javadoc</a>, which explains the methods you need to implement in more detail.</p>
<p>The <code class="literal">Scope</code> interface has four methods to get objects from the scope, remove them from
the scope, and allow them to be destroyed.</p>
<p>The following method returns the object from the underlying scope. The session scope
implementation, for example, returns the session-scoped bean (and if it does not exist,
the method returns a new instance of the bean, after having bound it to the session for
future reference).</p>
<pre class="programlisting">Object get(String name, ObjectFactory objectFactory)</pre>

<p>The following method removes the object from the underlying scope. The session scope
implementation for example, removes the session-scoped bean from the underlying session.
The object should be returned, but you can return null if the object with the specified
name is not found.</p>
<pre class="programlisting">Object remove(String name)</pre>

<p>The following method registers the callbacks the scope should execute when it is
destroyed or when the specified object in the scope is destroyed. Refer to the Javadoc
or a Spring scope implementation for more information on destruction callbacks.</p>
<pre class="programlisting"><span class="hl-keyword">void</span> registerDestructionCallback(String name, Runnable destructionCallback)</pre>

<p>The following method obtains the conversation identifier for the underlying scope. This
identifier is different for each scope. For a session scoped implementation, this
identifier can be the session identifier.</p>
<pre class="programlisting">String getConversationId()</pre>

</div>
<div class="section" title="Using a custom scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-scopes-custom-using"></a>Using a custom scope</h4></div></div></div>

<p>After you write and test one or more custom <code class="literal">Scope</code> implementations, you need to make
the Spring container aware of your new scope(s). The following method is the central
method to register a new <code class="literal">Scope</code> with the Spring container:</p>
<pre class="programlisting"><span class="hl-keyword">void</span> registerScope(String scopeName, Scope scope);</pre>

<p>This method is declared on the <code class="literal">ConfigurableBeanFactory</code> interface, which is available
on most of the concrete <code class="literal">ApplicationContext</code> implementations that ship with Spring via
the BeanFactory property.</p>
<p>The first argument to the <code class="literal">registerScope(..)</code> method is the unique name associated with
a scope; examples of such names in the Spring container itself are <code class="literal">singleton</code> and
<code class="literal">prototype</code>. The second argument to the <code class="literal">registerScope(..)</code> method is an actual instance
of the custom <code class="literal">Scope</code> implementation that you wish to register and use.</p>
<p>Suppose that you write your custom <code class="literal">Scope</code> implementation, and then register it as below.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The example below uses <code class="literal">SimpleThreadScope</code> which is included with Spring, but not
registered by default. The instructions would be the same for your own custom <code class="literal">Scope</code>
implementations.</p>
</td></tr></tbody></table></div>

<pre class="programlisting">Scope threadScope = <span class="hl-keyword">new</span> SimpleThreadScope();
beanFactory.registerScope(<span class="hl-string">"thread"</span>, threadScope);</pre>

<p>You then create bean definitions that adhere to the scoping rules of your custom <code class="literal">Scope</code>:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"..."</span> <span class="hl-attribute">class</span>=<span class="hl-value">"..."</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"thread"</span><span class="hl-tag">&gt;</span></pre>

<p>With a custom <code class="literal">Scope</code> implementation, you are not limited to programmatic registration
of the scope. You can also do the <code class="literal">Scope</code> registration declaratively, using the
<code class="literal">CustomScopeConfigurer</code> class:</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:aop</span>=<span class="hl-value">"http://www.springframework.org/schema/aop"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.factory.config.CustomScopeConfigurer"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"scopes"</span><span class="hl-tag">&gt;</span>
            <span class="hl-tag">&lt;map&gt;</span>
                <span class="hl-tag">&lt;entry</span> <span class="hl-attribute">key</span>=<span class="hl-value">"thread"</span><span class="hl-tag">&gt;</span>
                    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.context.support.SimpleThreadScope"</span><span class="hl-tag">/&gt;</span>
                <span class="hl-tag">&lt;/entry&gt;</span>
            <span class="hl-tag">&lt;/map&gt;</span>
        <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"bar"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Bar"</span> <span class="hl-attribute">scope</span>=<span class="hl-value">"thread"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Rick"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;aop:scoped-proxy/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"foo"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"x.y.Foo"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"bar"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"bar"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>When you place &lt;aop:scoped-proxy/&gt; in a <code class="literal">FactoryBean</code> implementation, it is the factory
bean itself that is scoped, not the object returned from <code class="literal">getObject()</code>.</p>
</td></tr></tbody></table></div>

</div>
</div>
</div>
<div class="section" title="4.6 Customizing the nature of a bean"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-factory-nature"></a>4.6&nbsp;Customizing the nature of a bean</h2></div></div></div>

<div class="section" title="4.6.1 Lifecycle callbacks"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-lifecycle"></a>4.6.1&nbsp;Lifecycle callbacks</h3></div></div></div>

<p>To interact with the container’s management of the bean lifecycle, you can implement the
Spring <code class="literal">InitializingBean</code> and <code class="literal">DisposableBean</code> interfaces. The container calls
<code class="literal">afterPropertiesSet()</code> for the former and <code class="literal">destroy()</code> for the latter to allow the bean
to perform certain actions upon initialization and destruction of your beans.</p>
<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>The JSR-250 <code class="literal">@PostConstruct</code> and <code class="literal">@PreDestroy</code> annotations are generally considered best
practice for receiving lifecycle callbacks in a modern Spring application. Using these
annotations means that your beans are not coupled to Spring specific interfaces. For
details see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations" title="4.9.7 @PostConstruct and @PreDestroy">Section&nbsp;4.9.7, “@PostConstruct and @PreDestroy”</a>.</p>
<p>If you don’t want to use the JSR-250 annotations but you are still looking to remove
coupling consider the use of init-method and destroy-method object definition metadata.</p>
</td></tr></tbody></table></div>

<p>Internally, the Spring Framework uses <code class="literal">BeanPostProcessor</code> implementations to process any
callback interfaces it can find and call the appropriate methods. If you need custom
features or other lifecycle behavior Spring does not offer out-of-the-box, you can
implement a <code class="literal">BeanPostProcessor</code> yourself. For more information, see
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension" title="4.8 Container Extension Points">Section&nbsp;4.8, “Container Extension Points”</a>.</p>
<p>In addition to the initialization and destruction callbacks, Spring-managed objects may
also implement the <code class="literal">Lifecycle</code> interface so that those objects can participate in the
startup and shutdown process as driven by the container’s own lifecycle.</p>
<p>The lifecycle callback interfaces are described in this section.</p>
<div class="section" title="Initialization callbacks"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lifecycle-initializingbean"></a>Initialization callbacks</h4></div></div></div>

<p>The <code class="literal">org.springframework.beans.factory.InitializingBean</code> interface allows a bean to
perform initialization work after all necessary properties on the bean have been set by
the container. The <code class="literal">InitializingBean</code> interface specifies a single method:</p>
<pre class="programlisting"><span class="hl-keyword">void</span> afterPropertiesSet() <span class="hl-keyword">throws</span> Exception;</pre>

<p>It is recommended that you do not use the <code class="literal">InitializingBean</code> interface because it
unnecessarily couples the code to Spring. Alternatively, use
the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations" title="4.9.7 @PostConstruct and @PreDestroy"><code class="literal">@PostConstruct</code></a> annotation or
specify a POJO initialization method. In the case of XML-based configuration metadata,
you use the <code class="literal">init-method</code> attribute to specify the name of the method that has a void
no-argument signature. For example, the following definition:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleInitBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span> <span class="hl-attribute">init-method</span>=<span class="hl-value">"init"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> init() {
        <span class="hl-comment">// do some initialization work</span>
    }

}</pre>

<p>…is exactly the same as…</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleInitBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.AnotherExampleBean"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AnotherExampleBean <span class="hl-keyword">implements</span> InitializingBean {

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> afterPropertiesSet() {
        <span class="hl-comment">// do some initialization work</span>
    }

}</pre>

<p>but does not couple the code to Spring.</p>
</div>
<div class="section" title="Destruction callbacks"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lifecycle-disposablebean"></a>Destruction callbacks</h4></div></div></div>

<p>Implementing the <code class="literal">org.springframework.beans.factory.DisposableBean</code> interface allows a
bean to get a callback when the container containing it is destroyed. The
<code class="literal">DisposableBean</code> interface specifies a single method:</p>
<pre class="programlisting"><span class="hl-keyword">void</span> destroy() <span class="hl-keyword">throws</span> Exception;</pre>

<p>It is recommended that you do not use the <code class="literal">DisposableBean</code> callback interface because it
unnecessarily couples the code to Spring. Alternatively, use
the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations" title="4.9.7 @PostConstruct and @PreDestroy"><code class="literal">@PreDestroy</code></a> annotation or
specify a generic method that is supported by bean definitions. With XML-based
configuration metadata, you use the <code class="literal">destroy-method</code> attribute on the <code class="literal">&lt;bean/&gt;</code>. For
example, the following definition:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleInitBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.ExampleBean"</span> <span class="hl-attribute">destroy-method</span>=<span class="hl-value">"cleanup"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ExampleBean {

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> cleanup() {
        <span class="hl-comment">// do some destruction work (like releasing pooled connections)</span>
    }

}</pre>

<p>is exactly the same as:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"exampleInitBean"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"examples.AnotherExampleBean"</span><span class="hl-tag">/&gt;</span></pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AnotherExampleBean <span class="hl-keyword">implements</span> DisposableBean {

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> destroy() {
        <span class="hl-comment">// do some destruction work (like releasing pooled connections)</span>
    }

}</pre>

<p>but does not couple the code to Spring.</p>
</div>
<div class="section" title="Default initialization and destroy methods"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lifecycle-default-init-destroy-methods"></a>Default initialization and destroy methods</h4></div></div></div>

<p>When you write initialization and destroy method callbacks that do not use the
Spring-specific <code class="literal">InitializingBean</code> and <code class="literal">DisposableBean</code> callback interfaces, you
typically write methods with names such as <code class="literal">init()</code>, <code class="literal">initialize()</code>, <code class="literal">dispose()</code>, and so
on. Ideally, the names of such lifecycle callback methods are standardized across a
project so that all developers use the same method names and ensure consistency.</p>
<p>You can configure the Spring container to <code class="literal">look</code> for named initialization and destroy
callback method names on <span class="emphasis"><em>every</em></span> bean. This means that you, as an application
developer, can write your application classes and use an initialization callback called
<code class="literal">init()</code>, without having to configure an <code class="literal">init-method="init"</code> attribute with each bean
definition. The Spring IoC container calls that method when the bean is created (and in
accordance with the standard lifecycle callback contract described previously). This
feature also enforces a consistent naming convention for initialization and destroy
method callbacks.</p>
<p>Suppose that your initialization callback methods are named <code class="literal">init()</code> and destroy
callback methods are named <code class="literal">destroy()</code>. Your class will resemble the class in the
following example.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> DefaultBlogService <span class="hl-keyword">implements</span> BlogService {

    <span class="hl-keyword">private</span> BlogDao blogDao;

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setBlogDao(BlogDao blogDao) {
        <span class="hl-keyword">this</span>.blogDao = blogDao;
    }

    <span class="hl-comment">// this is (unsurprisingly) the initialization callback method</span>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> init() {
        <span class="hl-keyword">if</span> (<span class="hl-keyword">this</span>.blogDao == null) {
            <span class="hl-keyword">throw</span> <span class="hl-keyword">new</span> IllegalStateException(<span class="hl-string">"The [blogDao] property must be set."</span>);
        }
    }

}</pre>

<pre class="programlisting"><span class="hl-tag">&lt;beans</span> <span class="hl-attribute">default-init-method</span>=<span class="hl-value">"init"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"blogService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.foo.DefaultBlogService"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"blogDao"</span> <span class="hl-attribute">ref</span>=<span class="hl-value">"blogDao"</span><span class="hl-tag"> /&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The presence of the <code class="literal">default-init-method</code> attribute on the top-level <code class="literal">&lt;beans/&gt;</code> element
attribute causes the Spring IoC container to recognize a method called <code class="literal">init</code> on beans
as the initialization method callback. When a bean is created and assembled, if the bean
class has such a method, it is invoked at the appropriate time.</p>
<p>You configure destroy method callbacks similarly (in XML, that is) by using the
<code class="literal">default-destroy-method</code> attribute on the top-level <code class="literal">&lt;beans/&gt;</code> element.</p>
<p>Where existing bean classes already have callback methods that are named at variance
with the convention, you can override the default by specifying (in XML, that is) the
method name using the <code class="literal">init-method</code> and <code class="literal">destroy-method</code> attributes of the &lt;bean/&gt;
itself.</p>
<p>The Spring container guarantees that a configured initialization callback is called
immediately after a bean is supplied with all dependencies. Thus the initialization
callback is called on the raw bean reference, which means that AOP interceptors and so
forth are not yet applied to the bean. A target bean is fully created <span class="emphasis"><em>first</em></span>,
<span class="emphasis"><em>then</em></span> an AOP proxy (for example) with its interceptor chain is applied. If the target
bean and the proxy are defined separately, your code can even interact with the raw
target bean, bypassing the proxy. Hence, it would be inconsistent to apply the
interceptors to the init method, because doing so would couple the lifecycle of the
target bean with its proxy/interceptors and leave strange semantics when your code
interacts directly to the raw target bean.</p>
</div>
<div class="section" title="Combining lifecycle mechanisms"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lifecycle-combined-effects"></a>Combining lifecycle mechanisms</h4></div></div></div>

<p>As of Spring 2.5, you have three options for controlling bean lifecycle behavior: the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks"><code class="literal">InitializingBean</code></a> and
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean" title="Destruction callbacks"><code class="literal">DisposableBean</code></a> callback interfaces; custom
<code class="literal">init()</code> and <code class="literal">destroy()</code> methods; and the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations" title="4.9.7 @PostConstruct and @PreDestroy"><code class="literal">@PostConstruct</code> and <code class="literal">@PreDestroy</code>
annotations</a>. You can combine these mechanisms to control a given bean.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>If multiple lifecycle mechanisms are configured for a bean, and each mechanism is
configured with a different method name, then each configured method is executed in the
order listed below. However, if the same method name is configured - for example,
<code class="literal">init()</code> for an initialization method - for more than one of these lifecycle mechanisms,
that method is executed once, as explained in the preceding section.</p>
</td></tr></tbody></table></div>

<p>Multiple lifecycle mechanisms configured for the same bean, with different
initialization methods, are called as follows:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Methods annotated with <code class="literal">@PostConstruct</code>
</li><li class="listitem">
<code class="literal">afterPropertiesSet()</code> as defined by the <code class="literal">InitializingBean</code> callback interface
</li><li class="listitem">
A custom configured <code class="literal">init()</code> method
</li></ul></div>

<p>Destroy methods are called in the same order:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Methods annotated with <code class="literal">@PreDestroy</code>
</li><li class="listitem">
<code class="literal">destroy()</code> as defined by the <code class="literal">DisposableBean</code> callback interface
</li><li class="listitem">
A custom configured <code class="literal">destroy()</code> method
</li></ul></div>

</div>
<div class="section" title="Startup and shutdown callbacks"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-lifecycle-processor"></a>Startup and shutdown callbacks</h4></div></div></div>

<p>The <code class="literal">Lifecycle</code> interface defines the essential methods for any object that has its own
lifecycle requirements (e.g. starts and stops some background process):</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> Lifecycle {

    <span class="hl-keyword">void</span> start();

    <span class="hl-keyword">void</span> stop();

    <span class="hl-keyword">boolean</span> isRunning();

}</pre>

<p>Any Spring-managed object may implement that interface. Then, when the
ApplicationContext itself starts and stops, it will cascade those calls to all Lifecycle
implementations defined within that context. It does this by delegating to a
<code class="literal">LifecycleProcessor</code>:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> LifecycleProcessor <span class="hl-keyword">extends</span> Lifecycle {

    <span class="hl-keyword">void</span> onRefresh();

    <span class="hl-keyword">void</span> onClose();

}</pre>

<p>Notice that the <code class="literal">LifecycleProcessor</code> is itself an extension of the <code class="literal">Lifecycle</code>
interface. It also adds two other methods for reacting to the context being refreshed
and closed.</p>
<p>The order of startup and shutdown invocations can be important. If a "depends-on"
relationship exists between any two objects, the dependent side will start <span class="emphasis"><em>after</em></span> its
dependency, and it will stop <span class="emphasis"><em>before</em></span> its dependency. However, at times the direct
dependencies are unknown. You may only know that objects of a certain type should start
prior to objects of another type. In those cases, the <code class="literal">SmartLifecycle</code> interface defines
another option, namely the <code class="literal">getPhase()</code> method as defined on its super-interface,
<code class="literal">Phased</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> Phased {

    <span class="hl-keyword">int</span> getPhase();

}</pre>

<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> SmartLifecycle <span class="hl-keyword">extends</span> Lifecycle, Phased {

    <span class="hl-keyword">boolean</span> isAutoStartup();

    <span class="hl-keyword">void</span> stop(Runnable callback);

}</pre>

<p>When starting, the objects with the lowest phase start first, and when stopping, the
reverse order is followed. Therefore, an object that implements <code class="literal">SmartLifecycle</code> and
whose getPhase() method returns <code class="literal">Integer.MIN_VALUE</code> would be among the first to start
and the last to stop. At the other end of the spectrum, a phase value of
<code class="literal">Integer.MAX_VALUE</code> would indicate that the object should be started last and stopped
first (likely because it depends on other processes to be running). When considering the
phase value, it’s also important to know that the default phase for any "normal"
<code class="literal">Lifecycle</code> object that does not implement <code class="literal">SmartLifecycle</code> would be 0. Therefore, any
negative phase value would indicate that an object should start before those standard
components (and stop after them), and vice versa for any positive phase value.</p>
<p>As you can see the stop method defined by <code class="literal">SmartLifecycle</code> accepts a callback. Any
implementation <span class="emphasis"><em>must</em></span> invoke that callback’s run() method after that implementation’s
shutdown process is complete. That enables asynchronous shutdown where necessary since
the default implementation of the <code class="literal">LifecycleProcessor</code> interface,
<code class="literal">DefaultLifecycleProcessor</code>, will wait up to its timeout value for the group of objects
within each phase to invoke that callback. The default per-phase timeout is 30 seconds.
You can override the default lifecycle processor instance by defining a bean named
"lifecycleProcessor" within the context. If you only want to modify the timeout, then
defining the following would be sufficient:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"lifecycleProcessor"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.context.support.DefaultLifecycleProcessor"</span><span class="hl-tag">&gt;</span>
    <span class="hl-comment">&lt;!-- timeout value in milliseconds --&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"timeoutPerShutdownPhase"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"10000"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>As mentioned, the <code class="literal">LifecycleProcessor</code> interface defines callback methods for the
refreshing and closing of the context as well. The latter will simply drive the shutdown
process as if stop() had been called explicitly, but it will happen when the context is
closing. The <span class="emphasis"><em>refresh</em></span> callback on the other hand enables another feature of
<code class="literal">SmartLifecycle</code> beans. When the context is refreshed (after all objects have been
instantiated and initialized), that callback will be invoked, and at that point the
default lifecycle processor will check the boolean value returned by each
<code class="literal">SmartLifecycle</code> object’s <code class="literal">isAutoStartup()</code> method. If "true", then that object will be
started at that point rather than waiting for an explicit invocation of the context’s or
its own start() method (unlike the context refresh, the context start does not happen
automatically for a standard context implementation). The "phase" value as well as any
"depends-on" relationships will determine the startup order in the same way as described
above.</p>
</div>
<div class="section" title="Shutting down the Spring IoC container gracefully in non-web applications"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-shutdown"></a>Shutting down the Spring IoC container gracefully in non-web applications</h4></div></div></div>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>This section applies only to non-web applications. Spring’s web-based
<code class="literal">ApplicationContext</code> implementations already have code in place to shut down the Spring
IoC container gracefully when the relevant web application is shut down.</p>
</td></tr></tbody></table></div>

<p>If you are using Spring’s IoC container in a non-web application environment; for
example, in a rich client desktop environment; you register a shutdown hook with the
JVM. Doing so ensures a graceful shutdown and calls the relevant destroy methods on your
singleton beans so that all resources are released. Of course, you must still configure
and implement these destroy callbacks correctly.</p>
<p>To register a shutdown hook, you call the <code class="literal">registerShutdownHook()</code> method that is
declared on the <code class="literal">AbstractApplicationContext</code> class:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> org.springframework.context.support.AbstractApplicationContext;
<span class="hl-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="hl-keyword">public</span> <span class="hl-keyword">final</span> <span class="hl-keyword">class</span> Boot {

    <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(<span class="hl-keyword">final</span> String[] args) <span class="hl-keyword">throws</span> Exception {

        AbstractApplicationContext ctx = <span class="hl-keyword">new</span> ClassPathXmlApplicationContext(
                <span class="hl-keyword">new</span> String []{<span class="hl-string">"beans.xml"</span>});

        <span class="hl-comment">// add a shutdown hook for the above context...</span>
        ctx.registerShutdownHook();

        <span class="hl-comment">// app runs here...</span>

        <span class="hl-comment">// main method exits, hook is called prior to the app shutting down...</span>

    }
}</pre>

</div>
</div>
<div class="section" title="4.6.2 ApplicationContextAware and BeanNameAware"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-aware"></a>4.6.2&nbsp;ApplicationContextAware and BeanNameAware</h3></div></div></div>

<p>When an <code class="literal">ApplicationContext</code> creates a class that implements the
<code class="literal">org.springframework.context.ApplicationContextAware</code> interface, the class is provided
with a reference to that <code class="literal">ApplicationContext</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> ApplicationContextAware {

    <span class="hl-keyword">void</span> setApplicationContext(ApplicationContext applicationContext) <span class="hl-keyword">throws</span> BeansException;

}</pre>

<p>Thus beans can manipulate programmatically the <code class="literal">ApplicationContext</code> that created them,
through the <code class="literal">ApplicationContext</code> interface, or by casting the reference to a known
subclass of this interface, such as <code class="literal">ConfigurableApplicationContext</code>, which exposes
additional functionality. One use would be the programmatic retrieval of other beans.
Sometimes this capability is useful; however, in general you should avoid it, because it
couples the code to Spring and does not follow the Inversion of Control style, where
collaborators are provided to beans as properties. Other methods of the
ApplicationContext provide access to file resources, publishing application events, and
accessing a MessageSource. These additional features are described in
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction" title="4.16 Additional Capabilities of the ApplicationContext">Section&nbsp;4.16, “Additional Capabilities of the ApplicationContext”</a></p>
<p>As of Spring 2.5, autowiring is another alternative to obtain reference to the
<code class="literal">ApplicationContext</code>. The "traditional" <code class="literal">constructor</code> and <code class="literal">byType</code> autowiring modes (as
described in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire" title="4.4.5 Autowiring collaborators">Section&nbsp;4.4.5, “Autowiring collaborators”</a>) can provide a dependency of type
<code class="literal">ApplicationContext</code> for a constructor argument or setter method parameter,
respectively. For more flexibility, including the ability to autowire fields and
multiple parameter methods, use the new annotation-based autowiring features. If you do,
the <code class="literal">ApplicationContext</code> is autowired into a field, constructor argument, or method
parameter that is expecting the <code class="literal">ApplicationContext</code> type if the field, constructor, or
method in question carries the <code class="literal">@Autowired</code> annotation. For more information, see
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation" title="4.9.2 @Autowired">Section&nbsp;4.9.2, “@Autowired”</a>.</p>
<p>When an ApplicationContext creates a class that implements the
<code class="literal">org.springframework.beans.factory.BeanNameAware</code> interface, the class is provided with
a reference to the name defined in its associated object definition.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> BeanNameAware {

    <span class="hl-keyword">void</span> setBeanName(string name) <span class="hl-keyword">throws</span> BeansException;

}</pre>

<p>The callback is invoked after population of normal bean properties but before an
initialization callback such as <code class="literal">InitializingBean</code> <span class="emphasis"><em>afterPropertiesSet</em></span> or a custom
init-method.</p>
</div>
<div class="section" title="4.6.3 Other Aware interfaces"><div class="titlepage"><div><div><h3 class="title"><a name="aware-list"></a>4.6.3&nbsp;Other Aware interfaces</h3></div></div></div>

<p>Besides <code class="literal">ApplicationContextAware</code> and <code class="literal">BeanNameAware</code> discussed above, Spring offers a
range of <code class="literal">Aware</code> interfaces that allow beans to indicate to the container that they
require a certain <span class="emphasis"><em>infrastructure</em></span> dependency. The most important <code class="literal">Aware</code> interfaces
are summarized below - as a general rule, the name is a good indication of the
dependency type:</p>
<div class="table"><a name="beans-factory-nature-aware-list"></a><p class="title"><b>Table&nbsp;4.4.&nbsp;Aware interfaces</b></p><div class="table-contents">

  <table summary="Aware interfaces" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Name</th><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Injected Dependency</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">Explained in…</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">ApplicationContextAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Declaring <code class="literal">ApplicationContext</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">Section&nbsp;4.6.2, “ApplicationContextAware and BeanNameAware”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">ApplicationEventPublisherAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Event publisher of the enclosing <code class="literal">ApplicationContext</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction" title="4.16 Additional Capabilities of the ApplicationContext">Section&nbsp;4.16, “Additional Capabilities of the ApplicationContext”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">BeanClassLoaderAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Class loader used to load the bean classes.</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-class" title="4.3.2 Instantiating beans">Section&nbsp;4.3.2, “Instantiating beans”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">BeanFactoryAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Declaring <code class="literal">BeanFactory</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">Section&nbsp;4.6.2, “ApplicationContextAware and BeanNameAware”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">BeanNameAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Name of the declaring bean</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">Section&nbsp;4.6.2, “ApplicationContextAware and BeanNameAware”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">BootstrapContextAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Resource adapter <code class="literal">BootstrapContext</code> the container runs in. Typically available only in
  JCA aware <code class="literal">ApplicationContext</code> s</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#cci" title="25. JCA CCI">Chapter&nbsp;25, <i>JCA CCI</i></a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">LoadTimeWeaverAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Defined <span class="emphasis"><em>weaver</em></span> for processing class definition at load time</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw" title="8.8.4 Load-time weaving with AspectJ in the Spring Framework">Section&nbsp;8.8.4, “Load-time weaving with AspectJ in the Spring Framework”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">MessageSourceAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Configured strategy for resolving messages (with support for parametrization and
  internationalization)</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-introduction" title="4.16 Additional Capabilities of the ApplicationContext">Section&nbsp;4.16, “Additional Capabilities of the ApplicationContext”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">NotificationPublisherAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Spring JMX notification publisher</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#jmx-notifications" title="24.7 Notifications">Section&nbsp;24.7, “Notifications”</a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">PortletConfigAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Current <code class="literal">PortletConfig</code> the container runs in. Valid only in a web-aware Spring
  <code class="literal">ApplicationContext</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet" title="19. Portlet MVC Framework">Chapter&nbsp;19, <i>Portlet MVC Framework</i></a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">PortletContextAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Current <code class="literal">PortletContext</code> the container runs in. Valid only in a web-aware Spring
  <code class="literal">ApplicationContext</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#portlet" title="19. Portlet MVC Framework">Chapter&nbsp;19, <i>Portlet MVC Framework</i></a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">ResourceLoaderAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Configured loader for low-level access to resources</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#resources" title="5. Resources">Chapter&nbsp;5, <i>Resources</i></a></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">ServletConfigAware</code></p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>Current <code class="literal">ServletConfig</code> the container runs in. Valid only in a web-aware Spring
  <code class="literal">ApplicationContext</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc" title="16. Web MVC framework">Chapter&nbsp;16, <i>Web MVC framework</i></a></p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">ServletContextAware</code></p></td><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>Current <code class="literal">ServletContext</code> the container runs in. Valid only in a web-aware Spring
  <code class="literal">ApplicationContext</code></p></td><td style="" align="left" valign="top"><p><a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc" title="16. Web MVC framework">Chapter&nbsp;16, <i>Web MVC framework</i></a></p></td></tr></tbody></table>
</div></div><br class="table-break">

<p>Note again that usage of these interfaces ties your code to the Spring API and does not
follow the Inversion of Control style. As such, they are recommended for infrastructure
beans that require programmatic access to the container.</p>
</div>
</div>
<div class="section" title="4.7 Bean definition inheritance"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-child-bean-definitions"></a>4.7&nbsp;Bean definition inheritance</h2></div></div></div>

<p>A bean definition can contain a lot of configuration information, including constructor
arguments, property values, and container-specific information such as initialization
method, static factory method name, and so on. A child bean definition inherits
configuration data from a parent definition. The child definition can override some
values, or add others, as needed. Using parent and child bean definitions can save a lot
of typing. Effectively, this is a form of templating.</p>
<p>If you work with an <code class="literal">ApplicationContext</code> interface programmatically, child bean
definitions are represented by the <code class="literal">ChildBeanDefinition</code> class. Most users do not work
with them on this level, instead configuring bean definitions declaratively in something
like the <code class="literal">ClassPathXmlApplicationContext</code>. When you use XML-based configuration
metadata, you indicate a child bean definition by using the <code class="literal">parent</code> attribute,
specifying the parent bean as the value of this attribute.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"inheritedTestBean"</span> <span class="hl-attribute">abstract</span>=<span class="hl-value">"true"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.TestBean"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"parent"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"age"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"1"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"inheritsWithDifferentClass"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.DerivedTestBean"</span>
        <span class="strong"><strong>parent="inheritedTestBean"</strong></span> init-method="initialize"&gt;
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"override"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-comment">&lt;!-- the age property value of 1 will be inherited from parent --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>A child bean definition uses the bean class from the parent definition if none is
specified, but can also override it. In the latter case, the child bean class must be
compatible with the parent, that is, it must accept the parent’s property values.</p>
<p>A child bean definition inherits constructor argument values, property values, and
method overrides from the parent, with the option to add new values. Any initialization
method, destroy method, and/or <code class="literal">static</code> factory method settings that you specify will
override the corresponding parent settings.</p>
<p>The remaining settings are <span class="emphasis"><em>always</em></span> taken from the child definition: <span class="emphasis"><em>depends on</em></span>,
<span class="emphasis"><em>autowire mode</em></span>, <span class="emphasis"><em>dependency check</em></span>, <span class="emphasis"><em>singleton</em></span>, <span class="emphasis"><em>scope</em></span>, <span class="emphasis"><em>lazy init</em></span>.</p>
<p>The preceding example explicitly marks the parent bean definition as abstract by using
the <code class="literal">abstract</code> attribute. If the parent definition does not specify a class, explicitly
marking the parent bean definition as <code class="literal">abstract</code> is required, as follows:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"inheritedTestBeanWithoutClass"</span> <span class="hl-attribute">abstract</span>=<span class="hl-value">"true"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"parent"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"age"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"1"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"inheritsWithClass"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.DerivedTestBean"</span>
        <span class="hl-attribute">parent</span>=<span class="hl-value">"inheritedTestBeanWithoutClass"</span> <span class="hl-attribute">init-method</span>=<span class="hl-value">"initialize"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"name"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"override"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-comment">&lt;!-- age will inherit the value of 1 from the parent bean definition--&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The parent bean cannot be instantiated on its own because it is incomplete, and it is
also explicitly marked as <code class="literal">abstract</code>. When a definition is <code class="literal">abstract</code> like this, it is
usable only as a pure template bean definition that serves as a parent definition for
child definitions. Trying to use such an <code class="literal">abstract</code> parent bean on its own, by referring
to it as a ref property of another bean or doing an explicit <code class="literal">getBean()</code> call with the
parent bean id, returns an error. Similarly, the container’s internal
<code class="literal">preInstantiateSingletons()</code> method ignores bean definitions that are defined as
abstract.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><code class="literal">ApplicationContext</code> pre-instantiates all singletons by default. Therefore, it is
important (at least for singleton beans) that if you have a (parent) bean definition
which you intend to use only as a template, and this definition specifies a class, you
must make sure to set the <span class="emphasis"><em>abstract</em></span> attribute to <span class="emphasis"><em>true</em></span>, otherwise the application
context will actually (attempt to) pre-instantiate the <code class="literal">abstract</code> bean.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="4.8 Container Extension Points"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-factory-extension"></a>4.8&nbsp;Container Extension Points</h2></div></div></div>

<p>Typically, an application developer does not need to subclass <code class="literal">ApplicationContext</code>
implementation classes. Instead, the Spring IoC container can be extended by plugging in
implementations of special integration interfaces. The next few sections describe these
integration interfaces.</p>
<div class="section" title="4.8.1 Customizing beans using a BeanPostProcessor"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-extension-bpp"></a>4.8.1&nbsp;Customizing beans using a BeanPostProcessor</h3></div></div></div>

<p>The <code class="literal">BeanPostProcessor</code> interface defines <span class="emphasis"><em>callback methods</em></span> that you can implement to
provide your own (or override the container’s default) instantiation logic,
dependency-resolution logic, and so forth. If you want to implement some custom logic
after the Spring container finishes instantiating, configuring, and initializing a bean,
you can plug in one or more <code class="literal">BeanPostProcessor</code> implementations.</p>
<p>You can configure multiple <code class="literal">BeanPostProcessor</code> instances, and you can control the order
in which these <code class="literal">BeanPostProcessor</code> s execute by setting the <code class="literal">order</code> property. You can
set this property only if the <code class="literal">BeanPostProcessor</code> implements the <code class="literal">Ordered</code> interface; if
you write your own <code class="literal">BeanPostProcessor</code> you should consider implementing the <code class="literal">Ordered</code>
interface too. For further details, consult the Javadoc for the <code class="literal">BeanPostProcessor</code> and
<code class="literal">Ordered</code> interfaces. See also the note below on
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#">programmatic
registration of <code class="literal">BeanPostProcessors</code></a></p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><code class="literal">BeanPostProcessor</code> s operate on bean (or object) <span class="emphasis"><em>instances</em></span>; that is to say, the
Spring IoC container instantiates a bean instance and <span class="emphasis"><em>then</em></span> <code class="literal">BeanPostProcessor</code> s do
their work.</p>
<p><code class="literal">BeanPostProcessor</code> s are scoped <span class="emphasis"><em>per-container</em></span>. This is only relevant if you are
using container hierarchies. If you define a <code class="literal">BeanPostProcessor</code> in one container, it
will <span class="emphasis"><em>only</em></span> post-process the beans in that container. In other words, beans that are
defined in one container are not post-processed by a <code class="literal">BeanPostProcessor</code> defined in
another container, even if both containers are part of the same hierarchy.</p>
<p>To change the actual bean definition (i.e., the <span class="emphasis"><em>blueprint</em></span> that defines the bean),
you instead need to use a <code class="literal">BeanFactoryPostProcessor</code> as described in
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-factory-postprocessors" title="4.8.2 Customizing configuration metadata with a BeanFactoryPostProcessor">Section&nbsp;4.8.2, “Customizing configuration metadata with a BeanFactoryPostProcessor”</a>.</p>
</td></tr></tbody></table></div>

<p>The <code class="literal">org.springframework.beans.factory.config.BeanPostProcessor</code> interface consists of
exactly two callback methods. When such a class is registered as a post-processor with
the container, for each bean instance that is created by the container, the
post-processor gets a callback from the container both <span class="emphasis"><em>before</em></span> container
initialization methods (such as InitializingBean’s <span class="emphasis"><em>afterPropertiesSet()</em></span> and any
declared init method) are called as well as <span class="emphasis"><em>after</em></span> any bean initialization callbacks.
The post-processor can take any action with the bean instance, including ignoring the
callback completely. A bean post-processor typically checks for callback interfaces or
may wrap a bean with a proxy. Some Spring AOP infrastructure classes are implemented as
bean post-processors in order to provide proxy-wrapping logic.</p>
<p>An <code class="literal">ApplicationContext</code> <span class="emphasis"><em>automatically detects</em></span> any beans that are defined in the
configuration metadata which implement the <code class="literal">BeanPostProcessor</code> interface. The
<code class="literal">ApplicationContext</code> registers these beans as post-processors so that they can be called
later upon bean creation. Bean post-processors can be deployed in the container just
like any other beans.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><span class="strong"><strong>Programmatically registering BeanPostProcessors</strong></span></p>
<p>While the recommended approach for <code class="literal">BeanPostProcessor</code> registration is through
<code class="literal">ApplicationContext</code> auto-detection (as described above), it is also possible to
register them <span class="emphasis"><em>programmatically</em></span> against a <code class="literal">ConfigurableBeanFactory</code> using the
<code class="literal">addBeanPostProcessor</code> method. This can be useful when needing to evaluate conditional
logic before registration, or even for copying bean post processors across contexts in a
hierarchy. Note however that <code class="literal">BeanPostProcessors</code> added programmatically <span class="emphasis"><em>do not
respect the <code class="literal">Ordered</code> interface</em></span>. Here it is the <span class="emphasis"><em>order of registration</em></span> that
dictates the order of execution. Note also that <code class="literal">BeanPostProcessors</code> registered
programmatically are always processed before those registered through auto-detection,
regardless of any explicit ordering.</p>
</td></tr></tbody></table></div>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><span class="strong"><strong>BeanPostProcessors and AOP auto-proxying</strong></span></p>
<p>Classes that implement the <code class="literal">BeanPostProcessor</code> interface are <span class="emphasis"><em>special</em></span> and are treated
differently by the container. All <code class="literal">BeanPostProcessors</code> <span class="emphasis"><em>and beans that they reference
directly</em></span> are instantiated on startup, as part of the special startup phase of the
<code class="literal">ApplicationContext</code>. Next, all <code class="literal">BeanPostProcessors</code> are registered in a sorted fashion
and applied to all further beans in the container. Because AOP auto-proxying is
implemented as a <code class="literal">BeanPostProcessor</code> itself, neither <code class="literal">BeanPostProcessors</code> nor the beans
they reference directly are eligible for auto-proxying, and thus do not have aspects
woven into them.</p>
<p>For any such bean, you should see an informational log message: "<span class="emphasis"><em>Bean foo is not
eligible for getting processed by all BeanPostProcessor interfaces (for example: not
eligible for auto-proxying)</em></span>".</p>
<p>Note that if you have beans wired into your <code class="literal">BeanPostProcessor</code> using autowiring or
<code class="literal">@Resource</code> (which may fall back to autowiring), Spring might access unexpected beans
when searching for type-matching dependency candidates, and therefore make them
ineligible for auto-proxying or other kinds of bean post-processing. For example, if you
have a dependency annotated with <code class="literal">@Resource</code> where the field/setter name does not
directly correspond to the declared name of a bean and no name attribute is used, then
Spring will access other beans for matching them by type.</p>
</td></tr></tbody></table></div>

<p>The following examples show how to write, register, and use <code class="literal">BeanPostProcessors</code> in an
<code class="literal">ApplicationContext</code>.</p>
<div class="section" title="Example: Hello World, BeanPostProcessor-style"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-extension-bpp-examples-hw"></a>Example: Hello World, BeanPostProcessor-style</h4></div></div></div>

<p>This first example illustrates basic usage. The example shows a custom
<code class="literal">BeanPostProcessor</code> implementation that invokes the <code class="literal">toString()</code> method of each bean as
it is created by the container and prints the resulting string to the system console.</p>
<p>Find below the custom <code class="literal">BeanPostProcessor</code> implementation class definition:</p>
<pre class="programlisting"><span class="hl-keyword">package</span> scripting;

<span class="hl-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;
<span class="hl-keyword">import</span> org.springframework.beans.BeansException;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> InstantiationTracingBeanPostProcessor <span class="hl-keyword">implements</span> BeanPostProcessor {

    <span class="hl-comment">// simply return the instantiated bean as-is</span>
    <span class="hl-keyword">public</span> Object postProcessBeforeInitialization(Object bean,
            String beanName) <span class="hl-keyword">throws</span> BeansException {
        <span class="hl-keyword">return</span> bean; <span class="hl-comment">// we could potentially return any object reference here...</span>
    }

    <span class="hl-keyword">public</span> Object postProcessAfterInitialization(Object bean,
            String beanName) <span class="hl-keyword">throws</span> BeansException {
        System.out.println(<span class="hl-string">"Bean </span><span class="emphasis"><em>" + beanName + "</em></span> created : <span class="hl-string">" + bean.toString());
</span>        <span class="hl-keyword">return</span> bean;
    }

}</pre>

<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:lang</span>=<span class="hl-value">"http://www.springframework.org/schema/lang"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;lang:groovy</span> <span class="hl-attribute">id</span>=<span class="hl-value">"messenger"</span>
            <span class="hl-attribute">script-source</span>=<span class="hl-value">"classpath:org/springframework/scripting/groovy/Messenger.groovy"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;lang:property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"message"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Fiona Apple Is Just So Dreamy."</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/lang:groovy&gt;</span>

    <span class="hl-comment">&lt;!--
    when the above bean (messenger) is instantiated, this custom
    BeanPostProcessor implementation will output the fact to the system console
    --&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"scripting.InstantiationTracingBeanPostProcessor"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>Notice how the <code class="literal">InstantiationTracingBeanPostProcessor</code> is simply defined. It does not
even have a name, and because it is a bean it can be dependency-injected just like any
other bean. (The preceding configuration also defines a bean that is backed by a Groovy
script. The Spring dynamic language support is detailed in the chapter entitled
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language" title="28. Dynamic language support">Chapter&nbsp;28, <i>Dynamic language support</i></a>.)</p>
<p>The following simple Java application executes the preceding code and configuration:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> org.springframework.context.ApplicationContext;
<span class="hl-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;
<span class="hl-keyword">import</span> org.springframework.scripting.Messenger;

<span class="hl-keyword">public</span> <span class="hl-keyword">final</span> <span class="hl-keyword">class</span> Boot {

    <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(<span class="hl-keyword">final</span> String[] args) <span class="hl-keyword">throws</span> Exception {
        ApplicationContext ctx = <span class="hl-keyword">new</span> ClassPathXmlApplicationContext(<span class="hl-string">"scripting/beans.xml"</span>);
        Messenger messenger = (Messenger) ctx.getBean(<span class="hl-string">"messenger"</span>);
        System.out.println(messenger);
    }

}</pre>

<p>The output of the preceding application resembles the following:</p>

<pre class="literallayout">Bean <span class="emphasis"><em>messenger</em></span> created : org.springframework.scripting.groovy.GroovyMessenger@272961
org.springframework.scripting.groovy.GroovyMessenger@272961</pre>

</div>
<div class="section" title="Example: The RequiredAnnotationBeanPostProcessor"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-extension-bpp-examples-rabpp"></a>Example: The RequiredAnnotationBeanPostProcessor</h4></div></div></div>

<p>Using callback interfaces or annotations in conjunction with a custom
<code class="literal">BeanPostProcessor</code> implementation is a common means of extending the Spring IoC
container. An example is Spring’s <code class="literal">RequiredAnnotationBeanPostProcessor</code> - a
<code class="literal">BeanPostProcessor</code> implementation that ships with the Spring distribution which ensures
that JavaBean properties on beans that are marked with an (arbitrary) annotation are
actually (configured to be) dependency-injected with a value.</p>
</div>
</div>
<div class="section" title="4.8.2 Customizing configuration metadata with a BeanFactoryPostProcessor"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-extension-factory-postprocessors"></a>4.8.2&nbsp;Customizing configuration metadata with a BeanFactoryPostProcessor</h3></div></div></div>

<p>The next extension point that we will look at is the
<code class="literal">org.springframework.beans.factory.config.BeanFactoryPostProcessor</code>. The semantics of
this interface are similar to those of the <code class="literal">BeanPostProcessor</code>, with one major
difference: <code class="literal">BeanFactoryPostProcessor</code> operates on the <span class="emphasis"><em>bean configuration metadata</em></span>;
that is, the Spring IoC container allows a <code class="literal">BeanFactoryPostProcessor</code> to read the
configuration metadata and potentially change it <span class="emphasis"><em>before</em></span> the container instantiates
any beans other than <code class="literal">BeanFactoryPostProcessors</code>.</p>
<p>You can configure multiple <code class="literal">BeanFactoryPostProcessors</code>, and you can control the order in
which these <code class="literal">BeanFactoryPostProcessors</code> execute by setting the <code class="literal">order</code> property.
However, you can only set this property if the <code class="literal">BeanFactoryPostProcessor</code> implements the
<code class="literal">Ordered</code> interface. If you write your own <code class="literal">BeanFactoryPostProcessor</code>, you should
consider implementing the <code class="literal">Ordered</code> interface too. Consult the Javadoc for the
<code class="literal">BeanFactoryPostProcessor</code> and <code class="literal">Ordered</code> interfaces for more details.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>If you want to change the actual bean <span class="emphasis"><em>instances</em></span> (i.e., the objects that are created
from the configuration metadata), then you instead need to use a <code class="literal">BeanPostProcessor</code>
(described above in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp" title="4.8.1 Customizing beans using a BeanPostProcessor">Section&nbsp;4.8.1, “Customizing beans using a BeanPostProcessor”</a>). While it is technically possible
to work with bean instances within a <code class="literal">BeanFactoryPostProcessor</code> (e.g., using
<code class="literal">BeanFactory.getBean()</code>), doing so causes premature bean instantiation, violating the
standard container lifecycle. This may cause negative side effects such as bypassing
bean post processing.</p>
<p>Also, <code class="literal">BeanFactoryPostProcessors</code> are scoped <span class="emphasis"><em>per-container</em></span>. This is only relevant if
you are using container hierarchies. If you define a <code class="literal">BeanFactoryPostProcessor</code> in one
container, it will <span class="emphasis"><em>only</em></span> be applied to the bean definitions in that container. Bean
definitions in one container will not be post-processed by <code class="literal">BeanFactoryPostProcessors</code>
in another container, even if both containers are part of the same hierarchy.</p>
</td></tr></tbody></table></div>

<p>A bean factory post-processor is executed automatically when it is declared inside an
<code class="literal">ApplicationContext</code>, in order to apply changes to the configuration metadata that
define the container. Spring includes a number of predefined bean factory
post-processors, such as <code class="literal">PropertyOverrideConfigurer</code> and
<code class="literal">PropertyPlaceholderConfigurer</code>. A custom <code class="literal">BeanFactoryPostProcessor</code> can also be used,
for example, to register custom property editors.</p>
<p><a name="null"></a>An <code class="literal">ApplicationContext</code> automatically detects any beans that are deployed into it that
implement the <code class="literal">BeanFactoryPostProcessor</code> interface. It uses these beans as bean factory
post-processors, at the appropriate time. You can deploy these post-processor beans as
you would any other bean.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>As with <code class="literal">BeanPostProcessor</code> s , you typically do not want to configure
<code class="literal">BeanFactoryPostProcessor</code> s for lazy initialization. If no other bean references a
<code class="literal">Bean(Factory)PostProcessor</code>, that post-processor will not get instantiated at all.
Thus, marking it for lazy initialization will be ignored, and the
<code class="literal">Bean(Factory)PostProcessor</code> will be instantiated eagerly even if you set the
<code class="literal">default-lazy-init</code> attribute to <code class="literal">true</code> on the declaration of your <code class="literal">&lt;beans /&gt;</code> element.</p>
</td></tr></tbody></table></div>

<div class="section" title="Example: the Class name substitution PropertyPlaceholderConfigurer"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-placeholderconfigurer"></a>Example: the Class name substitution PropertyPlaceholderConfigurer</h4></div></div></div>

<p>You use the <code class="literal">PropertyPlaceholderConfigurer</code> to externalize property values from a bean
definition in a separate file using the standard Java <code class="literal">Properties</code> format. Doing so
enables the person deploying an application to customize environment-specific properties
such as database URLs and passwords, without the complexity or risk of modifying the
main XML definition file or files for the container.</p>
<p>Consider the following XML-based configuration metadata fragment, where a <code class="literal">DataSource</code>
with placeholder values is defined. The example shows properties configured from an
external <code class="literal">Properties</code> file. At runtime, a <code class="literal">PropertyPlaceholderConfigurer</code> is applied to
the metadata that will replace some properties of the DataSource. The values to replace
are specified as <span class="emphasis"><em>placeholders</em></span> of the form <code class="literal">${property-name}</code> which follows the Ant /
log4j / JSP EL style.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"locations"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"classpath:com/foo/jdbc.properties"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"dataSource"</span> <span class="hl-attribute">destroy-method</span>=<span class="hl-value">"close"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"org.apache.commons.dbcp.BasicDataSource"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"driverClassName"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.driverClassName}"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"url"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.url}"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"username"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.username}"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"password"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.password}"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The actual values come from another file in the standard Java <code class="literal">Properties</code> format:</p>

<pre class="literallayout">jdbc.driverClassName=org.hsqldb.jdbcDriver
jdbc.url=jdbc:hsqldb:hsql://production:9002
jdbc.username=sa
jdbc.password=root</pre>

<p>Therefore, the string <code class="literal">${jdbc.username}</code> is replaced at runtime with the value <span class="emphasis"><em>sa</em></span>, and
the same applies for other placeholder values that match keys in the properties file.
The <code class="literal">PropertyPlaceholderConfigurer</code> checks for placeholders in most properties and
attributes of a bean definition. Furthermore, the placeholder prefix and suffix can be
customized.</p>
<p>With the <code class="literal">context</code> namespace introduced in Spring 2.5, it is possible to configure
property placeholders with a dedicated configuration element. One or more locations can
be provided as a comma-separated list in the <code class="literal">location</code> attribute.</p>
<pre class="programlisting"><span class="hl-tag">&lt;context:property-placeholder</span> <span class="hl-attribute">location</span>=<span class="hl-value">"classpath:com/foo/jdbc.properties"</span><span class="hl-tag">/&gt;</span></pre>

<p>The <code class="literal">PropertyPlaceholderConfigurer</code> not only looks for properties in the <code class="literal">Properties</code>
file you specify. By default it also checks against the Java <code class="literal">System</code> properties if it
cannot find a property in the specified properties files. You can customize this
behavior by setting the <code class="literal">systemPropertiesMode</code> property of the configurer with one of
the following three supported integer values:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
<span class="emphasis"><em>never</em></span> (0): Never check system properties
</li><li class="listitem">
<span class="emphasis"><em>fallback</em></span> (1): Check system properties if not resolvable in the specified
properties files. This is the default.
</li><li class="listitem">
<span class="emphasis"><em>override</em></span> (2): Check system properties first, before trying the specified
properties files. This allows system properties to override any other property source.
</li></ul></div>

<p>Consult the Javadoc for the <code class="literal">PropertyPlaceholderConfigurer</code> for more information.</p>
<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>You can use the <code class="literal">PropertyPlaceholderConfigurer</code> to substitute class names, which is
sometimes useful when you have to pick a particular implementation class at runtime. For
example:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"locations"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;value&gt;</span>classpath:com/foo/strategy.properties<span class="hl-tag">&lt;/value&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"properties"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;value&gt;</span>custom.strategy.class=com.foo.DefaultStrategy<span class="hl-tag">&lt;/value&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"serviceStrategy"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"${custom.strategy.class}"</span><span class="hl-tag">/&gt;</span></pre>

<p>If the class cannot be resolved at runtime to a valid class, resolution of the bean
fails when it is about to be created, which is during the <code class="literal">preInstantiateSingletons()</code>
phase of an <code class="literal">ApplicationContext</code> for a non-lazy-init bean.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="Example: the PropertyOverrideConfigurer"><div class="titlepage"><div><div><h4 class="title"><a name="beans-factory-overrideconfigurer"></a>Example: the PropertyOverrideConfigurer</h4></div></div></div>

<p>The <code class="literal">PropertyOverrideConfigurer</code>, another bean factory post-processor, resembles the
<code class="literal">PropertyPlaceholderConfigurer</code>, but unlike the latter, the original definitions can
have default values or no values at all for bean properties. If an overriding
<code class="literal">Properties</code> file does not have an entry for a certain bean property, the default
context definition is used.</p>
<p>Note that the bean definition is <span class="emphasis"><em>not</em></span> aware of being overridden, so it is not
immediately obvious from the XML definition file that the override configurer is being
used. In case of multiple <code class="literal">PropertyOverrideConfigurer</code> instances that define different
values for the same bean property, the last one wins, due to the overriding mechanism.</p>
<p>Properties file configuration lines take this format:</p>

<pre class="literallayout">beanName.property=value</pre>

<p>For example:</p>

<pre class="literallayout">dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql:mydb</pre>

<p>This example file can be used with a container definition that contains a bean called
<span class="emphasis"><em>dataSource</em></span>, which has <span class="emphasis"><em>driver</em></span> and <span class="emphasis"><em>url</em></span> properties.</p>
<p>Compound property names are also supported, as long as every component of the path
except the final property being overridden is already non-null (presumably initialized
by the constructors). In this example…</p>

<pre class="literallayout">foo.fred.bob.sammy=123</pre>

<div class="orderedlist"><ol class="orderedlist" type="i"><li class="listitem">
the <code class="literal">sammy</code> property of the <code class="literal">bob</code> property of the <code class="literal">fred</code> property of the <code class="literal">foo</code> bean
is set to the scalar value <code class="literal">123</code>.
</li></ol></div>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Specified override values are always <span class="emphasis"><em>literal</em></span> values; they are not translated into
bean references. This convention also applies when the original value in the XML bean
definition specifies a bean reference.</p>
</td></tr></tbody></table></div>

<p>With the <code class="literal">context</code> namespace introduced in Spring 2.5, it is possible to configure
property overriding with a dedicated configuration element:</p>
<pre class="programlisting"><span class="hl-tag">&lt;context:property-override</span> <span class="hl-attribute">location</span>=<span class="hl-value">"classpath:override.properties"</span><span class="hl-tag">/&gt;</span></pre>

</div>
</div>
<div class="section" title="4.8.3 Customizing instantiation logic with a FactoryBean"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factory-extension-factorybean"></a>4.8.3&nbsp;Customizing instantiation logic with a FactoryBean</h3></div></div></div>

<p>Implement the <code class="literal">org.springframework.beans.factory.FactoryBean</code> interface for objects that
<span class="emphasis"><em>are themselves factories</em></span>.</p>
<p>The <code class="literal">FactoryBean</code> interface is a point of pluggability into the Spring IoC container’s
instantiation logic. If you have complex initialization code that is better expressed in
Java as opposed to a (potentially) verbose amount of XML, you can create your own
<code class="literal">FactoryBean</code>, write the complex initialization inside that class, and then plug your
custom <code class="literal">FactoryBean</code> into the container.</p>
<p>The <code class="literal">FactoryBean</code> interface provides three methods:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
<code class="literal">Object getObject()</code>: returns an instance of the object this factory creates. The
instance can possibly be shared, depending on whether this factory returns singletons
or prototypes.
</li><li class="listitem">
<code class="literal">boolean isSingleton()</code>: returns <code class="literal">true</code> if this <code class="literal">FactoryBean</code> returns singletons,
<code class="literal">false</code> otherwise.
</li><li class="listitem">
<code class="literal">Class getObjectType()</code>: returns the object type returned by the <code class="literal">getObject()</code> method
or <code class="literal">null</code> if the type is not known in advance.
</li></ul></div>

<p>The <code class="literal">FactoryBean</code> concept and interface is used in a number of places within the Spring
Framework; more than 50 implementations of the <code class="literal">FactoryBean</code> interface ship with Spring
itself.</p>
<p>When you need to ask a container for an actual <code class="literal">FactoryBean</code> instance itself instead of
the bean it produces, preface the bean’s id with the ampersand symbol ( <code class="literal">&amp;</code>) when
calling the <code class="literal">getBean()</code> method of the <code class="literal">ApplicationContext</code>. So for a given <code class="literal">FactoryBean</code>
with an id of <code class="literal">myBean</code>, invoking <code class="literal">getBean("myBean")</code> on the container returns the
product of the <code class="literal">FactoryBean</code>; whereas, invoking <code class="literal">getBean("&amp;myBean")</code> returns the
<code class="literal">FactoryBean</code> instance itself.</p>
</div>
</div>
<div class="section" title="4.9 Annotation-based container configuration"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-annotation-config"></a>4.9&nbsp;Annotation-based container configuration</h2></div></div></div>

<div class="sidebar" title="Are annotations better than XML for configuring Spring?"><p class="title"><b>Are annotations better than XML for configuring Spring?</b></p>

<p>The introduction of annotation-based configurations raised the question of whether this
approach is <span class="emphasis"><em>better</em></span> than XML. The short answer is <span class="emphasis"><em>it depends</em></span>. The long answer is
that each approach has its pros and cons, and usually it is up to the developer to
decide which strategy suits them better. Due to the way they are defined, annotations
provide a lot of context in their declaration, leading to shorter and more concise
configuration. However, XML excels at wiring up components without touching their source
code or recompiling them. Some developers prefer having the wiring close to the source
while others argue that annotated classes are no longer POJOs and, furthermore, that the
configuration becomes decentralized and harder to control.</p>
<p>No matter the choice, Spring can accommodate both styles and even mix them together.
It’s worth pointing out that through its <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java" title="4.12 Java-based container configuration">JavaConfig</a> option, Spring allows
annotations to be used in a non-invasive way, without touching the target components
source code and that in terms of tooling, all configuration styles are supported by the
<a class="ulink" href="http://www.springsource.com/products/sts" target="_top">SpringSource Tool Suite</a>.</p>
</div>

<p>An alternative to XML setups is provided by annotation-based configuration which rely on
the bytecode metadata for wiring up components instead of angle-bracket declarations.
Instead of using XML to describe a bean wiring, the developer moves the configuration
into the component class itself by using annotations on the relevant class, method, or
field declaration. As mentioned in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp-examples-rabpp" title="Example: The RequiredAnnotationBeanPostProcessor">the section called “Example: The RequiredAnnotationBeanPostProcessor”</a>, using
a <code class="literal">BeanPostProcessor</code> in conjunction with annotations is a common means of extending the
Spring IoC container. For example, Spring 2.0 introduced the possibility of enforcing
required properties with the <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-required-annotation" title="4.9.1 @Required">@Required</a> annotation. Spring
2.5 made it possible to follow that same general approach to drive Spring’s dependency
injection. Essentially, the <code class="literal">@Autowired</code> annotation provides the same capabilities as
described in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire" title="4.4.5 Autowiring collaborators">Section&nbsp;4.4.5, “Autowiring collaborators”</a> but with more fine-grained control and wider
applicability. Spring 2.5 also added support for JSR-250 annotations such as
<code class="literal">@PostConstruct</code>, and <code class="literal">@PreDestroy</code>. Spring 3.0 added support for JSR-330 (Dependency
Injection for Java) annotations contained in the javax.inject package such as <code class="literal">@Inject</code>
and <code class="literal">@Named</code>. Details about those annotations can be found in the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-standard-annotations" title="4.11 Using JSR 330 Standard Annotations">relevant section</a>.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Annotation injection is performed <span class="emphasis"><em>before</em></span> XML injection, thus the latter
configuration will override the former for properties wired through both approaches.</p>
</td></tr></tbody></table></div>

<p>As always, you can register them as individual bean definitions, but they can also be
implicitly registered by including the following tag in an XML-based Spring
configuration (notice the inclusion of the <code class="literal">context</code> namespace):</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:context</span>=<span class="hl-value">"http://www.springframework.org/schema/context"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;context:annotation-config/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>(The implicitly registered post-processors include
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.html" target="_top"><code class="literal">AutowiredAnnotationBeanPostProcessor</code></a>,
 <a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.html" target="_top"><code class="literal">CommonAnnotationBeanPostProcessor</code></a>,
 <a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.html" target="_top"><code class="literal">PersistenceAnnotationBeanPostProcessor</code></a>,
as well as the aforementioned
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.html" target="_top"><code class="literal">RequiredAnnotationBeanPostProcessor</code></a>.)</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><code class="literal">&lt;context:annotation-config/&gt;</code> only looks for annotations on beans in the same
application context in which it is defined. This means that, if you put
<code class="literal">&lt;context:annotation-config/&gt;</code> in a <code class="literal">WebApplicationContext</code> for a <code class="literal">DispatcherServlet</code>,
it only checks for <code class="literal">@Autowired</code> beans in your controllers, and not your services. See
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-servlet" title="16.2 The DispatcherServlet">Section&nbsp;16.2, “The DispatcherServlet”</a> for more information.</p>
</td></tr></tbody></table></div>

<div class="section" title="4.9.1 @Required"><div class="titlepage"><div><div><h3 class="title"><a name="beans-required-annotation"></a>4.9.1&nbsp;@Required</h3></div></div></div>

<p>The <code class="literal">@Required</code> annotation applies to bean property setter methods, as in the following
example:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Required</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>This annotation simply indicates that the affected bean property must be populated at
configuration time, through an explicit property value in a bean definition or through
autowiring. The container throws an exception if the affected bean property has not been
populated; this allows for eager and explicit failure, avoiding <code class="literal">NullPointerException</code> s
or the like later on. It is still recommended that you put assertions into the bean
class itself, for example, into an init method. Doing so enforces those required
references and values even when you use the class outside of a container.</p>
</div>
<div class="section" title="4.9.2 @Autowired"><div class="titlepage"><div><div><h3 class="title"><a name="beans-autowired-annotation"></a>4.9.2&nbsp;@Autowired</h3></div></div></div>

<p>As expected, you can apply the <code class="literal">@Autowired</code> annotation to "traditional" setter methods:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>JSR 330’s @Inject annotation can be used in place of Spring’s <code class="literal">@Autowired</code> annotation in
the examples below. See <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-standard-annotations" title="4.11 Using JSR 330 Standard Annotations">here</a> for more details</p>
</td></tr></tbody></table></div>

<p>You can also apply the annotation to methods with arbitrary names and/or multiple
arguments:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <span class="hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class="hl-keyword">private</span> CustomerPreferenceDao customerPreferenceDao;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> prepare(MovieCatalog movieCatalog,
            CustomerPreferenceDao customerPreferenceDao) {
        <span class="hl-keyword">this</span>.movieCatalog = movieCatalog;
        <span class="hl-keyword">this</span>.customerPreferenceDao = customerPreferenceDao;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>You can apply <code class="literal">@Autowired</code> to constructors and fields:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class="hl-keyword">private</span> CustomerPreferenceDao customerPreferenceDao;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> MovieRecommender(CustomerPreferenceDao customerPreferenceDao) {
        <span class="hl-keyword">this</span>.customerPreferenceDao = customerPreferenceDao;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>It is also possible to provide <span class="emphasis"><em>all</em></span> beans of a particular type from the
<code class="literal">ApplicationContext</code> by adding the annotation to a field or method that expects an array
of that type:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> MovieCatalog[] movieCatalogs;

    <span class="hl-comment">// ...</span>

}</pre>

<p>The same applies for typed collections:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <span class="hl-keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieCatalogs(Set&lt;MovieCatalog&gt; movieCatalogs) {
        <span class="hl-keyword">this</span>.movieCatalogs = movieCatalogs;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>Your beans can implement the <code class="literal">org.springframework.core.Ordered</code> interface or use the
the <code class="literal">@Ordered</code> annotation if you want items in the array or list to be sorted into a
specific order.</p>
</td></tr></tbody></table></div>

<p>Even typed Maps can be autowired as long as the expected key type is <code class="literal">String</code>. The Map
values will contain all beans of the expected type, and the keys will contain the
corresponding bean names:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <span class="hl-keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieCatalogs(Map&lt;String, MovieCatalog&gt; movieCatalogs) {
        <span class="hl-keyword">this</span>.movieCatalogs = movieCatalogs;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>By default, the autowiring fails whenever <span class="emphasis"><em>zero</em></span> candidate beans are available; the
default behavior is to treat annotated methods, constructors, and fields as
indicating <span class="emphasis"><em>required</em></span> dependencies. This behavior can be changed as demonstrated below.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Autowired(required=false)</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Only <span class="emphasis"><em>one annotated constructor per-class</em></span> can be marked as <span class="emphasis"><em>required</em></span>, but multiple
non-required constructors can be annotated. In that case, each is considered among the
candidates and Spring uses the <span class="emphasis"><em>greediest</em></span> constructor whose dependencies can be
satisfied, that is the constructor that has the largest number of arguments.</p>
<p><code class="literal">@Autowired</code>'s <span class="emphasis"><em>required</em></span> attribute is recommended over the <code class="literal">@Required</code> annotation.
The <span class="emphasis"><em>required</em></span> attribute indicates that the property is not required for autowiring
purposes, the property is ignored if it cannot be autowired. <code class="literal">@Required</code>, on the other
hand, is stronger in that it enforces the property that was set by any means supported
by the container. If no value is injected, a corresponding exception is raised.</p>
</td></tr></tbody></table></div>

<p>You can also use <code class="literal">@Autowired</code> for interfaces that are well-known resolvable
dependencies: <code class="literal">BeanFactory</code>, <code class="literal">ApplicationContext</code>, <code class="literal">Environment</code>, <code class="literal">ResourceLoader</code>,
<code class="literal">ApplicationEventPublisher</code>, and <code class="literal">MessageSource</code>. These interfaces and their extended
interfaces, such as <code class="literal">ConfigurableApplicationContext</code> or <code class="literal">ResourcePatternResolver</code>, are
automatically resolved, with no special setup necessary.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> ApplicationContext context;

    <span class="hl-keyword">public</span> MovieRecommender() {
    }

    <span class="hl-comment">// ...</span>

}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p><code class="literal">@Autowired</code>, <code class="literal">@Inject</code>, <code class="literal">@Resource</code>, and <code class="literal">@Value</code> annotations are handled by a Spring
<code class="literal">BeanPostProcessor</code> implementations which in turn means that you <span class="emphasis"><em>cannot</em></span> apply these
annotations within your own <code class="literal">BeanPostProcessor</code> or <code class="literal">BeanFactoryPostProcessor</code> types (if
any). These types must be <span class="emphasis"><em>wired up</em></span> explicitly via XML or using a Spring <code class="literal">@Bean</code> method.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="4.9.3 Fine-tuning annotation-based autowiring with qualifiers"><div class="titlepage"><div><div><h3 class="title"><a name="beans-autowired-annotation-qualifiers"></a>4.9.3&nbsp;Fine-tuning annotation-based autowiring with qualifiers</h3></div></div></div>

<p>Because autowiring by type may lead to multiple candidates, it is often necessary to
have more control over the selection process. One way to accomplish this is with
Spring’s <code class="literal">@Qualifier</code> annotation. You can associate qualifier values with specific
arguments, narrowing the set of type matches so that a specific bean is chosen for each
argument. In the simplest case, this can be a plain descriptive value:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="strong"><strong>@Qualifier("main")</strong></span>
    <span class="hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class="hl-comment">// ...</span>

}</pre>

<p>The <code class="literal">@Qualifier</code> annotation can also be specified on individual constructor arguments or
method parameters:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <span class="hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class="hl-keyword">private</span> CustomerPreferenceDao customerPreferenceDao;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> prepare(<span class="strong"><strong>@Qualifier("main")</strong></span>MovieCatalog movieCatalog,
            CustomerPreferenceDao customerPreferenceDao) {
        <span class="hl-keyword">this</span>.movieCatalog = movieCatalog;
        <span class="hl-keyword">this</span>.customerPreferenceDao = customerPreferenceDao;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>The corresponding bean definitions appear as follows. The bean with qualifier value
"main" is wired with the constructor argument that is qualified with the same value.</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:context</span>=<span class="hl-value">"http://www.springframework.org/schema/context"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="strong"><strong>&lt;qualifier value="main"/&gt;</strong></span>

        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="strong"><strong>&lt;qualifier value="action"/&gt;</strong></span>

        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"movieRecommender"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.MovieRecommender"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>For a fallback match, the bean name is considered a default qualifier value. Thus you
can define the bean with an id "main" instead of the nested qualifier element, leading
to the same matching result. However, although you can use this convention to refer to
specific beans by name, <code class="literal">@Autowired</code> is fundamentally about type-driven injection with
optional semantic qualifiers. This means that qualifier values, even with the bean name
fallback, always have narrowing semantics within the set of type matches; they do not
semantically express a reference to a unique bean id. Good qualifier values are "main"
or "EMEA" or "persistent", expressing characteristics of a specific component that are
independent from the bean id, which may be auto-generated in case of an anonymous bean
definition like the one in the preceding example.</p>
<p>Qualifiers also apply to typed collections, as discussed above, for example, to
<code class="literal">Set&lt;MovieCatalog&gt;</code>. In this case, all matching beans according to the declared
qualifiers are injected as a collection. This implies that qualifiers do not have to be
unique; they rather simply constitute filtering criteria. For example, you can define
multiple <code class="literal">MovieCatalog</code> beans with the same qualifier value "action"; all of which would
be injected into a <code class="literal">Set&lt;MovieCatalog&gt;</code> annotated with <code class="literal">@Qualifier("action")</code>.</p>
<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>If you intend to express annotation-driven injection by name, do not primarily use
<code class="literal">@Autowired</code>, even if is technically capable of referring to a bean name through
<code class="literal">@Qualifier</code> values. Instead, use the JSR-250 <code class="literal">@Resource</code> annotation, which is
semantically defined to identify a specific target component by its unique name, with
the declared type being irrelevant for the matching process.</p>
<p>As a specific consequence of this semantic difference, beans that are themselves defined
as a collection or map type cannot be injected through <code class="literal">@Autowired</code>, because type
matching is not properly applicable to them. Use <code class="literal">@Resource</code> for such beans, referring
to the specific collection or map bean by unique name.</p>
<p><code class="literal">@Autowired</code> applies to fields, constructors, and multi-argument methods, allowing for
narrowing through qualifier annotations at the parameter level. By contrast, <code class="literal">@Resource</code>
is supported only for fields and bean property setter methods with a single argument. As
a consequence, stick with qualifiers if your injection target is a constructor or a
multi-argument method.</p>
</td></tr></tbody></table></div>

<p>You can create your own custom qualifier annotations. Simply define an annotation and
provide the <code class="literal">@Qualifier</code> annotation within your definition:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></i>
<i><span class="hl-annotation" style="color: gray">@Retention(RetentionPolicy.RUNTIME)</span></i>
<span class="strong"><strong>@Qualifier</strong></span>
<span class="hl-keyword">public</span> <i><span class="hl-annotation" style="color: gray">@interface</span></i> Genre {

    String value();
}</pre>

<p>Then you can provide the custom qualifier on autowired fields and parameters:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="strong"><strong>@Genre("Action")</strong></span>
    <span class="hl-keyword">private</span> MovieCatalog actionCatalog;
    <span class="hl-keyword">private</span> MovieCatalog comedyCatalog;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setComedyCatalog(<span class="strong"><strong>@Genre("Comedy")</strong></span> MovieCatalog comedyCatalog) {
        <span class="hl-keyword">this</span>.comedyCatalog = comedyCatalog;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>Next, provide the information for the candidate bean definitions. You can add
<code class="literal">&lt;qualifier/&gt;</code> tags as sub-elements of the <code class="literal">&lt;bean/&gt;</code> tag and then specify the <code class="literal">type</code> and
<code class="literal">value</code> to match your custom qualifier annotations. The type is matched against the
fully-qualified class name of the annotation. Or, as a convenience if no risk of
conflicting names exists, you can use the short class name. Both approaches are
demonstrated in the following example.</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:context</span>=<span class="hl-value">"http://www.springframework.org/schema/context"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="strong"><strong>&lt;qualifier type="Genre" value="Action"/&gt;</strong></span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="strong"><strong>_&lt;qualifier type="example.Genre" value="Comedy"/&gt;</strong></span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"movieRecommender"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.MovieRecommender"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>In <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-classpath-scanning" title="4.10 Classpath scanning and managed components">Section&nbsp;4.10, “Classpath scanning and managed components”</a>, you will see an annotation-based alternative to
providing the qualifier metadata in XML. Specifically, see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-qualifiers" title="4.10.8 Providing qualifier metadata with annotations">Section&nbsp;4.10.8, “Providing qualifier metadata with annotations”</a>.</p>
<p>In some cases, it may be sufficient to use an annotation without a value. This may be
useful when the annotation serves a more generic purpose and can be applied across
several different types of dependencies. For example, you may provide an <span class="emphasis"><em>offline</em></span>
catalog that would be searched when no Internet connection is available. First define
the simple annotation:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></i>
<i><span class="hl-annotation" style="color: gray">@Retention(RetentionPolicy.RUNTIME)</span></i>
<i><span class="hl-annotation" style="color: gray">@Qualifier</span></i>
<span class="hl-keyword">public</span> <i><span class="hl-annotation" style="color: gray">@interface</span></i> Offline {

}</pre>

<p>Then add the annotation to the field or property to be autowired:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="strong"><strong>@Offline</strong></span>
    <span class="hl-keyword">private</span> MovieCatalog offlineCatalog;

    <span class="hl-comment">// ...</span>

}</pre>

<p>Now the bean definition only needs a qualifier <code class="literal">type</code>:</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
    <span class="strong"><strong>&lt;qualifier type="Offline"/&gt;</strong></span>
    <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>You can also define custom qualifier annotations that accept named attributes in
addition to or instead of the simple <code class="literal">value</code> attribute. If multiple attribute values are
then specified on a field or parameter to be autowired, a bean definition must match
<span class="emphasis"><em>all</em></span> such attribute values to be considered an autowire candidate. As an example,
consider the following annotation definition:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></i>
<i><span class="hl-annotation" style="color: gray">@Retention(RetentionPolicy.RUNTIME)</span></i>
<i><span class="hl-annotation" style="color: gray">@Qualifier</span></i>
<span class="hl-keyword">public</span> <i><span class="hl-annotation" style="color: gray">@interface</span></i> MovieQualifier {

    String genre();

    Format format();

}</pre>

<p>In this case <code class="literal">Format</code> is an enum:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> enum Format {
    VHS, DVD, BLURAY
}</pre>

<p>The fields to be autowired are annotated with the custom qualifier and include values
for both attributes: <code class="literal">genre</code> and <code class="literal">format</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <i><span class="hl-annotation" style="color: gray">@MovieQualifier(format=Format.VHS, genre="Action")</span></i>
    <span class="hl-keyword">private</span> MovieCatalog actionVhsCatalog;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <i><span class="hl-annotation" style="color: gray">@MovieQualifier(format=Format.VHS, genre="Comedy")</span></i>
    <span class="hl-keyword">private</span> MovieCatalog comedyVhsCatalog;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <i><span class="hl-annotation" style="color: gray">@MovieQualifier(format=Format.DVD, genre="Action")</span></i>
    <span class="hl-keyword">private</span> MovieCatalog actionDvdCatalog;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <i><span class="hl-annotation" style="color: gray">@MovieQualifier(format=Format.BLURAY, genre="Comedy")</span></i>
    <span class="hl-keyword">private</span> MovieCatalog comedyBluRayCatalog;

    <span class="hl-comment">// ...</span>

}</pre>

<p>Finally, the bean definitions should contain matching qualifier values. This example
also demonstrates that bean <span class="emphasis"><em>meta</em></span> attributes may be used instead of the
<code class="literal">&lt;qualifier/&gt;</code> sub-elements. If available, the <code class="literal">&lt;qualifier/&gt;</code> and its attributes take
precedence, but the autowiring mechanism falls back on the values provided within the
<code class="literal">&lt;meta/&gt;</code> tags if no such qualifier is present, as in the last two bean definitions in
the following example.</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:context</span>=<span class="hl-value">"http://www.springframework.org/schema/context"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;qualifier</span> <span class="hl-attribute">type</span>=<span class="hl-value">"MovieQualifier"</span><span class="hl-tag">&gt;</span>
            <span class="hl-tag">&lt;attribute</span> <span class="hl-attribute">key</span>=<span class="hl-value">"format"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"VHS"</span><span class="hl-tag">/&gt;</span>
            <span class="hl-tag">&lt;attribute</span> <span class="hl-attribute">key</span>=<span class="hl-value">"genre"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Action"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;/qualifier&gt;</span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;qualifier</span> <span class="hl-attribute">type</span>=<span class="hl-value">"MovieQualifier"</span><span class="hl-tag">&gt;</span>
            <span class="hl-tag">&lt;attribute</span> <span class="hl-attribute">key</span>=<span class="hl-value">"format"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"VHS"</span><span class="hl-tag">/&gt;</span>
            <span class="hl-tag">&lt;attribute</span> <span class="hl-attribute">key</span>=<span class="hl-value">"genre"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Comedy"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;/qualifier&gt;</span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;meta</span> <span class="hl-attribute">key</span>=<span class="hl-value">"format"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"DVD"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;meta</span> <span class="hl-attribute">key</span>=<span class="hl-value">"genre"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Action"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"example.SimpleMovieCatalog"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;meta</span> <span class="hl-attribute">key</span>=<span class="hl-value">"format"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"BLURAY"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;meta</span> <span class="hl-attribute">key</span>=<span class="hl-value">"genre"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"Comedy"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-comment">&lt;!-- inject any dependencies required by this bean --&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

</div>
<div class="section" title="4.9.4 Using generics as autowiring qualifiers"><div class="titlepage"><div><div><h3 class="title"><a name="beans-generics-as-qualifiers"></a>4.9.4&nbsp;Using generics as autowiring qualifiers</h3></div></div></div>

<p>In addition to the <code class="literal">@Qualifier</code> annotation, it is also possible to use Java generic types
as an implicit form of qualification. For example, suppose you have the following
configuration:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyConfiguration {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> StringStore stringStore() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> StringStore();
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> IntegerStore integerStore() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> IntegerStore();
    }

}</pre>

<p>Assuming that beans above implement a generic interface, i.e. <code class="literal">Store&lt;String&gt;</code> and
<code class="literal">Store&lt;Integer&gt;</code>, you can <code class="literal">@Autowire</code> the <code class="literal">Store</code> interface and the <span class="emphasis"><em>generic</em></span> will
be used as a qualifier:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
<span class="hl-keyword">private</span> Store&lt;String&gt; s1; <span class="hl-comment">// &lt;String&gt; qualifier, injects the stringStore bean</span>

<i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
<span class="hl-keyword">private</span> Store&lt;Integer&gt; s2; <span class="hl-comment">// &lt;Integer&gt; qualifier, injects the integerStore bean</span></pre>

<p>Generic qualifiers also apply when autowiring Lists, Maps and Arrays:</p>
<pre class="programlisting"><span class="hl-comment">// Inject all Store beans as long as they have an &lt;Integer&gt; generic</span>
<span class="hl-comment">// Store&lt;String&gt; beans will not appear in this list</span>
<i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
<span class="hl-keyword">private</span> List&lt;Store&lt;Integer&gt;&gt; s;</pre>

</div>
<div class="section" title="4.9.5 CustomAutowireConfigurer"><div class="titlepage"><div><div><h3 class="title"><a name="beans-custom-autowire-configurer"></a>4.9.5&nbsp;CustomAutowireConfigurer</h3></div></div></div>

<p>The
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/CustomAutowireConfigurer.html" target="_top"><code class="literal">CustomAutowireConfigurer</code></a>
is a <code class="literal">BeanFactoryPostProcessor</code> that enables you to register your own custom qualifier
annotation types even if they are not annotated with Spring’s <code class="literal">@Qualifier</code> annotation.</p>
<pre class="programlisting"><span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"customAutowireConfigurer"</span>
        <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.beans.factory.annotation.CustomAutowireConfigurer"</span><span class="hl-tag">&gt;</span>
    <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"customQualifierTypes"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;set&gt;</span>
            <span class="hl-tag">&lt;value&gt;</span>example.CustomQualifier<span class="hl-tag">&lt;/value&gt;</span>
        <span class="hl-tag">&lt;/set&gt;</span>
    <span class="hl-tag">&lt;/property&gt;</span>
<span class="hl-tag">&lt;/bean&gt;</span></pre>

<p>The <code class="literal">AutowireCandidateResolver</code> determines autowire candidates by:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
the <code class="literal">autowire-candidate</code> value of each bean definition
</li><li class="listitem">
any <code class="literal">default-autowire-candidates</code> pattern(s) available on the <code class="literal">&lt;beans/&gt;</code> element
</li><li class="listitem">
the presence of <code class="literal">@Qualifier</code> annotations and any custom annotations registered
with the <code class="literal">CustomAutowireConfigurer</code>
</li></ul></div>

<p>When multiple beans qualify as autowire candidates, the determination of a "primary" is
the following: if exactly one bean definition among the candidates has a <code class="literal">primary</code>
attribute set to <code class="literal">true</code>, it will be selected.</p>
</div>
<div class="section" title="4.9.6 @Resource"><div class="titlepage"><div><div><h3 class="title"><a name="beans-resource-annotation"></a>4.9.6&nbsp;@Resource</h3></div></div></div>

<p>Spring also supports injection using the JSR-250 <code class="literal">@Resource</code> annotation on fields or
bean property setter methods. This is a common pattern in Java EE 5 and 6, for example
in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring supports this pattern for
Spring-managed objects as well.</p>
<p><code class="literal">@Resource</code> takes a name attribute, and by default Spring interprets that value as the
bean name to be injected. In other words, it follows <span class="emphasis"><em>by-name</em></span> semantics, as
demonstrated in this example:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <span class="strong"><strong>@Resource(name="myMovieFinder")</strong></span>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

}</pre>

<p>If no name is specified explicitly, the default name is derived from the field name or
setter method. In case of a field, it takes the field name; in case of a setter method,
it takes the bean property name. So the following example is going to have the bean with
name "movieFinder" injected into its setter method:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <span class="strong"><strong>@Resource</strong></span>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The name provided with the annotation is resolved as a bean name by the
<code class="literal">ApplicationContext</code> of which the <code class="literal">CommonAnnotationBeanPostProcessor</code> is aware. The
names can be resolved through JNDI if you configure Spring’s
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/support/SimpleJndiBeanFactory.html" target="_top"><code class="literal">SimpleJndiBeanFactory</code></a>
explicitly. However, it is recommended that you rely on the default behavior and simply
use Spring’s JNDI lookup capabilities to preserve the level of indirection.</p>
</td></tr></tbody></table></div>

<p>In the exclusive case of <code class="literal">@Resource</code> usage with no explicit name specified, and similar
to <code class="literal">@Autowired</code>, <code class="literal">@Resource</code> finds a primary type match instead of a specific named bean
and resolves well-known resolvable dependencies: the <code class="literal">BeanFactory</code>,
<code class="literal">ApplicationContext</code>, <code class="literal">ResourceLoader</code>, <code class="literal">ApplicationEventPublisher</code>, and <code class="literal">MessageSource</code>
interfaces.</p>
<p>Thus in the following example, the <code class="literal">customerPreferenceDao</code> field first looks for a bean
named customerPreferenceDao, then falls back to a primary type match for the type
<code class="literal">CustomerPreferenceDao</code>. The "context" field is injected based on the known resolvable
dependency type <code class="literal">ApplicationContext</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender {

    <i><span class="hl-annotation" style="color: gray">@Resource</span></i>
    <span class="hl-keyword">private</span> CustomerPreferenceDao customerPreferenceDao;

    <i><span class="hl-annotation" style="color: gray">@Resource</span></i>
    <span class="hl-keyword">private</span> ApplicationContext context;

    <span class="hl-keyword">public</span> MovieRecommender() {
    }

    <span class="hl-comment">// ...</span>

}</pre>

</div>
<div class="section" title="4.9.7 @PostConstruct and @PreDestroy"><div class="titlepage"><div><div><h3 class="title"><a name="beans-postconstruct-and-predestroy-annotations"></a>4.9.7&nbsp;@PostConstruct and @PreDestroy</h3></div></div></div>

<p>The <code class="literal">CommonAnnotationBeanPostProcessor</code> not only recognizes the <code class="literal">@Resource</code> annotation
but also the JSR-250 <span class="emphasis"><em>lifecycle</em></span> annotations. Introduced in Spring 2.5, the support
for these annotations offers yet another alternative to those described in
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks">initialization callbacks</a> and
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean" title="Destruction callbacks">destruction callbacks</a>. Provided that the
<code class="literal">CommonAnnotationBeanPostProcessor</code> is registered within the Spring
<code class="literal">ApplicationContext</code>, a method carrying one of these annotations is invoked at the same
point in the lifecycle as the corresponding Spring lifecycle interface method or
explicitly declared callback method. In the example below, the cache will be
pre-populated upon initialization and cleared upon destruction.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> CachingMovieLister {

    <i><span class="hl-annotation" style="color: gray">@PostConstruct</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> populateMovieCache() {
        <span class="hl-comment">// populates the movie cache upon initialization...</span>
    }

    <i><span class="hl-annotation" style="color: gray">@PreDestroy</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> clearMovieCache() {
        <span class="hl-comment">// clears the movie cache upon destruction...</span>
    }

}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>For details about the effects of combining various lifecycle mechanisms, see
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-combined-effects" title="Combining lifecycle mechanisms">the section called “Combining lifecycle mechanisms”</a>.</p>
</td></tr></tbody></table></div>

</div>
</div>
<div class="section" title="4.10 Classpath scanning and managed components"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-classpath-scanning"></a>4.10&nbsp;Classpath scanning and managed components</h2></div></div></div>

<p>Most examples in this chapter use XML to specify the configuration metadata that
produces each <code class="literal">BeanDefinition</code> within the Spring container. The previous section
(<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config" title="4.9 Annotation-based container configuration">Section&nbsp;4.9, “Annotation-based container configuration”</a>) demonstrates how to provide a lot of the configuration
metadata through source-level annotations. Even in those examples, however, the "base"
bean definitions are explicitly defined in the XML file, while the annotations only
drive the dependency injection. This section describes an option for implicitly
detecting the <span class="emphasis"><em>candidate components</em></span> by scanning the classpath. Candidate components
are classes that match against a filter criteria and have a corresponding bean
definition registered with the container. This removes the need to use XML to perform
bean registration, instead you can use annotations (for example @Component), AspectJ
type expressions, or your own custom filter criteria to select which classes will have
bean definitions registered with the container.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Starting with Spring 3.0, many features provided by the Spring JavaConfig project are
part of the core Spring Framework. This allows you to define beans using Java rather
than using the traditional XML files. Take a look at the <code class="literal">@Configuration</code>, <code class="literal">@Bean</code>,
<code class="literal">@Import</code>, and <code class="literal">@DependsOn</code> annotations for examples of how to use these new features.</p>
</td></tr></tbody></table></div>

<div class="section" title="4.10.1 @Component and further stereotype annotations"><div class="titlepage"><div><div><h3 class="title"><a name="beans-stereotype-annotations"></a>4.10.1&nbsp;@Component and further stereotype annotations</h3></div></div></div>

<p>The <code class="literal">@Repository</code> annotation is a marker for any class that fulfills the role or
<span class="emphasis"><em>stereotype</em></span> (also known as Data Access Object or DAO) of a repository. Among the uses
of this marker is the automatic translation of exceptions as described in
<a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#orm-exception-translation" title="14.2.2 Exception translation">Section&nbsp;14.2.2, “Exception translation”</a>.</p>
<p>Spring provides further stereotype annotations: <code class="literal">@Component</code>, <code class="literal">@Service</code>, and
<code class="literal">@Controller</code>. <code class="literal">@Component</code> is a generic stereotype for any Spring-managed component.
<code class="literal">@Repository</code>, <code class="literal">@Service</code>, and <code class="literal">@Controller</code> are specializations of <code class="literal">@Component</code> for
more specific use cases, for example, in the persistence, service, and presentation
layers, respectively. Therefore, you can annotate your component classes with
<code class="literal">@Component</code>, but by annotating them with <code class="literal">@Repository</code>, <code class="literal">@Service</code>, or <code class="literal">@Controller</code>
instead, your classes are more properly suited for processing by tools or associating
with aspects. For example, these stereotype annotations make ideal targets for
pointcuts. It is also possible that <code class="literal">@Repository</code>, <code class="literal">@Service</code>, and <code class="literal">@Controller</code> may
carry additional semantics in future releases of the Spring Framework. Thus, if you are
choosing between using <code class="literal">@Component</code> or <code class="literal">@Service</code> for your service layer, <code class="literal">@Service</code> is
clearly the better choice. Similarly, as stated above, <code class="literal">@Repository</code> is already
supported as a marker for automatic exception translation in your persistence layer.</p>
</div>
<div class="section" title="4.10.2 Meta-annotations"><div class="titlepage"><div><div><h3 class="title"><a name="beans-meta-annotations"></a>4.10.2&nbsp;Meta-annotations</h3></div></div></div>

<p>Many of the annotations provided by Spring can be used as "meta-annotations" in
your own code. A meta-annotation is simply an annotation, that can be applied to another
annotation. For example, The <code class="literal">@Service</code> annotation mentioned above is meta-annotated with
with <code class="literal">@Component</code>:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Target({ElementType.TYPE})</span></i>
<i><span class="hl-annotation" style="color: gray">@Retention(RetentionPolicy.RUNTIME)</span></i>
<i><span class="hl-annotation" style="color: gray">@Documented</span></i>
<span class="strong"><strong>@Component</strong></span> <span class="hl-comment">// Spring will see this and treat @Service in the same way as @Component</span>
<span class="hl-keyword">public</span> <i><span class="hl-annotation" style="color: gray">@interface</span></i> Service {

    <span class="hl-comment">// ....</span>

}</pre>

<p>Meta-annotations can also be combined together to create <span class="emphasis"><em>composed annotations</em></span>. For
example, the <code class="literal">@RestController</code> annotation from Spring MVC is <span class="emphasis"><em>composed</em></span> of
<code class="literal">@Controller</code> and <code class="literal">@ResponseBody</code>.</p>
<p>With the exception of <code class="literal">value()</code>, meta-annotated types may redeclare attributes from the
source annotation to allow user customization. This can be particularly useful when you
want to only expose a subset of the source annotation attributes. For example, here is a
custom <code class="literal">@Scope</code> annotation that defines <code class="literal">session</code> scope, but still allows customization
of the <code class="literal">proxyMode</code>.</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Target({ElementType.TYPE})</span></i>
<i><span class="hl-annotation" style="color: gray">@Retention(RetentionPolicy.RUNTIME)</span></i>
<i><span class="hl-annotation" style="color: gray">@Documented</span></i>
<span class="strong"><strong>@Scope("session")</strong></span>
<span class="hl-keyword">public</span> <i><span class="hl-annotation" style="color: gray">@interface</span></i> SessionScope {

    ScopedProxyMode proxyMode() <span class="hl-keyword">default</span> ScopedProxyMode.DEFAULT

}</pre>

</div>
<div class="section" title="4.10.3 Automatically detecting classes and registering bean definitions"><div class="titlepage"><div><div><h3 class="title"><a name="beans-scanning-autodetection"></a>4.10.3&nbsp;Automatically detecting classes and registering bean definitions</h3></div></div></div>

<p>Spring can automatically detect stereotyped classes and register corresponding
<code class="literal">BeanDefinition</code> s with the <code class="literal">ApplicationContext</code>. For example, the following two classes
are eligible for such autodetection:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Service</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">public</span> SimpleMovieLister(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

}</pre>

<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Repository</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> JpaMovieFinder <span class="hl-keyword">implements</span> MovieFinder {
    <span class="hl-comment">// implementation elided for clarity</span>
}</pre>

<p>To autodetect these classes and register the corresponding beans, you need to include
the following element in XML, where the base-package element is a common parent package
for the two classes. (Alternatively, you can specify a comma-separated list that
includes the parent package of each class.)</p>
<pre class="programlisting"><span class="hl-directive" style="color: maroon">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hl-tag">&lt;beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span>
    <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="hl-attribute">xmlns:context</span>=<span class="hl-value">"http://www.springframework.org/schema/context"</span>
    <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="hl-tag">&gt;</span>

    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span><span class="hl-tag">/&gt;</span>

<span class="hl-tag">&lt;/beans&gt;</span></pre>

<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>The use of <code class="literal">&lt;context:component-scan&gt;</code> implicitly enables the functionality of
<code class="literal">&lt;context:annotation-config&gt;</code>. There is usually no need to include the
<code class="literal">&lt;context:annotation-config&gt;</code> element when using <code class="literal">&lt;context:component-scan&gt;</code>.</p>
</td></tr></tbody></table></div>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The scanning of classpath packages requires the presence of corresponding directory
entries in the classpath. When you build JARs with Ant, make sure that you do <span class="emphasis"><em>not</em></span>
activate the files-only switch of the JAR task.</p>
</td></tr></tbody></table></div>

<p>Furthermore, the <code class="literal">AutowiredAnnotationBeanPostProcessor</code> and
<code class="literal">CommonAnnotationBeanPostProcessor</code> are both included implicitly when you use the
component-scan element. That means that the two components are autodetected <span class="emphasis"><em>and</em></span>
wired together - all without any bean configuration metadata provided in XML.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>You can disable the registration of <code class="literal">AutowiredAnnotationBeanPostProcessor</code> and
<code class="literal">CommonAnnotationBeanPostProcessor</code> by including the <span class="emphasis"><em>annotation-config</em></span> attribute
with a value of false.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="4.10.4 Using filters to customize scanning"><div class="titlepage"><div><div><h3 class="title"><a name="beans-scanning-filters"></a>4.10.4&nbsp;Using filters to customize scanning</h3></div></div></div>

<p>By default, classes annotated with <code class="literal">@Component</code>, <code class="literal">@Repository</code>, <code class="literal">@Service</code>,
<code class="literal">@Controller</code>, or a custom annotation that itself is annotated with <code class="literal">@Component</code> are the
only detected candidate components. However, you can modify and extend this behavior
simply by applying custom filters. Add them as <span class="emphasis"><em>include-filter</em></span> or <span class="emphasis"><em>exclude-filter</em></span>
sub-elements of the <code class="literal">component-scan</code> element. Each filter element requires the <code class="literal">type</code>
and <code class="literal">expression</code> attributes. The following table describes the filtering options.</p>
<div class="table"><a name="beans-scanning-filters-tbl"></a><p class="title"><b>Table&nbsp;4.5.&nbsp;Filter Types</b></p><div class="table-contents">

  <table summary="Filter Types" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Filter Type</th><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Example Expression</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">Description</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>annotation</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">org.example.SomeAnnotation</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>An annotation to be present at the type level in target components.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>assignable</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">org.example.SomeClass</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>A class (or interface) that the target components are assignable to (extend/implement).</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>aspectj</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">org.example..*Service+</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>An AspectJ type expression to be matched by the target components.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>regex</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">org\.example\.Default.*</code></p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>A regex expression to be matched by the target components class names.</p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>custom</p></td><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p><code class="literal">org.example.MyTypeFilter</code></p></td><td style="" align="left" valign="top"><p>A custom implementation of the <code class="literal">org.springframework.core.type .TypeFilter</code> interface.</p></td></tr></tbody></table>
</div></div><br class="table-break">

<p>The following example shows the XML configuration ignoring all <code class="literal">@Repository</code> annotations
and using "stub" repositories instead.</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;context:include-filter</span> <span class="hl-attribute">type</span>=<span class="hl-value">"regex"</span>
                <span class="hl-attribute">expression</span>=<span class="hl-value">".*Stub.*Repository"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;context:exclude-filter</span> <span class="hl-attribute">type</span>=<span class="hl-value">"annotation"</span>
                <span class="hl-attribute">expression</span>=<span class="hl-value">"org.springframework.stereotype.Repository"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/context:component-scan&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>You can also disable the default filters by providing <span class="emphasis"><em>use-default-filters="false"</em></span> as
an attribute of the &lt;component-scan/&gt; element. This will in effect disable automatic
detection of classes annotated with <code class="literal">@Component</code>, <code class="literal">@Repository</code>, <code class="literal">@Service</code>, or
<code class="literal">@Controller</code>.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="4.10.5 Defining bean metadata within components"><div class="titlepage"><div><div><h3 class="title"><a name="beans-factorybeans-annotations"></a>4.10.5&nbsp;Defining bean metadata within components</h3></div></div></div>

<p>Spring components can also contribute bean definition metadata to the container. You do
this with the same <code class="literal">@Bean</code> annotation used to define bean metadata within
<code class="literal">@Configuration</code> annotated classes. Here is a simple example:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Component</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> FactoryMethodComponent {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <i><span class="hl-annotation" style="color: gray">@Qualifier("public")</span></i>
    <span class="hl-keyword">public</span> TestBean publicInstance() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TestBean(<span class="hl-string">"publicInstance"</span>);
    }

    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doWork() {
        <span class="hl-comment">// Component method implementation omitted</span>
    }

}</pre>

<p>This class is a Spring component that has application-specific code contained in its
<code class="literal">doWork()</code> method. However, it also contributes a bean definition that has a factory
method referring to the method <code class="literal">publicInstance()</code>. The <code class="literal">@Bean</code> annotation identifies the
factory method and other bean definition properties, such as a qualifier value through
the <code class="literal">@Qualifier</code> annotation. Other method level annotations that can be specified are
<code class="literal">@Scope</code>, <code class="literal">@Lazy</code>, and custom qualifier annotations.</p>
<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>In addition to its role for component initialization, the <code class="literal">@Lazy</code> annotation may also be
placed on injection points marked with <code class="literal">@Autowired</code> or <code class="literal">@Inject</code>. In this context, it
leads to the injection of a lazy-resolution proxy.</p>
</td></tr></tbody></table></div>

<p>Autowired fields and methods are supported as previously discussed, with additional
support for autowiring of <code class="literal">@Bean</code> methods:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Component</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> FactoryMethodComponent {

    <span class="hl-keyword">private</span> <span class="hl-keyword">static</span> <span class="hl-keyword">int</span> i;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <i><span class="hl-annotation" style="color: gray">@Qualifier("public")</span></i>
    <span class="hl-keyword">public</span> TestBean publicInstance() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TestBean(<span class="hl-string">"publicInstance"</span>);
    }

    <span class="hl-comment">// use of a custom qualifier and autowiring of method parameters</span>

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">protected</span> TestBean protectedInstance(
            <i><span class="hl-annotation" style="color: gray">@Qualifier("public")</span></i> TestBean spouse,
            <i><span class="hl-annotation" style="color: gray">@Value("#{privateInstance.age}")</span></i> String country) {
        TestBean tb = <span class="hl-keyword">new</span> TestBean(<span class="hl-string">"protectedInstance"</span>, <span class="hl-number">1</span>);
        tb.setSpouse(tb);
        tb.setCountry(country);
        <span class="hl-keyword">return</span> tb;
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <i><span class="hl-annotation" style="color: gray">@Scope(BeanDefinition.SCOPE_SINGLETON)</span></i>
    <span class="hl-keyword">private</span> TestBean privateInstance() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TestBean(<span class="hl-string">"privateInstance"</span>, i++);
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <i><span class="hl-annotation" style="color: gray">@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)</span></i>
    <span class="hl-keyword">public</span> TestBean requestScopedInstance() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TestBean(<span class="hl-string">"requestScopedInstance"</span>, <span class="hl-number">3</span>);
    }

}</pre>

<p>The example autowires the <code class="literal">String</code> method parameter <code class="literal">country</code> to the value of the <code class="literal">Age</code>
property on another bean named <code class="literal">privateInstance</code>. A Spring Expression Language element
defines the value of the property through the notation <code class="literal">#{ &lt;expression&gt; }</code>. For <code class="literal">@Value</code>
annotations, an expression resolver is preconfigured to look for bean names when
resolving expression text.</p>
<p>The <code class="literal">@Bean</code> methods in a Spring component are processed differently than their
counterparts inside a Spring <code class="literal">@Configuration</code> class. The difference is that <code class="literal">@Component</code>
classes are not enhanced with CGLIB to intercept the invocation of methods and fields.
CGLIB proxying is the means by which invoking methods or fields within <code class="literal">@Configuration</code>
classes <code class="literal">@Bean</code> methods create bean metadata references to collaborating objects.
Methods are <span class="emphasis"><em>not</em></span> invoked with normal Java semantics. In contrast, calling a method or
field within a <code class="literal">@Component</code> classes <code class="literal">@Bean</code> method <span class="emphasis"><em>has</em></span> standard Java semantics.</p>
</div>
<div class="section" title="4.10.6 Naming autodetected components"><div class="titlepage"><div><div><h3 class="title"><a name="beans-scanning-name-generator"></a>4.10.6&nbsp;Naming autodetected components</h3></div></div></div>

<p>When a component is autodetected as part of the scanning process, its bean name is
generated by the <code class="literal">BeanNameGenerator</code> strategy known to that scanner. By default, any
Spring stereotype annotation ( <code class="literal">@Component</code>, <code class="literal">@Repository</code>, <code class="literal">@Service</code>, and
<code class="literal">@Controller</code>) that contains a <code class="literal">name</code> value will thereby provide that name to the
corresponding bean definition.</p>
<p>If such an annotation contains no <code class="literal">name</code> value or for any other detected component (such
as those discovered by custom filters), the default bean name generator returns the
uncapitalized non-qualified class name. For example, if the following two components
were detected, the names would be myMovieLister and movieFinderImpl:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Service("myMovieLister")</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {
    <span class="hl-comment">// ...</span>
}</pre>

<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Repository</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieFinderImpl <span class="hl-keyword">implements</span> MovieFinder {
    <span class="hl-comment">// ...</span>
}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>If you do not want to rely on the default bean-naming strategy, you can provide a custom
bean-naming strategy. First, implement the
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html" target="_top"><code class="literal">BeanNameGenerator</code></a>
interface, and be sure to include a default no-arg constructor. Then, provide the
fully-qualified class name when configuring the scanner:</p>
</td></tr></tbody></table></div>

<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span>
        <span class="hl-attribute">name-generator</span>=<span class="hl-value">"org.example.MyNameGenerator"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>As a general rule, consider specifying the name with the annotation whenever other
components may be making explicit references to it. On the other hand, the
auto-generated names are adequate whenever the container is responsible for wiring.</p>
</div>
<div class="section" title="4.10.7 Providing a scope for autodetected components"><div class="titlepage"><div><div><h3 class="title"><a name="beans-scanning-scope-resolver"></a>4.10.7&nbsp;Providing a scope for autodetected components</h3></div></div></div>

<p>As with Spring-managed components in general, the default and most common scope for
autodetected components is singleton. However, sometimes you need other scopes, which
Spring 2.5 provides with a new <code class="literal">@Scope</code> annotation. Simply provide the name of the scope
within the annotation:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Scope("prototype")</span></i>
<i><span class="hl-annotation" style="color: gray">@Repository</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieFinderImpl <span class="hl-keyword">implements</span> MovieFinder {
    <span class="hl-comment">// ...</span>
}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>To provide a custom strategy for scope resolution rather than relying on the
annotation-based approach, implement the
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html" target="_top"><code class="literal">ScopeMetadataResolver</code></a>
interface, and be sure to include a default no-arg constructor. Then, provide the
fully-qualified class name when configuring the scanner:</p>
</td></tr></tbody></table></div>

<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span>
            <span class="hl-attribute">scope-resolver</span>=<span class="hl-value">"org.example.MyScopeResolver"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>When using certain non-singleton scopes, it may be necessary to generate proxies for the
scoped objects. The reasoning is described in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-injection" title="Scoped beans as dependencies">the section called “Scoped beans as dependencies”</a>.
For this purpose, a <span class="emphasis"><em>scoped-proxy</em></span> attribute is available on the component-scan
element. The three possible values are: no, interfaces, and targetClass. For example,
the following configuration will result in standard JDK dynamic proxies:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span>
        <span class="hl-attribute">scoped-proxy</span>=<span class="hl-value">"interfaces"</span><span class="hl-tag"> /&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

</div>
<div class="section" title="4.10.8 Providing qualifier metadata with annotations"><div class="titlepage"><div><div><h3 class="title"><a name="beans-scanning-qualifiers"></a>4.10.8&nbsp;Providing qualifier metadata with annotations</h3></div></div></div>

<p>The <code class="literal">@Qualifier</code> annotation is discussed in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation-qualifiers" title="4.9.3 Fine-tuning annotation-based autowiring with qualifiers">Section&nbsp;4.9.3, “Fine-tuning annotation-based autowiring with qualifiers”</a>.
The examples in that section demonstrate the use of the <code class="literal">@Qualifier</code> annotation and
custom qualifier annotations to provide fine-grained control when you resolve autowire
candidates. Because those examples were based on XML bean definitions, the qualifier
metadata was provided on the candidate bean definitions using the <code class="literal">qualifier</code> or <code class="literal">meta</code>
sub-elements of the <code class="literal">bean</code> element in the XML. When relying upon classpath scanning for
autodetection of components, you provide the qualifier metadata with type-level
annotations on the candidate class. The following three examples demonstrate this
technique:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Component</span></i>
<span class="strong"><strong>@Qualifier("Action")</strong></span>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ActionMovieCatalog <span class="hl-keyword">implements</span> MovieCatalog {
    <span class="hl-comment">// ...</span>
}</pre>

<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Component</span></i>
<span class="strong"><strong>@Genre("Action")</strong></span>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ActionMovieCatalog <span class="hl-keyword">implements</span> MovieCatalog {
    <span class="hl-comment">// ...</span>
}</pre>

<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Component</span></i>
<span class="strong"><strong>@Offline</strong></span>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> CachingMovieCatalog <span class="hl-keyword">implements</span> MovieCatalog {
    <span class="hl-comment">// ...</span>
}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>As with most annotation-based alternatives, keep in mind that the annotation metadata is
bound to the class definition itself, while the use of XML allows for multiple beans
<span class="emphasis"><em>of the same type</em></span> to provide variations in their qualifier metadata, because that
metadata is provided per-instance rather than per-class.</p>
</td></tr></tbody></table></div>

</div>
</div>
<div class="section" title="4.11 Using JSR 330 Standard Annotations"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-standard-annotations"></a>4.11&nbsp;Using JSR 330 Standard Annotations</h2></div></div></div>

<p>Starting with Spring 3.0, Spring offers support for JSR-330 standard annotations
(Dependency Injection). Those annotations are scanned in the same way as the Spring
annotations. You just need to have the relevant jars in your classpath.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>If you are using Maven, the <code class="literal">javax.inject</code> artifact is available in the standard Maven
repository (
<a class="ulink" href="http://repo1.maven.org/maven2/javax/inject/javax.inject/1/" target="_top">http://repo1.maven.org/maven2/javax/inject/javax.inject/1/</a>).
You can add the following dependency to your file pom.xml:</p>
<pre class="programlisting"><span class="hl-tag">&lt;dependency&gt;</span>
    <span class="hl-tag">&lt;groupId&gt;</span>javax.inject<span class="hl-tag">&lt;/groupId&gt;</span>
    <span class="hl-tag">&lt;artifactId&gt;</span>javax.inject<span class="hl-tag">&lt;/artifactId&gt;</span>
    <span class="hl-tag">&lt;version&gt;</span>1<span class="hl-tag">&lt;/version&gt;</span>
<span class="hl-tag">&lt;/dependency&gt;</span></pre>

</td></tr></tbody></table></div>

<div class="section" title="4.11.1 Dependency Injection with @Inject and @Named"><div class="titlepage"><div><div><h3 class="title"><a name="beans-inject-named"></a>4.11.1&nbsp;Dependency Injection with @Inject and @Named</h3></div></div></div>

<p>Instead of <code class="literal">@Autowired</code>, <code class="literal">@javax.inject.Inject</code> may be used as follows:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> javax.inject.Inject;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Inject</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>As with <code class="literal">@Autowired</code>, it is possible to use <code class="literal">@Inject</code> at the class-level, field-level,
method-level and constructor-argument level. If you would like to use a qualified name
for the dependency that should be injected, you should use the <code class="literal">@Named</code> annotation as
follows:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> javax.inject.Inject;
<span class="hl-keyword">import</span> javax.inject.Named;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Inject</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(<i><span class="hl-annotation" style="color: gray">@Named("main")</span></i> MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

</div>
<div class="section" title="4.11.2 @Named: a standard equivalent to the @Component annotation"><div class="titlepage"><div><div><h3 class="title"><a name="beans-named"></a>4.11.2&nbsp;@Named: a standard equivalent to the @Component annotation</h3></div></div></div>

<p>Instead of <code class="literal">@Component</code>, <code class="literal">@javax.inject.Named</code> may be used as follows:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> javax.inject.Inject;
<span class="hl-keyword">import</span> javax.inject.Named;

<i><span class="hl-annotation" style="color: gray">@Named("movieListener")</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Inject</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>It is very common to use <code class="literal">@Component</code> without
specifying a name for the component. <code class="literal">@Named</code>
can be used in a similar fashion:</p>
<pre class="programlisting"><span class="hl-keyword">import</span> javax.inject.Inject;
<span class="hl-keyword">import</span> javax.inject.Named;

<i><span class="hl-annotation" style="color: gray">@Named</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister {

    <span class="hl-keyword">private</span> MovieFinder movieFinder;

    <i><span class="hl-annotation" style="color: gray">@Inject</span></i>
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMovieFinder(MovieFinder movieFinder) {
        <span class="hl-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<p>When using <code class="literal">@Named</code>, it is possible to use
component-scanning in the exact same way as when using Spring annotations:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"org.example"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

</div>
<div class="section" title="4.11.3 Limitations of the standard approach"><div class="titlepage"><div><div><h3 class="title"><a name="beans-standard-annotations-limitations"></a>4.11.3&nbsp;Limitations of the standard approach</h3></div></div></div>

<p>When working with standard annotations, it is important to know that some significant
features are not available as shown in the table below:</p>
<div class="table"><a name="annotations-comparison"></a><p class="title"><b>Table&nbsp;4.6.&nbsp;Spring annotations vs. standard annotations</b></p><div class="table-contents">

  <table summary="Spring annotations vs. standard annotations" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col><col><col></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">Spring</th><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top">javax.inject.*</th><th style="border-bottom: 0.5pt solid ; " align="left" valign="top">javax.inject restrictions / comments</th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Autowired</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Inject</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Inject has no <span class="emphasis"><em>required</em></span> attribute</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Component</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Named</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>-</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Scope("singleton")</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Singleton</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>The JSR-330 default scope is like Spring’s <code class="literal">prototype</code>. However, in order to keep it
  consistent with Spring’s general defaults, a JSR-330 bean declared in the Spring
  container is a <code class="literal">singleton</code> by default. In order to use a scope other than <code class="literal">singleton</code>,
  you should use Spring’s <code class="literal">@Scope</code> annotation.
</p><p><code class="literal">javax.inject</code> also provides a
<a class="ulink" href="http://download.oracle.com/javaee/6/api/javax/inject/Scope.html" target="_top">@Scope</a> annotation.
Nevertheless, this one is only intended to be used for creating your own annotations.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Qualifier</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Named</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>-</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Value</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>-</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>no equivalent</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>@Required</p></td><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align="left" valign="top"><p>-</p></td><td style="border-bottom: 0.5pt solid ; " align="left" valign="top"><p>no equivalent</p></td></tr><tr><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>@Lazy</p></td><td style="border-right: 0.5pt solid ; " align="left" valign="top"><p>-</p></td><td style="" align="left" valign="top"><p>no equivalent</p></td></tr></tbody></table>
</div></div><br class="table-break">

</div>
</div>
<div class="section" title="4.12 Java-based container configuration"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="beans-java"></a>4.12&nbsp;Java-based container configuration</h2></div></div></div>

<div class="section" title="4.12.1 Basic concepts: @Bean and @Configuration"><div class="titlepage"><div><div><h3 class="title"><a name="beans-java-basic-concepts"></a>4.12.1&nbsp;Basic concepts: @Bean and @Configuration</h3></div></div></div>

<p>The central artifacts in Spring’s new Java-configuration support are
<code class="literal">@Configuration</code>-annotated classes and <code class="literal">@Bean</code>-annotated methods.</p>
<p>The <code class="literal">@Bean</code> annotation is used to indicate that a method instantiates, configures and
initializes a new object to be managed by the Spring IoC container. For those familiar
with Spring’s <code class="literal">&lt;beans/&gt;</code> XML configuration the <code class="literal">@Bean</code> annotation plays the same role as
the <code class="literal">&lt;bean/&gt;</code> element. You can use <code class="literal">@Bean</code> annotated methods with any Spring
<code class="literal">@Component</code>, however, they are most often used with <code class="literal">@Configuration</code> beans.</p>
<p>Annotating a class with <code class="literal">@Configuration</code> indicates that its primary purpose is as a
source of bean definitions. Furthermore, <code class="literal">@Configuration</code> classes allow inter-bean
dependencies to be defined by simply calling other <code class="literal">@Bean</code> methods in the same class.
The simplest possible <code class="literal">@Configuration</code> class would read as follows:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> MyService myService() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> MyServiceImpl();
    }

}</pre>

<p>The <code class="literal">AppConfig</code> class above would be equivalent to the following Spring <code class="literal">&lt;beans/&gt;</code> XML:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"myService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.acme.services.MyServiceImpl"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>The <code class="literal">@Bean</code> and <code class="literal">@Configuration</code> annotations will be discussed in depth in the sections
below. First, however, we’ll cover the various ways of creating a spring container using
Java-based configuration.</p>
<div class="sidebar" title="Full @Configuration vs lite @Beans mode?"><p class="title"><b>Full @Configuration vs <span class="emphasis"><em>lite</em></span> @Beans mode?</b></p>

<p>When <code class="literal">@Bean</code> methods are declared within classes that are <span class="emphasis"><em>not</em></span> annotated with
<code class="literal">@Configuration</code> they are referred to as being processed in a <span class="emphasis"><em>lite</em></span> mode. For example,
bean methods declared in a <code class="literal">@Component</code> or even in a <span class="emphasis"><em>plain old class</em></span> will be
considered <span class="emphasis"><em>lite</em></span>.</p>
<p>Unlike full <code class="literal">@Configuration</code>, lite <code class="literal">@Bean</code> methods cannot easily declare inter-bean
dependencies. Usually one <code class="literal">@Bean</code> method should not invoke another <code class="literal">@Bean</code> method when
operating in <span class="emphasis"><em>lite</em></span> mode.</p>
<p>Only using <code class="literal">@Bean</code> methods within <code class="literal">@Configuration</code> classes is a recommended approach of
ensuring that <span class="emphasis"><em>full</em></span> mode is always used. This will prevent the same <code class="literal">@Bean</code> method from
accidentally being invoked multiple times and helps to reduce subtle bugs that can be
hard to track down when operating in <span class="emphasis"><em>lite</em></span> mode.</p>
</div>

</div>
<div class="section" title="4.12.2 Instantiating the Spring container using AnnotationConfigApplicationContext"><div class="titlepage"><div><div><h3 class="title"><a name="beans-java-instantiating-container"></a>4.12.2&nbsp;Instantiating the Spring container using AnnotationConfigApplicationContext</h3></div></div></div>

<p>The sections below document Spring’s <code class="literal">AnnotationConfigApplicationContext</code>, new in Spring
3.0. This versatile <code class="literal">ApplicationContext</code> implementation is capable of accepting not only
<code class="literal">@Configuration</code> classes as input, but also plain <code class="literal">@Component</code> classes and classes
annotated with JSR-330 metadata.</p>
<p>When <code class="literal">@Configuration</code> classes are provided as input, the <code class="literal">@Configuration</code> class itself
is registered as a bean definition, and all declared <code class="literal">@Bean</code> methods within the class
are also registered as bean definitions.</p>
<p>When <code class="literal">@Component</code> and JSR-330 classes are provided, they are registered as bean
definitions, and it is assumed that DI metadata such as <code class="literal">@Autowired</code> or <code class="literal">@Inject</code> are
used within those classes where necessary.</p>
<div class="section" title="Simple construction"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-instantiating-container-contstructor"></a>Simple construction</h4></div></div></div>

<p>In much the same way that Spring XML files are used as input when instantiating a
<code class="literal">ClassPathXmlApplicationContext</code>, <code class="literal">@Configuration</code> classes may be used as input when
instantiating an <code class="literal">AnnotationConfigApplicationContext</code>. This allows for completely
XML-free usage of the Spring container:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext(AppConfig.<span class="hl-keyword">class</span>);
    MyService myService = ctx.getBean(MyService.<span class="hl-keyword">class</span>);
    myService.doStuff();
}</pre>

<p>As mentioned above, <code class="literal">AnnotationConfigApplicationContext</code> is not limited to working only
with <code class="literal">@Configuration</code> classes. Any <code class="literal">@Component</code> or JSR-330 annotated class may be supplied
as input to the constructor. For example:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext(MyServiceImpl.<span class="hl-keyword">class</span>, Dependency1.<span class="hl-keyword">class</span>, Dependency2.<span class="hl-keyword">class</span>);
    MyService myService = ctx.getBean(MyService.<span class="hl-keyword">class</span>);
    myService.doStuff();
}</pre>

<p>The above assumes that <code class="literal">MyServiceImpl</code>, <code class="literal">Dependency1</code> and <code class="literal">Dependency2</code> use Spring
dependency injection annotations such as <code class="literal">@Autowired</code>.</p>
</div>
<div class="section" title="Building the container programmatically using register(Class&lt;?&gt;…)"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-instantiating-container-register"></a>Building the container programmatically using register(Class&lt;?&gt;…)</h4></div></div></div>

<p>An <code class="literal">AnnotationConfigApplicationContext</code> may be instantiated using a no-arg constructor
and then configured using the <code class="literal">register()</code> method. This approach is particularly useful
when programmatically building an <code class="literal">AnnotationConfigApplicationContext</code>.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    AnnotationConfigApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext();
    ctx.register(AppConfig.<span class="hl-keyword">class</span>, OtherConfig.<span class="hl-keyword">class</span>);
    ctx.register(AdditionalConfig.<span class="hl-keyword">class</span>);
    ctx.refresh();
    MyService myService = ctx.getBean(MyService.<span class="hl-keyword">class</span>);
    myService.doStuff();
}</pre>

</div>
<div class="section" title="Enabling component scanning with scan(String…)"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-instantiating-container-scan"></a>Enabling component scanning with scan(String…)</h4></div></div></div>

<p>Experienced Spring users will be familiar with the following commonly-used XML
declaration from Spring’s <code class="literal">context:</code> namespace</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;context:component-scan</span> <span class="hl-attribute">base-package</span>=<span class="hl-value">"com.acme"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>In the example above, the <code class="literal">com.acme</code> package will be scanned, looking for any
<code class="literal">@Component</code>-annotated classes, and those classes will be registered as Spring bean
definitions within the container. <code class="literal">AnnotationConfigApplicationContext</code> exposes the
<code class="literal">scan(String...)</code> method to allow for the same component-scanning functionality:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    AnnotationConfigApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext();
    ctx.scan(<span class="hl-string">"com.acme"</span>);
    ctx.refresh();
    MyService myService = ctx.getBean(MyService.<span class="hl-keyword">class</span>);
}</pre>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>Remember that <code class="literal">@Configuration</code> classes are <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-annotations" title="4.10.2 Meta-annotations">meta-annotated</a>
with <code class="literal">@Component</code>, so they are candidates for component-scanning! In the example above,
assuming that <code class="literal">AppConfig</code> is declared within the <code class="literal">com.acme</code> package (or any package
underneath), it will be picked up during the call to <code class="literal">scan()</code>, and upon <code class="literal">refresh()</code> all
its <code class="literal">@Bean</code> methods will be processed and registered as bean definitions within the
container.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="Support for web applications with AnnotationConfigWebApplicationContext"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-instantiating-container-web"></a>Support for web applications with AnnotationConfigWebApplicationContext</h4></div></div></div>

<p>A <code class="literal">WebApplicationContext</code> variant of <code class="literal">AnnotationConfigApplicationContext</code> is available
with <code class="literal">AnnotationConfigWebApplicationContext</code>. This implementation may be used when
configuring the Spring <code class="literal">ContextLoaderListener</code> servlet listener, Spring MVC
<code class="literal">DispatcherServlet</code>, etc. What follows is a <code class="literal">web.xml</code> snippet that configures a typical
Spring MVC web application. Note the use of the <code class="literal">contextClass</code> context-param and
init-param:</p>
<pre class="programlisting"><span class="hl-tag">&lt;web-app&gt;</span>
    <span class="hl-comment">&lt;!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
        instead of the default XmlWebApplicationContext --&gt;</span>
    <span class="hl-tag">&lt;context-param&gt;</span>
        <span class="hl-tag">&lt;param-name&gt;</span>contextClass<span class="hl-tag">&lt;/param-name&gt;</span>
        <span class="hl-tag">&lt;param-value&gt;</span>
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        <span class="hl-tag">&lt;/param-value&gt;</span>
    <span class="hl-tag">&lt;/context-param&gt;</span>

    <span class="hl-comment">&lt;!-- Configuration locations must consist of one or more comma- or space-delimited
        fully-qualified @Configuration classes. Fully-qualified packages may also be
        specified for component-scanning --&gt;</span>
    <span class="hl-tag">&lt;context-param&gt;</span>
        <span class="hl-tag">&lt;param-name&gt;</span>contextConfigLocation<span class="hl-tag">&lt;/param-name&gt;</span>
        <span class="hl-tag">&lt;param-value&gt;</span>com.acme.AppConfig<span class="hl-tag">&lt;/param-value&gt;</span>
    <span class="hl-tag">&lt;/context-param&gt;</span>

    <span class="hl-comment">&lt;!-- Bootstrap the root application context as usual using ContextLoaderListener --&gt;</span>
    <span class="hl-tag">&lt;listener&gt;</span>
        <span class="hl-tag">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hl-tag">&lt;/listener-class&gt;</span>
    <span class="hl-tag">&lt;/listener&gt;</span>

    <span class="hl-comment">&lt;!-- Declare a Spring MVC DispatcherServlet as usual --&gt;</span>
    <span class="hl-tag">&lt;servlet&gt;</span>
        <span class="hl-tag">&lt;servlet-name&gt;</span>dispatcher<span class="hl-tag">&lt;/servlet-name&gt;</span>
        <span class="hl-tag">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hl-tag">&lt;/servlet-class&gt;</span>
        <span class="hl-comment">&lt;!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext
            instead of the default XmlWebApplicationContext --&gt;</span>
        <span class="hl-tag">&lt;init-param&gt;</span>
            <span class="hl-tag">&lt;param-name&gt;</span>contextClass<span class="hl-tag">&lt;/param-name&gt;</span>
            <span class="hl-tag">&lt;param-value&gt;</span>
                org.springframework.web.context.support.AnnotationConfigWebApplicationContext
            <span class="hl-tag">&lt;/param-value&gt;</span>
        <span class="hl-tag">&lt;/init-param&gt;</span>
        <span class="hl-comment">&lt;!-- Again, config locations must consist of one or more comma- or space-delimited
            and fully-qualified @Configuration classes --&gt;</span>
        <span class="hl-tag">&lt;init-param&gt;</span>
            <span class="hl-tag">&lt;param-name&gt;</span>contextConfigLocation<span class="hl-tag">&lt;/param-name&gt;</span>
            <span class="hl-tag">&lt;param-value&gt;</span>com.acme.web.MvcConfig<span class="hl-tag">&lt;/param-value&gt;</span>
        <span class="hl-tag">&lt;/init-param&gt;</span>
    <span class="hl-tag">&lt;/servlet&gt;</span>

    <span class="hl-comment">&lt;!-- map all requests for /app/* to the dispatcher servlet --&gt;</span>
    <span class="hl-tag">&lt;servlet-mapping&gt;</span>
        <span class="hl-tag">&lt;servlet-name&gt;</span>dispatcher<span class="hl-tag">&lt;/servlet-name&gt;</span>
        <span class="hl-tag">&lt;url-pattern&gt;</span>/app/*<span class="hl-tag">&lt;/url-pattern&gt;</span>
    <span class="hl-tag">&lt;/servlet-mapping&gt;</span>
<span class="hl-tag">&lt;/web-app&gt;</span></pre>

</div>
</div>
<div class="section" title="4.12.3 Using the @Bean annotation"><div class="titlepage"><div><div><h3 class="title"><a name="beans-java-bean-annotation"></a>4.12.3&nbsp;Using the @Bean annotation</h3></div></div></div>

<p><code class="literal">@Bean</code> is a method-level annotation and a direct analog of the XML <code class="literal">&lt;bean/&gt;</code> element.
The annotation supports some of the attributes offered by <code class="literal">&lt;bean/&gt;</code>, such as:
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean" title="Initialization callbacks">init-method</a>,
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean" title="Destruction callbacks">destroy-method</a>,
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire" title="4.4.5 Autowiring collaborators">autowiring</a> and <code class="literal">name</code>.</p>
<p>You can use the <code class="literal">@Bean</code> annotation in a <code class="literal">@Configuration</code>-annotated or in a
<code class="literal">@Component</code>-annotated class.</p>
<div class="section" title="Declaring a bean"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-declaring-a-bean"></a>Declaring a bean</h4></div></div></div>

<p>To declare a bean, simply annotate a method with the <code class="literal">@Bean</code> annotation. You use this
method to register a bean definition within an <code class="literal">ApplicationContext</code> of the type
specified as the method’s return value. By default, the bean name will be the same as
the method name. The following is a simple example of a <code class="literal">@Bean</code> method declaration:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> TransferService transferService() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TransferServiceImpl();
    }

}</pre>

<p>The preceding configuration is exactly equivalent to the following Spring XML:</p>
<pre class="programlisting"><span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"transferService"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.acme.TransferServiceImpl"</span><span class="hl-tag">/&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>

<p>Both declarations make a bean named <code class="literal">transferService</code> available in the
<code class="literal">ApplicationContext</code>, bound to an object instance of type <code class="literal">TransferServiceImpl</code>:</p>

<pre class="literallayout">transferService -&gt; com.acme.TransferServiceImpl</pre>

</div>
<div class="section" title="Receiving lifecycle callbacks"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-lifecycle-callbacks"></a>Receiving lifecycle callbacks</h4></div></div></div>

<p>Any classes defined with the <code class="literal">@Bean</code> annotation support the regular lifecycle callbacks
and can use the <code class="literal">@PostConstruct</code> and <code class="literal">@PreDestroy</code> annotations from JSR-250, see
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-annotations" title="4.9.7 @PostConstruct and @PreDestroy">JSR-250 annotations</a> for further
details.</p>
<p>The regular Spring <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-nature" title="4.6 Customizing the nature of a bean">lifecycle</a> callbacks are fully supported as
well. If a bean implements <code class="literal">InitializingBean</code>, <code class="literal">DisposableBean</code>, or <code class="literal">Lifecycle</code>, their
respective methods are called by the container.</p>
<p>The standard set of <code class="literal">*Aware</code> interfaces such as <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanfactory" title="4.17 The BeanFactory">BeanFactoryAware</a>,
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">BeanNameAware</a>,
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#context-functionality-messagesource" title="4.16.1 Internationalization using MessageSource">MessageSourceAware</a>,
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title="4.6.2 ApplicationContextAware and BeanNameAware">ApplicationContextAware</a>, and so on are also fully supported.</p>
<p>The <code class="literal">@Bean</code> annotation supports specifying arbitrary initialization and destruction
callback methods, much like Spring XML’s <code class="literal">init-method</code> and <code class="literal">destroy-method</code> attributes
on the <code class="literal">bean</code> element:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Foo {
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> init() {
        <span class="hl-comment">// initialization logic</span>
    }
}

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Bar {
    <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> cleanup() {
        <span class="hl-comment">// destruction logic</span>
    }
}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean(initMethod = "init")</span></i>
    <span class="hl-keyword">public</span> Foo foo() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Foo();
    }

    <i><span class="hl-annotation" style="color: gray">@Bean(destroyMethod = "cleanup")</span></i>
    <span class="hl-keyword">public</span> Bar bar() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Bar();
    }

}</pre>

<p>Of course, in the case of <code class="literal">Foo</code> above, it would be equally as valid to call the <code class="literal">init()</code>
method directly during construction:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {
    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> Foo foo() {
        Foo foo = <span class="hl-keyword">new</span> Foo();
        foo.init();
    <span class="hl-keyword">return</span> foo;
    }

    <span class="hl-comment">// ...</span>

}</pre>

<div class="tip" title="Tip" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Tip"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Tip]" src="./Spring Framework Reference Documentation_files/tip.png"></td><th align="left">Tip</th></tr><tr><td align="left" valign="top">
<p>When you work directly in Java, you can do anything you like with your objects and do
not always need to rely on the container lifecycle!</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="Specifying bean scope"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-specifying-bean-scope"></a>Specifying bean scope</h4></div></div></div>

<div class="section" title="Using the @Scope annotation"><div class="titlepage"><div><div><h5 class="title"><a name="beans-java-available-scopes"></a>Using the @Scope annotation</h5></div></div></div>

<p>You can specify that your beans defined with the <code class="literal">@Bean</code> annotation should have a
specific scope. You can use any of the standard scopes specified in the
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes" title="4.5 Bean scopes">Bean Scopes</a> section.</p>
<p>The default scope is <code class="literal">singleton</code>, but you can override this with the <code class="literal">@Scope</code> annotation:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyConfiguration {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="strong"><strong>@Scope("prototype")</strong></span>
    <span class="hl-keyword">public</span> Encryptor encryptor() {
        <span class="hl-comment">// ...</span>
    }

}</pre>

</div>
<div class="section" title="@Scope and scoped-proxy"><div class="titlepage"><div><div><h5 class="title"><a name="beans-java-scoped-proxy"></a>@Scope and scoped-proxy</h5></div></div></div>

<p>Spring offers a convenient way of working with scoped dependencies through
<a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-injection" title="Scoped beans as dependencies">scoped proxies</a>. The easiest way to create such
a proxy when using the XML configuration is the <code class="literal">&lt;aop:scoped-proxy/&gt;</code> element.
Configuring your beans in Java with a @Scope annotation offers equivalent support with
the proxyMode attribute. The default is no proxy ( <code class="literal">ScopedProxyMode.NO</code>), but you can
specify <code class="literal">ScopedProxyMode.TARGET_CLASS</code> or <code class="literal">ScopedProxyMode.INTERFACES</code>.</p>
<p>If you port the scoped proxy example from the XML reference documentation (see preceding
link) to our <code class="literal">@Bean</code> using Java, it would look like the following:</p>
<pre class="programlisting"><span class="hl-comment">// an HTTP Session-scoped bean exposed as a proxy</span>
<i><span class="hl-annotation" style="color: gray">@Bean</span></i>
<span class="strong"><strong>@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)</strong></span>
<span class="hl-keyword">public</span> UserPreferences userPreferences() {
    <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> UserPreferences();
}

<i><span class="hl-annotation" style="color: gray">@Bean</span></i>
<span class="hl-keyword">public</span> Service userService() {
    UserService service = <span class="hl-keyword">new</span> SimpleUserService();
    <span class="hl-comment">// a reference to the proxied userPreferences bean</span>
    service.setUserPreferences(userPreferences());
    <span class="hl-keyword">return</span> service;
}</pre>

</div>
</div>
<div class="section" title="Customizing bean naming"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-customizing-bean-naming"></a>Customizing bean naming</h4></div></div></div>

<p>By default, configuration classes use a <code class="literal">@Bean</code> method’s name as the name of the
resulting bean. This functionality can be overridden, however, with the <code class="literal">name</code> attribute.</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean(name = "myFoo")</span></i>
    <span class="hl-keyword">public</span> Foo foo() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Foo();
    }

}</pre>

</div>
<div class="section" title="Bean aliasing"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-bean-aliasing"></a>Bean aliasing</h4></div></div></div>

<p>As discussed in <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname" title="4.3.1 Naming beans">Section&nbsp;4.3.1, “Naming beans”</a>, it is sometimes desirable to give a single bean
multiple names, otherwise known as<span class="emphasis"><em>bean aliasing</em></span>. The <code class="literal">name</code> attribute of the <code class="literal">@Bean</code>
annotation accepts a String array for this purpose.</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean(name = { "dataSource", "subsystemA-dataSource", "subsystemB-dataSource" })</span></i>
    <span class="hl-keyword">public</span> DataSource dataSource() {
        <span class="hl-comment">// instantiate, configure and return DataSource bean...</span>
    }

}</pre>

</div>
<div class="section" title="Bean description"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-bean-description"></a>Bean description</h4></div></div></div>

<p>Sometimes it is helpful to provide a more detailed textual description of a bean. This can
be particularly useful when beans are exposed (perhaps via JMX) for monitoring purposes.</p>
<p>To add a description to a <code class="literal">@Bean</code> the
<a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Description.html" target="_top"><code class="literal">@Description</code></a>
annotation can be used:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="strong"><strong>@Desciption("Provides a basic example of a bean")</strong></span>
    <span class="hl-keyword">public</span> Foo foo() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Foo();
    }

}</pre>

</div>
</div>
<div class="section" title="4.12.4 Using the @Configuration annotation"><div class="titlepage"><div><div><h3 class="title"><a name="beans-java-configuration-annotation"></a>4.12.4&nbsp;Using the @Configuration annotation</h3></div></div></div>

<p><code class="literal">@Configuration</code> is a class-level annotation indicating that an object is a source of
bean definitions. <code class="literal">@Configuration</code> classes declare beans via public <code class="literal">@Bean</code> annotated
methods. Calls to <code class="literal">@Bean</code> methods on <code class="literal">@Configuration</code> classes can also be used to define
inter-bean dependencies. See <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-java-basic-concepts" title="4.12.1 Basic concepts: @Bean and @Configuration">Section&nbsp;4.12.1, “Basic concepts: @Bean and @Configuration”</a> for a general introduction.</p>
<div class="section" title="Injecting inter-bean dependencies"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-injecting-dependencies"></a>Injecting inter-bean dependencies</h4></div></div></div>

<p>When <code class="literal">@Bean</code> s have dependencies on one another, expressing that dependency is as simple
as having one bean method call another:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> Foo foo() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Foo(bar());
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> Bar bar() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> Bar();
    }

}</pre>

<p>In the example above, the <code class="literal">foo</code> bean receives a reference to <code class="literal">bar</code> via constructor
injection.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>This method of declaring inter-bean dependencies only works when the <code class="literal">@Bean</code> method is
declared within a <code class="literal">@Configuration</code> class. You cannot declare inter-bean dependencies
using plain <code class="literal">@Component</code> classes.</p>
</td></tr></tbody></table></div>

</div>
<div class="section" title="Lookup method injection"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-method-injection"></a>Lookup method injection</h4></div></div></div>

<p>As noted earlier, <a class="link" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-method-injection" title="4.4.6 Method injection">lookup method injection</a> is an
advanced feature that you should use rarely. It is useful in cases where a
singleton-scoped bean has a dependency on a prototype-scoped bean. Using Java for this
type of configuration provides a natural means for implementing this pattern.</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">abstract</span> <span class="hl-keyword">class</span> CommandManager {
    <span class="hl-keyword">public</span> Object process(Object commandState) {
        <span class="hl-comment">// grab a new instance of the appropriate Command interface</span>
        Command command = createCommand();

        <span class="hl-comment">// set the state on the (hopefully brand new) Command instance</span>
        command.setState(commandState);
    <span class="hl-keyword">return</span> command.execute();
    }

    <span class="hl-comment">// okay... but where is the implementation of this method?</span>
    <span class="hl-keyword">protected</span> <span class="hl-keyword">abstract</span> Command createCommand();
}</pre>

<p>Using Java-configuration support , you can create a subclass of <code class="literal">CommandManager</code> where
the abstract <code class="literal">createCommand()</code> method is overridden in such a way that it looks up a new
(prototype) command object:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Bean</span></i>
<i><span class="hl-annotation" style="color: gray">@Scope("prototype")</span></i>
<span class="hl-keyword">public</span> AsyncCommand asyncCommand() {
    AsyncCommand command = <span class="hl-keyword">new</span> AsyncCommand();
    <span class="hl-comment">// inject dependencies here as required</span>
    <span class="hl-keyword">return</span> command;
}

<i><span class="hl-annotation" style="color: gray">@Bean</span></i>
<span class="hl-keyword">public</span> CommandManager commandManager() {
    <span class="hl-comment">// return new anonymous implementation of CommandManager with command() overridden</span>
    <span class="hl-comment">// to return a new prototype Command object</span>
    <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> CommandManager() {
        <span class="hl-keyword">protected</span> Command createCommand() {
            <span class="hl-keyword">return</span> asyncCommand();
        }
    }
}</pre>

</div>
<div class="section" title="Further information about how Java-based configuration works internally"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-further-information-java-config"></a>Further information about how Java-based configuration works internally</h4></div></div></div>

<p>The following example shows a <code class="literal">@Bean</code> annotated method being called twice:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> ClientService clientService1() {
        ClientServiceImpl clientService = <span class="hl-keyword">new</span> ClientServiceImpl();
        clientService.setClientDao(clientDao());
        <span class="hl-keyword">return</span> clientService;
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> ClientService clientService2() {
        ClientServiceImpl clientService = <span class="hl-keyword">new</span> ClientServiceImpl();
        clientService.setClientDao(clientDao());
        <span class="hl-keyword">return</span> clientService;
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> ClientDao clientDao() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> ClientDaoImpl();
    }

}</pre>

<p><code class="literal">clientDao()</code> has been called once in <code class="literal">clientService1()</code> and once in <code class="literal">clientService2()</code>.
Since this method creates a new instance of <code class="literal">ClientDaoImpl</code> and returns it, you would
normally expect having 2 instances (one for each service). That definitely would be
problematic: in Spring, instantiated beans have a <code class="literal">singleton</code> scope by default. This is
where the magic comes in: All <code class="literal">@Configuration</code> classes are subclassed at startup-time
with <code class="literal">CGLIB</code>. In the subclass, the child method checks the container first for any
cached (scoped) beans before it calls the parent method and creates a new instance. Note
that as of Spring 3.2, it is no longer necessary to add CGLIB to your classpath because
CGLIB classes have been repackaged under org.springframework and included directly
within the spring-core JAR.</p>
<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>The behavior could be different according to the scope of your bean. We are talking
about singletons here.</p>
</td></tr></tbody></table></div>

<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tbody><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="./Spring Framework Reference Documentation_files/note.png"></td><th align="left">Note</th></tr><tr><td align="left" valign="top">
<p>There are a few restrictions due to the fact that CGLIB dynamically adds features at
startup-time:</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem">
Configuration classes should not be final
</li><li class="listitem">
They should have a constructor with no arguments
</li></ul></div>

</td></tr></tbody></table></div>

</div>
</div>
<div class="section" title="4.12.5 Composing Java-based configurations"><div class="titlepage"><div><div><h3 class="title"><a name="beans-java-composing-configuration-classes"></a>4.12.5&nbsp;Composing Java-based configurations</h3></div></div></div>

<div class="section" title="Using the @Import annotation"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-using-import"></a>Using the @Import annotation</h4></div></div></div>

<p>Much as the <code class="literal">&lt;import/&gt;</code> element is used within Spring XML files to aid in modularizing
configurations, the <code class="literal">@Import</code> annotation allows for loading <code class="literal">@Bean</code> definitions from
another configuration class:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ConfigA {

     <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> A a() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> A();
    }

}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<i><span class="hl-annotation" style="color: gray">@Import(ConfigA.class)</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ConfigB {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> B b() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> B();
    }

}</pre>

<p>Now, rather than needing to specify both <code class="literal">ConfigA.class</code> and <code class="literal">ConfigB.class</code> when
instantiating the context, only <code class="literal">ConfigB</code> needs to be supplied explicitly:</p>
<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext(ConfigB.<span class="hl-keyword">class</span>);

    <span class="hl-comment">// now both beans A and B will be available...</span>
    A a = ctx.getBean(A.<span class="hl-keyword">class</span>);
    B b = ctx.getBean(B.<span class="hl-keyword">class</span>);
}</pre>

<p>This approach simplifies container instantiation, as only one class needs to be dealt
with, rather than requiring the developer to remember a potentially large number of
<code class="literal">@Configuration</code> classes during construction.</p>
<div class="section" title="Injecting dependencies on imported @Bean definitions"><div class="titlepage"><div><div><h5 class="title"><a name="beans-java-injecting-imported-beans"></a>Injecting dependencies on imported @Bean definitions</h5></div></div></div>

<p>The example above works, but is simplistic. In most practical scenarios, beans will have
dependencies on one another across configuration classes. When using XML, this is not an
issue, per se, because there is no compiler involved, and one can simply declare
<code class="literal">ref="someBean"</code> and trust that Spring will work it out during container initialization.
Of course, when using <code class="literal">@Configuration</code> classes, the Java compiler places constraints on
the configuration model, in that references to other beans must be valid Java syntax.</p>
<p>Fortunately, solving this problem is simple. Remember that <code class="literal">@Configuration</code> classes are
ultimately just another bean in the container - this means that they can take advantage
of <code class="literal">@Autowired</code> injection metadata just like any other bean!</p>
<p>Let’s consider a more real-world scenario with several <code class="literal">@Configuration</code> classes, each
depending on beans declared in the others:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ServiceConfig {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> AccountRepository accountRepository;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> TransferService transferService() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TransferServiceImpl(accountRepository);
    }

}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> RepositoryConfig {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> DataSource dataSource;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> AccountRepository accountRepository() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> JdbcAccountRepository(dataSource);
    }

}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<i><span class="hl-annotation" style="color: gray">@Import({ServiceConfig.class, RepositoryConfig.class})</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SystemTestConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> DataSource dataSource() {
        <span class="hl-comment">// return new DataSource</span>
    }

}

<span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext(SystemTestConfig.<span class="hl-keyword">class</span>);
    <span class="hl-comment">// everything wires up across configuration classes...</span>
    TransferService transferService = ctx.getBean(TransferService.<span class="hl-keyword">class</span>);
    transferService.transfer(<span class="hl-number">100.00</span>, <span class="hl-string">"A123"</span>, <span class="hl-string">"C456"</span>);
}</pre>

<p>In the scenario above, using <code class="literal">@Autowired</code> works well and provides the desired
modularity, but determining exactly where the autowired bean definitions are declared is
still somewhat ambiguous. For example, as a developer looking at <code class="literal">ServiceConfig</code>, how do
you know exactly where the <code class="literal">@Autowired AccountRepository</code> bean is declared? It’s not
explicit in the code, and this may be just fine. Remember that the
<a class="ulink" href="http://www.springsource.com/products/sts" target="_top">SpringSource Tool Suite</a> provides tooling that
can render graphs showing how everything is wired up - that may be all you need. Also,
your Java IDE can easily find all declarations and uses of the <code class="literal">AccountRepository</code> type,
and will quickly show you the location of <code class="literal">@Bean</code> methods that return that type.</p>
<p>In cases where this ambiguity is not acceptable and you wish to have direct navigation
from within your IDE from one <code class="literal">@Configuration</code> class to another, consider autowiring the
configuration classes themselves:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ServiceConfig {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> RepositoryConfig repositoryConfig;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> TransferService transferService() {
        <span class="hl-comment">// navigate </span><span class="emphasis"><em>through</em></span> the config <span class="hl-keyword">class</span> to the <i><span class="hl-annotation" style="color: gray">@Bean</span></i> method!
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TransferServiceImpl(repositoryConfig.accountRepository());
    }

}</pre>

<p>In the situation above, it is completely explicit where <code class="literal">AccountRepository</code> is defined.
However, <code class="literal">ServiceConfig</code> is now tightly coupled to <code class="literal">RepositoryConfig</code>; that’s the
tradeoff. This tight coupling can be somewhat mitigated by using interface-based or
abstract class-based <code class="literal">@Configuration</code> classes. Consider the following:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ServiceConfig {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> RepositoryConfig repositoryConfig;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> TransferService transferService() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TransferServiceImpl(repositoryConfig.accountRepository());
    }
}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> RepositoryConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    AccountRepository accountRepository();

}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> DefaultRepositoryConfig <span class="hl-keyword">implements</span> RepositoryConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> AccountRepository accountRepository() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> JdbcAccountRepository(...);
    }

}

<i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<i><span class="hl-annotation" style="color: gray">@Import({ServiceConfig.class, DefaultRepositoryConfig.class})</span></i> <span class="hl-comment">// import the concrete config!</span>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SystemTestConfig {

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> DataSource dataSource() {
        <span class="hl-comment">// return DataSource</span>
    }

}

<span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx = <span class="hl-keyword">new</span> AnnotationConfigApplicationContext(SystemTestConfig.<span class="hl-keyword">class</span>);
    TransferService transferService = ctx.getBean(TransferService.<span class="hl-keyword">class</span>);
    transferService.transfer(<span class="hl-number">100.00</span>, <span class="hl-string">"A123"</span>, <span class="hl-string">"C456"</span>);
}</pre>

<p>Now <code class="literal">ServiceConfig</code> is loosely coupled with respect to the concrete
<code class="literal">DefaultRepositoryConfig</code>, and built-in IDE tooling is still useful: it will be easy for
the developer to get a type hierarchy of <code class="literal">RepositoryConfig</code> implementations. In this
way, navigating <code class="literal">@Configuration</code> classes and their dependencies becomes no different
than the usual process of navigating interface-based code.</p>
</div>
</div>
<div class="section" title="Conditionally including @Configuration classes or @Beans"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-conditional"></a>Conditionally including @Configuration classes or @Beans</h4></div></div></div>

<p>It is often useful to conditionally enable to disable a complete <code class="literal">@Configuration</code> class,
or even individual <code class="literal">@Bean</code> methods, based on some arbitrary system state. One common
example of this it to use the <code class="literal">@Profile</code> annotation to active beans only when a specific
profile has been enabled in the Spring <code class="literal">Environment</code> (see <a class="xref" href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-profiles" title="4.13 Bean definition profiles and environment abstraction">Section&nbsp;4.13, “Bean definition profiles and environment abstraction”</a>
for details).</p>
<p>The <code class="literal">@Profile</code> annotation is actually implemented using a much more flexible annotation
called <a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_top"><code class="literal">@Conditional</code></a>.
The <code class="literal">@Conditional</code> annotation indicates specific
<code class="literal">org.springframework.context.annotation.Condition</code> implementations that should be
consulted before a <code class="literal">@Bean</code> is registered.</p>
<p>Implementations of the <code class="literal">Condition</code> interface simply provide a <code class="literal">matches(...)</code>
method that returns <code class="literal">true</code> or <code class="literal">false</code>. For example, here is the actual
<code class="literal">Condition</code> implementation used for <code class="literal">@Profile</code>:</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Override</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
    <span class="hl-keyword">if</span> (context.getEnvironment() != null) {
        <span class="hl-comment">// Read the @Profile annotation attributes</span>
        MultiValueMap&lt;String, Object&gt; attrs = metadata.getAllAnnotationAttributes(Profile.<span class="hl-keyword">class</span>.getName());
        <span class="hl-keyword">if</span> (attrs != null) {
            <span class="hl-keyword">for</span> (Object value : attrs.get(<span class="hl-string">"value"</span>)) {
                <span class="hl-keyword">if</span> (context.getEnvironment().acceptsProfiles(((String[]) value))) {
                    <span class="hl-keyword">return</span> true;
                }
            }
            <span class="hl-keyword">return</span> false;
        }
    }
    <span class="hl-keyword">return</span> true;
}</pre>

<p>See the <a class="ulink" href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_top">
<code class="literal">@Conditional</code> Javadoc</a> for more detail.</p>
</div>
<div class="section" title="Combining Java and XML configuration"><div class="titlepage"><div><div><h4 class="title"><a name="beans-java-combining"></a>Combining Java and XML configuration</h4></div></div></div>

<p>Spring’s <code class="literal">@Configuration</code> class support does not aim to be a 100% complete replacement
for Spring XML. Some facilities such as Spring XML namespaces remain an ideal way to
configure the container. In cases where XML is convenient or necessary, you have a
choice: either instantiate the container in an "XML-centric" way using, for example,
<code class="literal">ClassPathXmlApplicationContext</code>, or in a "Java-centric" fashion using
<code class="literal">AnnotationConfigApplicationContext</code> and the <code class="literal">@ImportResource</code> annotation to import XML
as needed.</p>
<div class="section" title="XML-centric use of @Configuration classes"><div class="titlepage"><div><div><h5 class="title"><a name="beans-java-combining-xml-centric"></a>XML-centric use of @Configuration classes</h5></div></div></div>

<p>It may be preferable to bootstrap the Spring container from XML and include
<code class="literal">@Configuration</code> classes in an ad-hoc fashion. For example, in a large existing codebase
that uses Spring XML, it will be easier to create <code class="literal">@Configuration</code> classes on an
as-needed basis and include them from the existing XML files. Below you’ll find the
options for using <code class="literal">@Configuration</code> classes in this kind of "XML-centric" situation.</p>
<p>Remember that <code class="literal">@Configuration</code> classes are ultimately just bean definitions in the
container. In this example, we create a <code class="literal">@Configuration</code> class named <code class="literal">AppConfig</code> and
include it within <code class="literal">system-test-config.xml</code> as a <code class="literal">&lt;bean/&gt;</code> definition. Because
<code class="literal">&lt;context:annotation-config/&gt;</code> is switched on, the container will recognize the
<code class="literal">@Configuration</code> annotation, and process the <code class="literal">@Bean</code> methods declared in <code class="literal">AppConfig</code>
properly.</p>
<pre class="programlisting"><i><span class="hl-annotation" style="color: gray">@Configuration</span></i>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AppConfig {

    <i><span class="hl-annotation" style="color: gray">@Autowired</span></i>
    <span class="hl-keyword">private</span> DataSource dataSource;

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> AccountRepository accountRepository() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> JdbcAccountRepository(dataSource);
    }

    <i><span class="hl-annotation" style="color: gray">@Bean</span></i>
    <span class="hl-keyword">public</span> TransferService transferService() {
        <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> TransferService(accountRepository());
    }

}</pre>

<pre class="programlisting">system-test-config.xml
<span class="hl-tag">&lt;beans&gt;</span>
    <span class="hl-comment">&lt;!-- enable processing of annotations such as @Autowired and @Configuration --&gt;</span>
    <span class="hl-tag">&lt;context:annotation-config/&gt;</span>
    <span class="hl-tag">&lt;context:property-placeholder</span> <span class="hl-attribute">location</span>=<span class="hl-value">"classpath:/com/acme/jdbc.properties"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"com.acme.AppConfig"</span><span class="hl-tag">/&gt;</span>

    <span class="hl-tag">&lt;bean</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="hl-tag">&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"url"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.url}"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"username"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.username}"</span><span class="hl-tag">/&gt;</span>
        <span class="hl-tag">&lt;property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"password"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"${jdbc.password}"</span><span class="hl-tag">/&gt;</span>
    <span class="hl-tag">&lt;/bean&gt;</span>
<span class="hl-tag">&lt;/beans&gt;</span></pre>


<pre class="literallayout">jdbc.properties
jdbc.url=jdbc</pre></div></div></div></div></div></div></div></body></html>